[{"title":"Electron快速开始","url":"/2024/08/18/Electron/electron%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","content":"<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pnpm create @quick-start/electron my-app --template vue</span><br></pre></td></tr></table></figure>\n\n<p><strong>electron-vite：</strong> <a href=\"https://cn.electron-vite.org/guide/\">https://cn.electron-vite.org/guide/</a></p>\n<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><blockquote>\n<p>进程分为：<code>主进程</code>和<code>渲染进程</code>在 <code>Electron</code> 中，每个应用有一个主进程和一个或多个渲染进程</p>\n</blockquote>\n<p><code>主进程:</code></p>\n<ul>\n<li>负责运行 package.json 的 main 脚本，并执行应用的整个生命周期</li>\n<li>控制所有的 Web 页面和与它们的交互</li>\n<li>只有在主进程中才能调用某些 Electron 的原生 API</li>\n<li>一个 Electron 应用始终有一个主进程</li>\n</ul>\n<p><code>渲染进程:</code></p>\n<ul>\n<li>每个 Electron 的 BrowserWindow 在其自己的渲染进程中运行 Web 页面</li>\n<li>负责页面的渲染，即页面上的用户界面</li>\n<li>一个 Electron 应用可以有多个渲染进程</li>\n<li>与主进程相对独立，但二者之间可以通过 IPC（进程间通讯）进行通信</li>\n</ul>\n<h1 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h1><blockquote>\n<p>在 Electron 中，渲染进程（即网页）可以通过多种方式与主进程（即 Node.js 环境）进行通信。以下是几种常见的方法：</p>\n</blockquote>\n<h2 id=\"主进程到渲染进程\"><a href=\"#主进程到渲染进程\" class=\"headerlink\" title=\"主进程到渲染进程\"></a>主进程到渲染进程</h2><h3 id=\"webContents-send\"><a href=\"#webContents-send\" class=\"headerlink\" title=\"webContents.send\"></a>webContents.send</h3><blockquote>\n<p>描述：主进程向特定的渲染进程发送消息</p>\n</blockquote>\n<p><strong>主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserWindow</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>() <span class=\"comment\">// 创建窗口</span></span><br><span class=\"line\">win.<span class=\"property\">webContents</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;main-to-renderer&#x27;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&#x27;value&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;main-to-renderer&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data) <span class=\"comment\">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"渲染进程到主进程\"><a href=\"#渲染进程到主进程\" class=\"headerlink\" title=\"渲染进程到主进程\"></a>渲染进程到主进程</h2><h3 id=\"ipcRenderer-send\"><a href=\"#ipcRenderer-send\" class=\"headerlink\" title=\"ipcRenderer.send\"></a>ipcRenderer.send</h3><blockquote>\n<p>描述：渲染进程向主进程发送消息，不等待响应</p>\n</blockquote>\n<p><strong>渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;renderer-to-main&#x27;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&#x27;value&#x27;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收主进程的回复</span></span><br><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;reply-channel&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;renderer-to-main&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data) <span class=\"comment\">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 回复渲染进程</span></span><br><span class=\"line\">  <span class=\"comment\">// event.reply 是主进程在接收到渲染进程发送的消息后，可以向该渲染进程回复消息</span></span><br><span class=\"line\">  <span class=\"comment\">// 适用于渲染进程向主进程发送消息后，主进程需要回复消息的场景(适合需要持续通信)</span></span><br><span class=\"line\">  event.<span class=\"title function_\">reply</span>(<span class=\"string\">&#x27;reply-channel&#x27;</span>, <span class=\"string\">&#x27;reply message&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>打开外部网页</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">const handleClick = () =&gt; &#123;</span><br><span class=\"line\">  electron.ipcRenderer.send(&#x27;open&#x27;, &#x27;open&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;dashboard-page&quot;&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; @click=&quot;handleClick&quot;&gt;open&lt;/el-button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;open&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// mainWindow.loadURL(&#x27;http://localhost:4000&#x27;)</span></span><br><span class=\"line\">  mainWindow.<span class=\"title function_\">loadURL</span>(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ipcRenderer-invoke\"><a href=\"#ipcRenderer-invoke\" class=\"headerlink\" title=\"ipcRenderer.invoke\"></a>ipcRenderer.invoke</h3><blockquote>\n<p>描述：渲染进程向主进程发送消息，并等待响应，返回一个Promise对象，用于需要同步或异步获取主进程处理结果的情况</p>\n</blockquote>\n<p><strong>渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向主进程发送消息并等待响应</span></span><br><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">invoke</span>(<span class=\"string\">&#x27;renderer-to-main-invoke&#x27;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&#x27;value&#x27;</span> &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response) <span class=\"comment\">// 输出主进程返回的响应</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">handle</span>(<span class=\"string\">&#x27;renderer-to-main-invoke&#x27;</span>, <span class=\"title function_\">async</span> (event, data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data) <span class=\"comment\">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">&#x27;主进程的响应&#x27;</span> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"渲染进程到渲染进程\"><a href=\"#渲染进程到渲染进程\" class=\"headerlink\" title=\"渲染进程到渲染进程\"></a>渲染进程到渲染进程</h2><blockquote>\n<p><strong>渲染进程Electron本身不直接支持渲染进程之间的直接通信，但可以通过主进程作为中介来实现</strong><br>描述：一个渲染进程发送消息到主进程，主进程再将消息转发到另一个渲染进程</p>\n</blockquote>\n<p><strong>渲染进程A</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;rendererA-to-main&#x27;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&#x27;value&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain, <span class=\"title class_\">BrowserWindow</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> winB = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>() <span class=\"comment\">// 创建窗口B 或者 使用已有窗口</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;rendererA-to-main&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  winB.<span class=\"property\">webContents</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;main-to-rendererB&#x27;</span>, data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>渲染进程B</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain, <span class=\"title class_\">BrowserWindow</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> winB = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>()</span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;rendererA-to-main&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  winB.<span class=\"property\">webContents</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;main-to-rendererB&#x27;</span>, data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>主进程到渲染进程：使用webContents.send。</li>\n<li>渲染进程到主进程：使用ipcRenderer.send（不等待响应）或ipcRenderer.invoke（等待响应）。</li>\n<li>渲染进程到渲染进程：通过主进程中转，使用ipcRenderer.send和webContents.send。</li>\n</ul>\n<h1 id=\"退出应用\"><a href=\"#退出应用\" class=\"headerlink\" title=\"退出应用\"></a>退出应用</h1><h2 id=\"app-quit\"><a href=\"#app-quit\" class=\"headerlink\" title=\"app.quit\"></a><code>app.quit</code></h2><p><strong>用户操作退出</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在渲染进程中 用户点击按钮退出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">close</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;close&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主进程监听事件</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  app.<span class=\"title function_\">quit</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义菜单退出</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染进程</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, <span class=\"title class_\">Menu</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;File&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">submenu</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Exit&#x27;</span>,</span><br><span class=\"line\">        <span class=\"title function_\">click</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          app.<span class=\"title function_\">quit</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> menu = <span class=\"title class_\">Menu</span>.<span class=\"title function_\">buildFromTemplate</span>(template)</span><br><span class=\"line\"><span class=\"title class_\">Menu</span>.<span class=\"title function_\">setApplicationMenu</span>(menu)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"app-exit\"><a href=\"#app-exit\" class=\"headerlink\" title=\"app.exit\"></a><code>app.exit</code></h2><blockquote>\n<p><code>app.exit</code> 方法，表示强制退出应用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; app &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在需要退出应用的地方调用</span></span><br><span class=\"line\">app.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>)  <span class=\"comment\">// 正常退出应用</span></span><br><span class=\"line\">app.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)  <span class=\"comment\">// 表示应用由于错误而退出</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭主窗口退出应用\"><a href=\"#关闭主窗口退出应用\" class=\"headerlink\" title=\"关闭主窗口退出应用\"></a>关闭主窗口退出应用</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mainWindow.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 窗口关闭时执行的操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 在窗口关闭时退出应用</span></span><br><span class=\"line\">  mainWindow.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建主窗口</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 窗口大小</span></span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">900</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 窗口高度</span></span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">670</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 窗口是否可调整大小</span></span><br><span class=\"line\">  <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// false 关闭无边框窗口隐藏任务栏（放大、缩小、关闭）</span></span><br><span class=\"line\">  <span class=\"attr\">frame</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 窗口是否置顶</span></span><br><span class=\"line\">  <span class=\"attr\">autoHideMenuBar</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  ...(process.<span class=\"property\">platform</span> === <span class=\"string\">&#x27;linux&#x27;</span> ? &#123; icon &#125; : &#123;&#125;),</span><br><span class=\"line\">  <span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">preload</span>: <span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../preload/index.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">sandbox</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭窗口\"><a href=\"#关闭窗口\" class=\"headerlink\" title=\"关闭窗口\"></a>关闭窗口</h2><blockquote>\n<p>如果你只想关闭一个特定的窗口，可以使用 <code>BrowserWindow</code> 提供的 <code>close</code> </p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserWindow</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建窗口</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 窗口名.close()</span></span><br><span class=\"line\"><span class=\"comment\">// 关闭窗口</span></span><br><span class=\"line\">mainWindow.<span class=\"title function_\">close</span>()</span><br></pre></td></tr></table></figure>\n\n<p><strong>监听窗口关闭事件</strong></p>\n<blockquote>\n<p>你可以在窗口关闭时执行某项操作，比如保存窗口状态、发送通知等</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, <span class=\"title class_\">BrowserWindow</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">mainWindow.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 窗口关闭时执行的操作</span></span><br><span class=\"line\">  app.<span class=\"title function_\">quit</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小化窗口\"><a href=\"#最小化窗口\" class=\"headerlink\" title=\"最小化窗口\"></a>最小化窗口</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染进程</span></span><br><span class=\"line\">electron.<span class=\"property\">ipcRenderer</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;minimize&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcMain &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;minimize&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  mainWindow.<span class=\"title function_\">minimize</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><h2 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h2><ul>\n<li>最小化窗口：<code>mainWindow.minimize()</code></li>\n<li>最大化窗口：<code>mainWindow.maximize()</code></li>\n<li>还原窗口：<code>mainWindow.unmaximize()</code></li>\n<li>全屏窗口：<code>mainWindow.setFullScreen(true)</code></li>\n<li>退出全屏：<code>mainWindow.setFullScreen(false)</code></li>\n<li>关闭窗口：<code>mainWindow.close()</code></li>\n<li>隐藏窗口：<code>mainWindow.hide()</code></li>\n<li>显示窗口：<code>mainWindow.show()</code></li>\n<li>窗口置顶：<code>mainWindow.setAlwaysOnTop(true)</code></li>\n<li>取消窗口置顶：<code>mainWindow.setAlwaysOnTop(false)</code></li>\n<li>窗口透明度：<code>mainWindow.setOpacity(0.5)</code></li>\n<li>窗口尺寸：<code>mainWindow.setSize(800, 600)</code></li>\n<li>窗口位置：<code>mainWindow.setPosition(100, 100)</code></li>\n<li>窗口标题：<code>mainWindow.setTitle(&#39;标题&#39;)</code></li>\n<li>窗口背景色：<code>mainWindow.setBackgroundColor(&#39;#333&#39;)</code></li>\n</ul>\n<h1 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h1><h2 id=\"系统托盘\"><a href=\"#系统托盘\" class=\"headerlink\" title=\"系统托盘\"></a>系统托盘</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主进程</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, <span class=\"title class_\">Tray</span>, <span class=\"title class_\">Menu</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否退出应用，初始化为false，退出时设置为true</span></span><br><span class=\"line\">app.<span class=\"property\">isQuiting</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻止应用退出 如果主窗口关闭应用会直接退出</span></span><br><span class=\"line\">mainWindow.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!app.<span class=\"property\">isQuiting</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 阻止窗口关闭默认事件</span></span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">    mainWindow.<span class=\"title function_\">hide</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 创建托盘图标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> iconPath = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../../resources/icon.png?asset&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 实例化托盘图标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> trayIcon = nativeImage.<span class=\"title function_\">createFromPath</span>(icon)</span><br><span class=\"line\"><span class=\"keyword\">let</span> tray = <span class=\"keyword\">new</span> <span class=\"title class_\">Tray</span>(trayIcon)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建菜单模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> contextMenu = <span class=\"title class_\">Menu</span>.<span class=\"title function_\">buildFromTemplate</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;显示应用&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 显示主窗口</span></span><br><span class=\"line\">      mainWindow.<span class=\"title function_\">show</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 菜单分割线</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;separator&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;退出&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      app.<span class=\"title function_\">quit</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置托盘菜单</span></span><br><span class=\"line\">tray.<span class=\"title function_\">setContextMenu</span>(contextMenu)</span><br><span class=\"line\"><span class=\"comment\">// 设置托盘图标提示信息，鼠标悬停显示</span></span><br><span class=\"line\">tray.<span class=\"title function_\">setToolTip</span>(<span class=\"string\">&#x27;这是我的Electron应用&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 托盘图标点击事件</span></span><br><span class=\"line\">tray.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mainWindow.<span class=\"title function_\">isVisible</span>()) &#123;</span><br><span class=\"line\">    mainWindow.<span class=\"title function_\">hide</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    mainWindow.<span class=\"title function_\">show</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听应用退出事件</span></span><br><span class=\"line\">app.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;before-quit&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  app.<span class=\"property\">isQuiting</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tray) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁托盘图标</span></span><br><span class=\"line\">    tray.<span class=\"title function_\">destroy</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240830164539.png\"></p>\n<h2 id=\"自定义菜单栏\"><a href=\"#自定义菜单栏\" class=\"headerlink\" title=\"自定义菜单栏\"></a>自定义菜单栏</h2><p><strong>设置应用菜单</strong></p>\n<blockquote>\n<p>如果无边框窗口需要设置自定义菜单栏，需要封装组件通过进程通信来实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, <span class=\"title class_\">Menu</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建菜单模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> contextMenu = <span class=\"title class_\">Menu</span>.<span class=\"title function_\">buildFromTemplate</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;显示应用&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 显示主窗口</span></span><br><span class=\"line\">      mainWindow.<span class=\"title function_\">show</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;退出&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      app.<span class=\"title function_\">quit</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置应用菜单</span></span><br><span class=\"line\"><span class=\"title class_\">Menu</span>.<span class=\"title function_\">setApplicationMenu</span>(menu)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"右键菜单\"><a href=\"#右键菜单\" class=\"headerlink\" title=\"右键菜单\"></a>右键菜单</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Menu</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;electron&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建菜单模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> contextMenu = <span class=\"title class_\">Menu</span>.<span class=\"title function_\">buildFromTemplate</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;f12&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 显示主窗口</span></span><br><span class=\"line\">      mainWindow.<span class=\"property\">webContents</span>.<span class=\"title function_\">openDevTools</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"comment\">// 监听右键点击事件</span></span><br><span class=\"line\">mainWindow.<span class=\"property\">webContents</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;context-menu&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  contextMenu.<span class=\"title function_\">popup</span>(&#123; <span class=\"attr\">window</span>: mainWindow &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","categories":["Electron"],"tags":["electron"]},{"title":"MySQL的安装和使用","url":"/2024/07/24/MySql/MySql%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"数据库的基本概念\"><a href=\"#数据库的基本概念\" class=\"headerlink\" title=\"数据库的基本概念\"></a>数据库的基本概念</h1><h2 id=\"什么是数据库\"><a href=\"#什么是数据库\" class=\"headerlink\" title=\"什么是数据库\"></a>什么是数据库</h2><p>数据库 （database）是用来阻止、存储和管理数据的仓库</p>\n<p>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据</p>\n<h2 id=\"常见数据库及分类\"><a href=\"#常见数据库及分类\" class=\"headerlink\" title=\"常见数据库及分类\"></a>常见数据库及分类</h2><p>市面上的数据库有很多种，最常见的数据库有如下几个：</p>\n<ul>\n<li>MYSQL 数据库（目前使用最广泛、流行度最高的开源免费数据库； Community(社区版免费) + Enterprise(企业收费版)）</li>\n<li>Oracle 数据库（收费）</li>\n<li>SQL Server 数据库 （收费）</li>\n<li>Mongodb 数据库（Community + Enterprise）也分两个版本</li>\n</ul>\n<p>其中，MySQL、Oracle、SQL Server 属于传统型数据库（又叫做：关系型数据库 或 SQL 数据库），这三者的设计理念相同，用法比较类似</p>\n<p>而 Mongodb 属于新型数据库（又叫做：非关系型数据库 或 NoSQL 数据库），它在一定程度上弥补了传统型数据库的缺陷</p>\n<h2 id=\"传统型数据库的数据组织结构\"><a href=\"#传统型数据库的数据组织结构\" class=\"headerlink\" title=\"传统型数据库的数据组织结构\"></a>传统型数据库的数据组织结构</h2><h3 id=\"Excel-的数据组织结构\"><a href=\"#Excel-的数据组织结构\" class=\"headerlink\" title=\"Excel 的数据组织结构\"></a>Excel 的数据组织结构</h3><p>每个 Excel中，数据的组织结构分别为工作薄、工作表、数据行、列这 4 大部分组成</p>\n<p>这 4 大部分都是 互相包含的 工作簿包含工作表，工作表包含数据行，数据行又包含列</p>\n<ul>\n<li>整个 Excel 叫做工作簿</li>\n<li>users 和 books 是工作表</li>\n<li>users 工作表中有 3 行数据</li>\n<li>每行数据由 6 列信息组成</li>\n<li>每列信息都有对应的数据类型</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681643502908.png\"></p>\n<blockquote>\n<p>在传统型数据库中，数据的组织结构分为数据库(database)、数据表(table)、数据行(row)、 字段(field)这 4 大部分组成</p>\n</blockquote>\n<p><strong>一个数据库里面可以包含多张表，每张表里面由数据行组成的，每一行是由字段来组成的（也就是列）</strong></p>\n<ul>\n<li>数据库类似于 Excel 的工作簿</li>\n<li>数据表类似于 Excel 的工作表</li>\n<li>数据行类似于 Excel 的每一行数据</li>\n<li>字段类似于 Excel 的列</li>\n<li>每个字段都有对应的数据类型</li>\n</ul>\n<h3 id=\"库、表、行、字段的关系\"><a href=\"#库、表、行、字段的关系\" class=\"headerlink\" title=\"库、表、行、字段的关系\"></a>库、表、行、字段的关系</h3><ol>\n<li>在实际项目开发中，一般情况下，每个项目都对应独立的数据库</li>\n<li>不同的数据，要存储到数据库的不同表中，例如：用户数据存储到 users 表中，图书数据存储到 books 表中</li>\n<li>每个表中具体存储那些信息，由字段来决定，例如：我们可以为 users 表设计 id、username、password 这 3 个字段</li>\n<li>表中的行，代表每一条具体的数据</li>\n</ol>\n<h1 id=\"安装并配置-MySQL\"><a href=\"#安装并配置-MySQL\" class=\"headerlink\" title=\"安装并配置 MySQL\"></a>安装并配置 MySQL</h1><h2 id=\"MySQL相关的软件\"><a href=\"#MySQL相关的软件\" class=\"headerlink\" title=\"MySQL相关的软件\"></a>MySQL相关的软件</h2><p>对于开发人员来说，只需要安装 M有SQL Server 和 MySQL Workbench 这两个软件，就能满足开发的需要了</p>\n<ul>\n<li>MySQL Server：专门用来提供数据存储和服务的软件</li>\n<li>MySQL Workbench：可视化的 MySQL 管理，通过它，可以方便的操作存储在 MySQL Server 中的数据</li>\n</ul>\n<h2 id=\"Windows安装MySQL\"><a href=\"#Windows安装MySQL\" class=\"headerlink\" title=\"Windows安装MySQL\"></a>Windows安装MySQL</h2><p>在 Windows 环境下安装 MySQL，只需要运行 <code>mysql-installer-community-8.0.19.0.msi</code> 这个安装包，就能一次性将 MySQL Server 和</p>\n<p>MySQL Workbench 安装到自己的电脑上</p>\n<p><code>下载： </code><a href=\"https://dev.mysql.com/downloads/mysql/\">MySQL</a></p>\n<ol>\n<li>双击 <code>mysql-installer-community-8.0.19.0.msi</code>，启动 MySQL 安装程序</li>\n<li>如果弹框提示如下的警告信息，证明你的电脑需要安装额外的 <code>.NET Framework</code> 依赖包。此时，先退出 MySQL 的安装程序，然后双击 <code>NDP452-KB2901907-X86-X64-AllOS-ENU.exe</code>，启动 <code>.NET Framework</code></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681650483775.png\"></p>\n<ol start=\"3\">\n<li>双击<code>mysql</code>安装包，稍等一会儿之后，出现如下安装界面</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651332215.png\"></p>\n<p>可以看到有5中安装类型，分别是：</p>\n<ul>\n<li><code>Developer Default</code>：默认安装类型</li>\n<li><code>Server only</code>：仅作为服务器</li>\n<li><code>Client only</code>：仅作为客户端</li>\n<li><code>Full</code>：完全安装</li>\n<li><code>Custom</code>：自定义安装</li>\n</ul>\n<p>在这里我们选择<code>Custom</code>，也就是自定义安装，然后点击<code>Next</code></p>\n<p>出现以下界面</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651409102.png\"></p>\n<p>我们进行选择性的安装</p>\n<p>我们选装<code>MySQL Server 8.0.29-X64</code>、<code>MYSQL Documentation 8.0.29-X86</code>和<code>Samples and Examples 8.0.29-X86</code>即可</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651655935.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651681002.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651726494.png\"></p>\n<p>继续下一步</p>\n<p>四、配置mysql</p>\n<p>出现服务器类型配置窗口，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651777047.png\"></p>\n<p>当我们点击<code>Config Type</code>的时候，可以看到出现几个选项</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651831267.png\"></p>\n<p>上面几个含义分别是：</p>\n<ol>\n<li><code>Development Machine</code>（开发机器）：该选项代表典型个人用桌面工作站。假定机器上运行着多个桌面应用程序，将<code>MySQL</code>服务器配置成使用最少的系统资源</li>\n<li><code>Server Machine</code>（服务器）：该选项代表服务器，<code>MySQL</code>服务器可以同其他应用程序一起运行，例如<code>FTP</code>、<code>Email</code>和<code>Web</code>服务器。<code>MySQL</code>服务器配置成使用适当比例的系统资源</li>\n<li><code>Dedicated Machine</code>（专用服务器）：该选项代表只运行<code>MySQL</code>服务的服务器。假定没有运行其他服务程序，<code>MySQL</code>服务器配置成使用所有可用系统资源</li>\n</ol>\n<p>在这里我们使用<code>Development Machine</code>（开发机器），方便使用，别的默认配置都不动，直接点击<code>Next</code></p>\n<p>出现如图的<strong>权限设置方式</strong>窗口，第一个单选项的含义是<code>MySQL 8.0</code>提供的新的授权方式，采用<code>SHA256</code>基础的密码加密方法；第二个单选项的含义是传统授权方法（保留<code>5.x</code>版本兼容性）。这里选择第二个单选项</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681651978817.png\"></p>\n<p>点击<code>Next</code>之后，我们就在新弹出的界面中，配置<code>mysql</code>数据库的<code>root</code>用户名登录信息了，这里我设置的是<code>Yunweijia0909</code>，我们需要输入两遍哈；</p>\n<p>当然，我们也可以在这个界面中新添加其他用户，这个根据实际情况来配置即可</p>\n<p>MySQL Root Password： Lp17762682464</p>\n<p>Repeat Password: Lp17762682464</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652595438.png\"></p>\n<p>配置完毕之后，我们继续点击<code>Next</code>按钮</p>\n<p>然后就可以配置数据库名字了，这里我们配置成<code>MySQL</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652072724.png\"></p>\n<p>点击<code>Next</code>，然后再点击<code>Execute</code>，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652474507.png\"></p>\n<p>系统自动配置<code>MySQL</code>服务器。配置完成后，单击<code>Finish</code>（完成）按钮，弹出新对话框</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652642226.png\"></p>\n<p>接下来界面中点击<code>Next</code>之后，出现如下界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652738269.png\"></p>\n<p>在这里我们输入之前配置的用户信息，即<code>Yunweijia0909</code>，然后点击<code>Check</code>按钮，就会发现他右上角的<code>Status</code>变成了<code>Connection succeeded</code>，表示连接成功了。确定无误之后，点击<code>Next</code></p>\n<p>新界面中点击<code>Execute</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652792513.png\"></p>\n<p>运行完毕之后会出现<code>Finish</code>按钮，点击即可</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652837260.png\"></p>\n<p>然后在新界面中点击右下角的<code>Next</code>，出现：</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681653587076.png\"></p>\n<p>我们的<code>Mysql</code>就安装完成了</p>\n<p>五、验证</p>\n<p>1、任务管理器</p>\n<p>打开任务管理器也会发现有一个<code>mysql.exe</code>的进程，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681652967908.png\"></p>\n<h3 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h3><p><code> mysql -uroot -p</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681654469850.png\"></p>\n<h2 id=\"MySQL-workbench-安装\"><a href=\"#MySQL-workbench-安装\" class=\"headerlink\" title=\"MySQL-workbench 安装\"></a>MySQL-workbench 安装</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26657483\">MySQL-workbench安装</a></p>\n<h1 id=\"MySQL-的基本使用\"><a href=\"#MySQL-的基本使用\" class=\"headerlink\" title=\"MySQL 的基本使用\"></a>MySQL 的基本使用</h1><h2 id=\"使用-MySQL-Workbench\"><a href=\"#使用-MySQL-Workbench\" class=\"headerlink\" title=\"使用 MySQL Workbench\"></a>使用 MySQL Workbench</h2><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681659116359.png\"></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1681659477565.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240902154859.png\"></p>\n<p>DataType 数据类型：</p>\n<ol>\n<li>int 整数</li>\n<li>varchar(len) 字符串</li>\n<li>tinyint (1) 布尔值</li>\n</ol>\n<p>字段的特殊标识：</p>\n<ul>\n<li>PK（Primary Key） 主键、唯一标识</li>\n</ul>\n<h2 id=\"使用-SQL-管理数据库\"><a href=\"#使用-SQL-管理数据库\" class=\"headerlink\" title=\"使用 SQL 管理数据库\"></a>使用 SQL 管理数据库</h2><h4 id=\"什么是-SQL\"><a href=\"#什么是-SQL\" class=\"headerlink\" title=\"什么是 SQL\"></a>什么是 SQL</h4><p>SQL (英文全称：Structured Query Language) 是<code>结构化查询语言</code>，专门用来<code>访问和处理数据库</code>的编程语言。能够让我们&#96;以编程的形式，操作数据库里面的数据</p>\n<p>三个关键点：</p>\n<ol>\n<li>SQL 是一门<code>数据库编程语言</code></li>\n<li>使用 SQL 语言编写出来的代码，叫做 SQL 语句</li>\n<li>SQL 语言&#96;只能在关系型数据库中使用（例如：MySQL、Oracle、SQL Server）。非关系型数据库（例如：Mongodb）不支持 SQL 语言</li>\n</ol>\n<h4 id=\"SQL-能做什么\"><a href=\"#SQL-能做什么\" class=\"headerlink\" title=\"SQL 能做什么\"></a>SQL 能做什么</h4><ol>\n<li>从数据库中<code>查询数据</code></li>\n<li>向数据库中<code>插入新的数据</code></li>\n<li><code>更新</code>数据库中的数据</li>\n<li>从数据库<code>删除数据</code></li>\n<li>可以创建新的数据库</li>\n<li>可以在数据库中创建新的表</li>\n<li>可以在数据库中创建存储过程、视图</li>\n<li>etc…</li>\n</ol>\n<h3 id=\"SQL-的学习目标\"><a href=\"#SQL-的学习目标\" class=\"headerlink\" title=\"SQL 的学习目标\"></a>SQL 的学习目标</h3><p>重点掌握如何使用 SQL 从 数据表中：</p>\n<p><code>查询数据</code>（select）、<code>插入数据</code>（insert into）、<code>更新数据</code>（update）、<code>删除数据</code>（delete）</p>\n<p>额外需要掌握的 4种 SQL 语法：</p>\n<p><code>where条件</code>、<code>and 和 or 运算符</code>、<code>order by 排序</code>、<code>count(*) 函数</code></p>\n<h3 id=\"SQL-语法\"><a href=\"#SQL-语法\" class=\"headerlink\" title=\"SQL 语法\"></a>SQL 语法</h3><h4 id=\"查询数据：\"><a href=\"#查询数据：\" class=\"headerlink\" title=\"查询数据：\"></a>查询数据：</h4><p>使用SELECT语句可以从数据表中查询数据，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM 表名</span><br><span class=\"line\">SELECT column1, column2, ... FROM table_name</span><br></pre></td></tr></table></figure>\n<p>其中星号表示返回该表格所有列的信息，也可以选择需要的列进行查询</p>\n<p>其中，<code>column1</code>, <code>column2</code>, …为需要查询的列名称，用逗号分隔。<code>table_name</code> 为需要查询的表名。如果要查询所有列，则可以使用 * 通配符代替列名：</p>\n<h4 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h4><p>使用<code>INSERT INTO</code>语句可以向数据表中<code>插入一条或多条新数据</code>，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 (列1, 列2, ...) VALUES (值1, 值2, ...)</span><br></pre></td></tr></table></figure>\n<p>其中，列1, 列2, … 是需要插入的列的名称，VALUES后面则是对应的该行数据</p>\n<h4 id=\"更新数据：\"><a href=\"#更新数据：\" class=\"headerlink\" title=\"更新数据：\"></a>更新数据：</h4><p>使用<code>UPDATE</code>语句可以<code>更新数据</code>表中已经存在的一行或多行数据，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 列1=值1, 列2=值2, ... WHERE 条件</span><br></pre></td></tr></table></figure>\n<p>其中，SET子句指定需要修改的列及其对应的新值，WHERE子句用于限定需要更新的行数</p>\n<h4 id=\"删除数据：\"><a href=\"#删除数据：\" class=\"headerlink\" title=\"删除数据：\"></a>删除数据：</h4><p>使用<code>DELETE</code>语句可以在数据表中<code>删除一行或多行数据</code>，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 WHERE 条件</span><br></pre></td></tr></table></figure>\n<p>其中，FROM关键字指定了需要操作的表格名称，WHERE子句用于限定需要删除的行数</p>\n<h4 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h4><p>WHERE 子句用于<code>限定选择的标准</code>。在 <code>SELECT</code>、<code>UPDATE</code>、<code>DELETE</code> 语句中，<code>皆可使用 </code>WHERE 子句来限定选择的标准</p>\n<p>可在 WHERE 子句中使用的<code>运算符</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x3D;</td>\n<td align=\"center\">等于</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&gt;</td>\n<td align=\"center\">不等于</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">大于</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">小于</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&#x3D;</td>\n<td align=\"center\">大于等于</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&#x3D;</td>\n<td align=\"center\">小于等于</td>\n</tr>\n<tr>\n<td align=\"center\">BETWEEN</td>\n<td align=\"center\">在某个范围内</td>\n</tr>\n<tr>\n<td align=\"center\">LIKE</td>\n<td align=\"center\">搜索某种模式</td>\n</tr>\n</tbody></table>\n<p><code>注意：在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !=</code></p>\n<p>除此之外，WHERE 子句还支持一些特殊的语法结构，如 IN、LIKE、BETWEEN 等，这些语法结构可以让我们更方便地检索数据。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql复制代码SELECT * FROM products WHERE category IN (&#x27;book&#x27;, &#x27;movie&#x27;, &#x27;music&#x27;)</span><br><span class=\"line\">SELECT * FROM employees WHERE last_name LIKE &#x27;Sm%&#x27;</span><br><span class=\"line\">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2022-01-01&#x27; AND &#x27;2022-12-31&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>以上三条语句分别使用了 IN、LIKE 和 BETWEEN 语法结构进行查询。IN 表示值必须在一个指定的值列表中；LIKE 可以用于模糊匹配查找，% 通配符可以代表任意字符；BETWEEN 表示值必须在一个指定范围内</p>\n<h4 id=\"and-和-or\"><a href=\"#and-和-or\" class=\"headerlink\" title=\"and 和 or\"></a>and 和 or</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM employees WHERE gender = &#x27;F&#x27; AND salary &gt; 5000</span><br></pre></td></tr></table></figure>\n\n<p>以上语句要求从 employees 表中返回性别为女且工资大于 5000 的员工记录。注意：字符串常量必须用单引号 <code>&#39;</code> 括起来</p>\n<p>SQL中的and和or用于连接多个筛选条件，常常与where条件语句一起使用。当使用and运算符时，只有当两个条件都满足时才能通过筛选；而如果使用or运算符，则只要有一个条件满足即可通过筛选。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM student WHERE age &gt;= 18 AND score &gt;= 80</span><br><span class=\"line\">SELECT * FROM student WHERE age &gt;= 18 OR score &gt;= 80</span><br></pre></td></tr></table></figure>\n\n<p>以上两条语句分别查询学生中年龄大于等于18岁且成绩大于等于80分的和学生中年龄大于等于18岁或成绩大于等于80分的</p>\n<h4 id=\"order-by-排序\"><a href=\"#order-by-排序\" class=\"headerlink\" title=\"order by 排序\"></a>order by 排序</h4><p>ORDER BY 是用于按照指定条件对结果集进行排序的关键字。该语句可以根据数字、字符串以及日期类型进行排序，还可以指定升序（ASC）或降序（DESC）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM student ORDER BY score DESC</span><br></pre></td></tr></table></figure>\n\n<p>以上语句返回student表中所有学生的数据，并按照成绩从高到低的顺序进行排序</p>\n<p>ORDER BY 子句可以指定多个列来进行排序，实现多重排序的功能。多重排序可按优先级将数据行排序。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> department_id, salary <span class=\"keyword\">DESC</span></span><br></pre></td></tr></table></figure>\n\n<p>以上语句要求从 employees 表中返回所有员工记录，并首先按照 department_id 字段升序排列，如果 department_id 值相同，则再按照 salary 字段降序排列</p>\n<p>在多重排序的情况下，ORDER BY 子句的第一个字段优先级最高，如果它们的值相同，则根据第二个键进行排序，而以此类推，直到排序完为止</p>\n<p>那么，如何在 ORDER BY 子句中指定不同的排序规则呢？在 SQL 中，可以使用 ASC 或 DESC 关键字来指定列的排序方式。如果未指定排序方式，默认是按升序（ASC）进行排序。因此，我们通过在列名之后添加 ASC 或 DESC 控制排序方向。在前面的例子中，我们默认了第一个字段 department_id 使用升序排序，而第二个字段 salary 则使用降序排序</p>\n<h4 id=\"count-函数\"><a href=\"#count-函数\" class=\"headerlink\" title=\"count(*) 函数\"></a>count(*) 函数</h4><p>COUNT(*)是一个聚合函数，用于计算行的总数。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) FROM student</span><br></pre></td></tr></table></figure>\n\n<p>以上语句返回student表中数据行的总数。如果只想计算某一列的非空值的行数，则可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(column_name) FROM table_name WHERE condition</span><br><span class=\"line\">-- 例如：这里查询表中 所有 status 为 0 的总行数</span><br><span class=\"line\">SELECT COUNT(column_name) FROM table_name WHERE status=0</span><br></pre></td></tr></table></figure>\n\n<p>其中，column_name为需要计算行数的列名，condition为筛选条件</p>\n<p>在 SQL 中，可以使用 <code>AS</code> 语句来为查询结果中的列进行重命名。如果你使用了 <code>COUNT(*)</code> 函数来统计表格中所有行数，而想要将统计结果进行重命名，可以按如下的方式写出 SQL 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> row_count <span class=\"keyword\">FROM</span> table_name</span><br></pre></td></tr></table></figure>\n\n<p>以上示例将统计 table_name 表格中所有行的数量，并将其重命名为 row_count 列。当查询结果被返回时，它会含有新命名的列名 row_count。我们还可以使用类似的方式对于其他类型的查询语句中的列进行重命名。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(salary) <span class=\"keyword\">AS</span> total_salary <span class=\"keyword\">FROM</span> employee_details <span class=\"keyword\">WHERE</span> department <span class=\"operator\">=</span> <span class=\"string\">&#x27;Marketing&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上语句将仅返回部门为 Marketing 的 employee_details 表格中工资的总和，并且将其重命名为 total_salary 列。注意，在这个例子中，我们并没有使用 <code>*</code> 通配符来查询所有列，因此只会返回一列</p>\n<p>总之，借助 <code>AS</code> 语句，您可以轻松地自定义查询结果集中的列名称，以便更方便地分析和使用</p>\n<h1 id=\"在项目中操作数据库的步骤\"><a href=\"#在项目中操作数据库的步骤\" class=\"headerlink\" title=\"在项目中操作数据库的步骤\"></a>在项目中操作数据库的步骤</h1><h2 id=\"项目中引入-mysql\"><a href=\"#项目中引入-mysql\" class=\"headerlink\" title=\"项目中引入 mysql\"></a>项目中引入 mysql</h2><ul>\n<li>安装操作 MySql 数据库的第三方 （mysql）</li>\n<li>通过 mysql 模块<code>连接到 MySql数据库</code></li>\n<li>通过 mysql 模块<code>执行 SQL 语句</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1682132968543.png\"></p>\n<p>在前端的 node.js express 项目中使用 MySQL 数据库，需要通过一些中间件和驱动程序来实现。下面是引入 MySQL 的基本步骤：</p>\n<h3 id=\"安装-mysql2-包\"><a href=\"#安装-mysql2-包\" class=\"headerlink\" title=\"安装 mysql2 包\"></a>安装 mysql2 包</h3><p>前往终端命令行窗口，进入项目目录，并输入以下命令安装 mysql2 包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install mysql2 --save</span><br></pre></td></tr></table></figure>\n\n<p>这将在您的项目中添加 mysql2 获取包及其依赖项</p>\n<h3 id=\"创建-MySQL-连接池\"><a href=\"#创建-MySQL-连接池\" class=\"headerlink\" title=\"创建 MySQL 连接池\"></a>创建 MySQL 连接池</h3><p>连接池用于维护一个到数据库的长期连接，提高性能和效率。下面的示例展示了如何创建连接池：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 导入 mysql 模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql2&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2. 建立于 MySQL 数据库的连接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.<span class=\"title function_\">createPool</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,\t\t\t\t\t<span class=\"comment\">// 数据库的 IP 地址</span></span><br><span class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">&#x27;your_mysql_username&#x27;</span>,\t\t<span class=\"comment\">// 登录数据库的账号</span></span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;your_mysql_password&#x27;</span>,\t<span class=\"comment\">// 登录数据库的密码</span></span><br><span class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">&#x27;your_mysql_name&#x27;</span>,<span class=\"comment\">// 指定要操作哪个数据库</span></span><br><span class=\"line\">    <span class=\"attr\">connectionLimit</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码定义了要连接数据库的配置信息，其中包括主机地址、用户名、密码、数据库名称和连接池的最大连接数</p>\n<h3 id=\"执行-SQL-查询语句\"><a href=\"#执行-SQL-查询语句\" class=\"headerlink\" title=\"执行 SQL 查询语句\"></a>执行 SQL 查询语句</h3><p>现在已经建立了与 MySQL 数据源的连接，并指定了以后在进行查询时要使用的连接池，让我们看一下如何执行 SELECT 查询操作，并将结果返回给客户端：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sql = <span class=\"string\">&#x27;SELECT * FROM users&#x27;</span></span><br><span class=\"line\">pool.<span class=\"title function_\">query</span>(sql, <span class=\"function\">(<span class=\"params\">err, results, fields</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* results: [</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 1, name: &#x27;张三&#x27;, password: &#x27;111&#x27;, status: &#x27;1&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 2, name: &#x27;李四&#x27;, password: &#x27;222&#x27;, status: &#x27;1&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 3, name: &#x27;王五&#x27;, password: &#x27;333&#x27;, status: &#x27;0&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 4, name: &#x27;陈六&#x27;, password: &#x27;444&#x27;, status: &#x27;0&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">] */</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码将执行一个 SELECT 查询，从名为 <code>users</code> 的数据表中返回所有行，然后将结果打印出来。注意，这个示例假定你的数据库已经包含一个 <code>users</code> 表</p>\n<p>在 Express 开发中，通常要更复杂地使用 MySQL 数据库，例如实现 CRUD 操作。因此，您可能需要添加一些额外的代码和模块以便于与数据库进行交互</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1682135321737.png\"></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 导入数据库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2. 配置数据库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.<span class=\"title function_\">createPool</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,              <span class=\"comment\">// 数据库的 IP 地址</span></span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,          <span class=\"comment\">// 登录数据库的账号</span></span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;Lp17762682464&#x27;</span>,      <span class=\"comment\">// 登录数据库的密码</span></span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;admin123&#x27;</span>,           <span class=\"comment\">// 指定要操作哪个数据库</span></span><br><span class=\"line\">  <span class=\"attr\">connectionLimit</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sql = <span class=\"string\">&#x27;select * from admin123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测 MySQL 是否能够正常工作</span></span><br><span class=\"line\">pool.<span class=\"title function_\">query</span>(<span class=\"string\">&#x27;SELECT 1&#x27;</span>,<span class=\"function\">(<span class=\"params\">err,res,fields</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用mysql操作MySQL数据库\"><a href=\"#使用mysql操作MySQL数据库\" class=\"headerlink\" title=\"使用mysql操作MySQL数据库\"></a>使用mysql操作MySQL数据库</h2><h3 id=\"查询数据库\"><a href=\"#查询数据库\" class=\"headerlink\" title=\"查询数据库\"></a>查询数据库</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 导入数据库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2. 配置数据库</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.<span class=\"title function_\">createPool</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,              <span class=\"comment\">// 数据库的 IP 地址</span></span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,          <span class=\"comment\">// 登录数据库的账号</span></span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;Lp17762682464&#x27;</span>,      <span class=\"comment\">// 登录数据库的密码</span></span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;admin123&#x27;</span>,           <span class=\"comment\">// 指定要操作哪个数据库</span></span><br><span class=\"line\">  <span class=\"attr\">connectionLimit</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sql = <span class=\"string\">&#x27;select * from users&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测 MySQL 是否能够正常工作</span></span><br><span class=\"line\">pool.<span class=\"title function_\">query</span>(sql,<span class=\"function\">(<span class=\"params\">err,res,fields</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* results: [</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 1, name: &#x27;张三&#x27;, password: &#x27;111&#x27;, status: &#x27;1&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 2, name: &#x27;李四&#x27;, password: &#x27;222&#x27;, status: &#x27;1&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 3, name: &#x27;王五&#x27;, password: &#x27;333&#x27;, status: &#x27;0&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  RowDataPacket &#123; id: 4, name: &#x27;陈六&#x27;, password: &#x27;444&#x27;, status: &#x27;0&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">] */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>向 users 表中新增数据，其中</p>\n<p>通过 node.js 中的 mysql2 或 mysql 模块，您可以从应用程序扩展到 MySQL 数据库。下面是如何使用 mysql2 模块插入数据到 MySQL 数据库的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql2&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.<span class=\"title function_\">createPool</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,              <span class=\"comment\">// 数据库的 IP 地址</span></span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,          <span class=\"comment\">// 登录数据库的账号</span></span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;Lp17762682464&#x27;</span>,      <span class=\"comment\">// 登录数据库的密码</span></span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;admin123&#x27;</span>,           <span class=\"comment\">// 指定要操作哪个数据库</span></span><br><span class=\"line\">  <span class=\"attr\">connectionLimit</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pool.<span class=\"title function_\">getConnection</span>(<span class=\"function\">(<span class=\"params\">err, connection</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123; <span class=\"attr\">age</span>: <span class=\"number\">25</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;john@example.com&#x27;</span> &#125;</span><br><span class=\"line\">    connection.<span class=\"title function_\">query</span>(<span class=\"string\">&#x27;INSERT INTO users SET ?&#x27;</span>, data, <span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">affectedRows</span>)</span><br><span class=\"line\">        connection.<span class=\"title function_\">release</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，我们首先通过 <code>createPool</code> 方法创建了一个连接池，并在获取到连接后使用 <code>query</code> 方法向 <code>users</code> 表格中插入了一行数据。注意，我们将待插入的数据定义为一个包含 <code>&#39;age&#39;</code> 和 <code>&#39;email&#39;</code> 两个字段的 Javascript 对象，并作为第二个参数传递给 <code>query</code> 方法。在这里，我们假设 <code>users</code> 表格有一个自增的 <code>id</code> 字段</p>\n<p>在 <code>query</code> 回调函数中，我们可以检查插入是否成功，并使用 <code>release</code> 方法将连接释放回连接池。值得注意的是，如果我们不显式释放连接，则它会一直占用资源，直到达到连接数限制</p>\n<p>在实际项目中，您可能需要执行更复杂的插入操作，例如在事务中执行多个插入操作。但是，基本的插入操作可以使用类似上述代码的方法轻松地实现</p>\n","categories":["MySql"],"tags":["mysql"]},{"title":"Electron开发问题","url":"/2024/10/30/Electron/electron%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/","content":"<h1 id=\"打包后窗口白屏\"><a href=\"#打包后窗口白屏\" class=\"headerlink\" title=\"打包后窗口白屏\"></a>打包后窗口白屏</h1><blockquote>\n<p>问题描述：使用<code>electron</code>打包后，运行程序后窗口白屏</p>\n</blockquote>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>生产环境加载窗口使用的是<code>loadFile</code>方法，而开发环境使用的是<code>loadURL</code>方法，导致路径不一致，导致白屏。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; app, <span class=\"title class_\">BrowserWindow</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>)</span><br><span class=\"line\">routers.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">EventRoute</span>(<span class=\"string\">&#x27;tool&#x27;</span>, <span class=\"string\">&#x27;event&#x27;</span>, <span class=\"function\">(<span class=\"params\">api, data = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> toolWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">      <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">      <span class=\"attr\">resizable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">autoHideMenuBar</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">nodeIntegration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">devTools</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> winURL = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">    ? <span class=\"string\">&#x27;http://localhost:5173/#/tool&#x27;</span></span><br><span class=\"line\">    : <span class=\"string\">`<span class=\"subst\">$&#123;path.join(__dirname, <span class=\"string\">&#x27;../dist/index.html#tool&#x27;</span>)&#125;</span>`</span></span><br><span class=\"line\">    toolWindow.<span class=\"title function_\">loadURL</span>(winURL)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"路由添加对应路径\"><a href=\"#路由添加对应路径\" class=\"headerlink\" title=\"路由添加对应路径\"></a>路由添加对应路径</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/tool&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tool&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@views/components/Tool.vue&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由设置hash模式\"><a href=\"#路由设置hash模式\" class=\"headerlink\" title=\"路由设置hash模式\"></a>路由设置<code>hash</code>模式</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHashHistory</span>(),</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"loadURL改为loadFile\"><a href=\"#loadURL改为loadFile\" class=\"headerlink\" title=\"loadURL改为loadFile\"></a>loadURL改为loadFile</h3><p><strong>判断是否是开发环境</strong></p>\n<ul>\n<li>process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘development’</li>\n<li>ELECTRON_RENDERER_URL 如果没有设置，在生产环境中默认undefined</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(process.<span class=\"property\">env</span>[<span class=\"string\">&#x27;ELECTRON_RENDERER_URL&#x27;</span>]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开发环境 </span></span><br><span class=\"line\">  toolWindow.<span class=\"title function_\">loadURL</span>(process.<span class=\"property\">env</span>[<span class=\"string\">&#x27;ELECTRON_RENDERER_URL&#x27;</span>]+<span class=\"string\">&#x27;/#/tool&#x27;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 生产环境</span></span><br><span class=\"line\">  toolWindow.<span class=\"title function_\">loadFile</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../renderer/index.html&#x27;</span>), &#123;<span class=\"attr\">hash</span>:<span class=\"string\">&#x27;/tool&#x27;</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何实现数据共享\"><a href=\"#如何实现数据共享\" class=\"headerlink\" title=\"如何实现数据共享\"></a>如何实现数据共享</h1><blockquote>\n<p>问题描述：使用<code>electron</code>开发桌面应用，如何实现不同窗口之间的数据共享？</p>\n</blockquote>\n<h2 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>在<code>electron</code>中不同的窗口之间默认有数据隔离，导致不同窗口之间无法共享数据。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"跨窗口通信\"><a href=\"#跨窗口通信\" class=\"headerlink\" title=\"跨窗口通信\"></a>跨窗口通信</h3><blockquote>\n<p><strong>流程：</strong><code>窗口b</code>渲染进程向<code>主进程</code>通信，<code>主进程</code>向<code>窗口a</code>渲染进程通信。</p>\n</blockquote>\n<p><strong>窗口b渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">saveConfiguration</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> config = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(form.<span class=\"property\">value</span>)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ipcRenderer.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;renderer-to-main&#x27;</span>, &#123; config, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;saveConfig&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;发送 IPC 消息失败:&#x27;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;配置保存成功&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>主进程监听窗口b渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;renderer-to-main&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, &#123; name, data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> config = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data.<span class=\"property\">config</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 向窗口a渲染进程发送数据</span></span><br><span class=\"line\">  mainWindow.<span class=\"property\">webContents</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;main-to-renderer&#x27;</span>, &#123; config &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>窗口a监听主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\">ipcRenderer.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;main-to-renderer&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, &#123; config &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存储pinia数据</span></span><br><span class=\"line\">  store.<span class=\"title function_\">saveConfig</span>(data.<span class=\"property\">config</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//pinia</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia, defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pinia = <span class=\"title function_\">createPinia</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;main&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">config</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;config&#x27;</span>) || <span class=\"string\">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">saveConfig</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span> = config</span><br><span class=\"line\">      <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;config&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(config))</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> pinia</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Electron-Store\"><a href=\"#Electron-Store\" class=\"headerlink\" title=\"Electron Store\"></a>Electron Store</h3><blockquote>\n<p><strong>描述：</strong>可以使用 Electron Store 或 SQLite 等持久化数据库来共享数据。主进程负责对存储的数据进行写入和读取，各个窗口通过 IPC 请求主进程获取或更新数据。这种方法的优点是数据可以持久化，窗口关闭后不会丢失。</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<ul>\n<li>Electron Store 仅支持 Node.js 环境，不能在渲染进程中使用。</li>\n<li>需要 Electron 30 或更高版本。</li>\n</ul>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save electron-store</span><br></pre></td></tr></table></figure>\n\n<p><strong>主进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程中使用 electron-store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Store</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron-store&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Store</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;save-data&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  store.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;sharedData&#x27;</span>, data) <span class=\"comment\">// 保存数据到 Electron Store</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">handle</span>(<span class=\"string\">&#x27;get-data&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;sharedData&#x27;</span>) <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>窗口渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染进程</span></span><br><span class=\"line\">ipcRenderer.<span class=\"title function_\">invoke</span>(<span class=\"string\">&#x27;get-data&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data) <span class=\"comment\">// 获取到的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">ipcRenderer.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;save-data&#x27;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;) <span class=\"comment\">// 发送数据到主进程</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用数据隔离\"><a href=\"#禁用数据隔离\" class=\"headerlink\" title=\"禁用数据隔离\"></a>禁用数据隔离</h3><blockquote>\n<p>创建窗口时，lectron 提供了 webPreferences 中的 partition 和 session 选项来控制浏览器会话和数据隔离。如果你不进行特别的配置，默认情况下，所有窗口都会共享同一个 session<br><strong>例如：</strong></p>\n</blockquote>\n<ul>\n<li>Cookies</li>\n<li>IndexedDB索引数据库</li>\n<li>localStorage 本地存储</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">BrowserWindow</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建主窗口 A</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">partition</span>: <span class=\"string\">&#x27;persist:shared&#x27;</span>, <span class=\"comment\">// 使用同一持久化 session 名称</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建另一个窗口 B，与窗口 A 共享相同的 session</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> anotherWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">partition</span>: <span class=\"string\">&#x27;persist:shared&#x27;</span>, <span class=\"comment\">// 与窗口 A 使用相同的 partition 名称</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>渲染进程</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 窗口a保存数据到 localStorage</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">saveData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputData = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inputData&#x27;</span>).<span class=\"property\">value</span></span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;sharedData&#x27;</span>, inputData)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Data saved:&#x27;</span>, inputData)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 localStorage 中的数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> storedData = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;sharedData&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Stored Data:&#x27;</span>, storedData)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 窗口b监听 storage 事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;storage&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">key</span> === <span class=\"string\">&#x27;sharedData&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Shared data updated:&#x27;</span>, event.<span class=\"property\">newValue</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 可选：更新页面显示的数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>partition</code> 设置为 <code>&#39;persist:shared&#39;</code>，确保 窗口 A 和 B 使用相同的会话存储。任何在 <code>localStorage</code> 或 <code>Cookies</code> 中的数据都将在这两个窗口之间共享。<code>persist:shared</code> 是持久会话，因此即使窗口关闭，数据也会被保留。</p>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><p><strong>进程隔离</strong>：即使共享了 <code>localStorage</code> 和 <code>session</code>，不同窗口的 渲染进程还是相互隔离的，因此 JavaScript 变量或 Vuex&#x2F;Pinia 的状态等不会共享。</p>\n</li>\n<li><p><strong>同步问题</strong>：即便是共享的 <code>localStorage</code>，其变更不会自动在多个窗口之间同步。如果一个窗口更新了 <code>localStorage</code> 数据，其他窗口不会自动得到通知。要实现数据的实时同步，仍然需要借助 IPC 通信 或 <code>storage</code> 事件监听。</p>\n</li>\n<li><p><strong>持久化会话名称</strong>：当 partition 前缀为 <code>persist:</code> 时，会话数据会持久化存储（即使应用关闭也会保留）。如果没有 <code>persist:</code>，则是临时的，窗口关闭后数据将清空。</p>\n</li>\n</ul>\n<p><strong>示例：实现共享和实时更新</strong><br>通过 <code>partition</code> 配置共享 <code>localStorage</code> 后，还可以监听 <code>storage</code> 事件来确保实时同步。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在窗口 A 和 B 中的渲染进程</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;storage&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Storage changed:&#x27;</span>, event.<span class=\"property\">key</span>, event.<span class=\"property\">newValue</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 根据 event.key 和 event.newValue 来更新 Pinia 或其他状态</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>配置相同的 partition 可以共享 localStorage 和 session。</li>\n<li>实时同步 仍然建议使用 storage 事件监听或 IPC。</li>\n<li>持久化和隔离控制：persist: 前缀确保数据在应用关闭后保留。</li>\n</ul>\n","categories":["Electron"],"tags":["electron"]},{"title":"Electron配置自定义安装","url":"/2024/10/28/Electron/electron%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85/","content":"<h1 id=\"electron-配置自定义安装界面\"><a href=\"#electron-配置自定义安装界面\" class=\"headerlink\" title=\"electron 配置自定义安装界面\"></a>electron 配置自定义安装界面</h1><h2 id=\"nsis配置\"><a href=\"#nsis配置\" class=\"headerlink\" title=\"nsis配置\"></a>nsis配置</h2><p><strong>package.json</strong>文件中添加配置<strong>build</strong>配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;appId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;com.example.myapp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;productName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MyApp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;directories&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist_electron&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dist/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;out/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;build/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;node_modules/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;package.json&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;win&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/icon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;nsis&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;nsis&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;oneClick&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowToChangeInstallationDirectory&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;shortcutName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MyApp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installerIcon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/icon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;uninstallerIcon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/icon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installerHeaderIcon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/headerIcon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/installer.nsh&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mac&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/icon.icns&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;linux&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/icons&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;AppImage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;deb&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>appId</strong>：应用程序的唯一标识符，通常遵循反向域名的格式（如 com.example.myapp）。它在应用更新和安装时非常重要。<br><strong>productName</strong>：应用程序的名称，将作为安装程序和应用程序的显示名称使用。<br><strong>directories</strong>：指定输出目录等的相关设置。output: 表示打包后的输出文件存放的目录（例如 dist_electron）。<br><strong>files</strong>：列出要包含在打包中的文件和文件夹，使用通配符来指定路径。</p>\n<ul>\n<li>这里的设置表示将 dist、out、build、node_modules 文件夹及 package.json 文件全部包含在内。</li>\n</ul>\n<p><strong>win</strong>：Windows 平台相关的配置。</p>\n<ul>\n<li><code>icon</code>: 指定安装程序和应用程序的图标位置（例如 build&#x2F;icon.ico）。</li>\n<li><code>target</code>: 设定打包后使用的安装程序类型，这里使用 nsis（Nullsoft Scriptable Install System）。</li>\n</ul>\n<p><strong>nsis</strong>：指定 NSIS 安装程序的相关设置。</p>\n<ul>\n<li><code>oneClick</code>: 设置为 false 表示用户安装时会看到多个步骤，而不是一键安装。</li>\n<li><code>allowToChangeInstallationDirectory</code>: 允许用户在安装过程中选择安装目录。</li>\n<li><code>shortcutName</code>: 设置安装完成后桌面或开始菜单的快捷方式名称。</li>\n<li><code>installerIcon</code>: 在安装程序中使用的图标。</li>\n<li><code>uninstallerIcon</code>: 卸载程序中使用的图标。</li>\n<li><code>installerHeaderIcon</code>: 安装程序界面顶部的图标。</li>\n<li><code>include</code>: 指定额外的 NSIS 脚本文件（例如 build&#x2F;installer.nsh），用于自定义安装过程。</li>\n</ul>\n<p><strong>mac</strong>：Mac 平台相关的配置。</p>\n<ul>\n<li>icon: 指定在 Mac 上应用图标的位置（例如 build&#x2F;icon.icns）。</li>\n</ul>\n<p><strong>linux</strong>：Linux 平台相关的配置。</p>\n<ul>\n<li><code>icon</code>: 指定在 Linux 上应用图标的位置（build&#x2F;icons）。</li>\n<li><code>target</code>: 指定打包后可选的安装包格式，这里有 AppImage 和 deb。</li>\n</ul>\n<p>在build目录下自定义<code>nsh</code>脚本文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">!macro customInit</span><br><span class=\"line\">  MessageBox MB_OK &quot;欢迎使用 MyApp 安装程序！&quot;</span><br><span class=\"line\">!macroend</span><br></pre></td></tr></table></figure>\n\n<p>然后打包 <code>npm run build</code></p>\n<p>详细配置参考文档：<a href=\"https://www.electron.build/nsis\"><strong>nsis</strong></a></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20241028142758.png\"><br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20241028142818.png\"></p>\n<h2 id=\"打包托盘图标丢失\"><a href=\"#打包托盘图标丢失\" class=\"headerlink\" title=\"打包托盘图标丢失\"></a>打包托盘图标丢失</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;dist/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;out/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;build/**/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p><strong>files 打包时包含那些文件，也就是这些目录下的文件都会被打包进安装包。</strong></p>\n<p><strong>如果托盘图标丢失，检查图标文件目录是否包含到打包文件中</strong></p>\n","categories":["Electron"],"tags":["electron"]},{"title":"nodejs基础篇","url":"/2024/07/30/Node/nodejs%E5%9F%BA%E7%A1%80%E7%AF%87/","content":"<h1 id=\"扩展知识\"><a href=\"#扩展知识\" class=\"headerlink\" title=\"扩展知识\"></a>扩展知识</h1><h2 id=\"npm的使用\"><a href=\"#npm的使用\" class=\"headerlink\" title=\"npm的使用\"></a>npm的使用</h2><blockquote>\n<p>npm i 包名 –s –S –save –d 生产环境依赖<br>npm i 包名 –save-dev –D 开发环境依赖</p>\n</blockquote>\n<ul>\n<li>npm init 初始化 下载package.json 文件</li>\n<li>npm install  可简写 npm i 下载项目所有依赖包</li>\n<li>npm i 包名 下载某一个包</li>\n<li>npm i 包名@版本号 下载指定版本的包</li>\n<li>npm i 包名 -g 全局下载某一个包</li>\n<li>npm i 包名 –save-dev 局部安装</li>\n<li>npm list 不加-g 列举当前目录下的所有包，加-g列举全局…</li>\n<li>npm info 包名（详细信息） npm info 包名 version(获取最新版本)</li>\n<li>npm outdated 检查包是否已经过时</li>\n<li>npm uninstall -g <package_name> 卸载全局包</li>\n<li>npm 卸载包具体参考 <a href=\"https://nodejs.cn/npm/packages-and-modules/getting-packages-from-the-registry/uninstalling-packages-and-dependencies/\">卸载包和依赖 - npm 中文文档 (nodejs.cn)</a></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 举例</span><br><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;axios&quot;</span>: <span class=\"string\">&quot;^0.18.1&quot;</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">^ 表示 如果 直接npm i 将会 安装axios <span class=\"number\">0.</span>*.* 最新版本 ^ 只能锁定版本号第一个数字</span><br><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;axios&quot;</span>: <span class=\"string\">&quot;~0.18.1&quot;</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ~ 表示 如果 直接npm i 将会 安装axios <span class=\"number\">0.18</span>.* 最新版本</span><br><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;axios&quot;</span>: <span class=\"string\">&quot;0.18.1&quot;</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> * 表示 如果 直接npm i 将会 安装axios 最新版本</span><br><span class=\"line\"> 如果什么前缀什么都不加的话，就是指定版本的</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理工具\"><a href=\"#包管理工具\" class=\"headerlink\" title=\"包管理工具\"></a>包管理工具</h2><p>全局安装 nrm   <code>npm i -g nrm</code><br>nrm -v 查看是否安装成功</p>\n<blockquote>\n<p>NRM(npm registry manager)是npm 的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源之间切换</p>\n</blockquote>\n<p><code>查询自己当前的镜像源：npm config get registry</code></p>\n<p><code>手动切换方法： npm config set registry https://registry.npm.taobao.org</code></p>\n<p>清除npm 缓存 npm cache clean –force</p>\n<p>nrm 的使用方法 （命令）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">- nrm ls 查看可选的源。 其中，带* 的是当前正在使用的源，上面的输出表明当前源是官方源</span><br><span class=\"line\">- nrm use 源地址  表示切换当前源 例如：切换到淘宝源 ， nrm use taobao</span><br><span class=\"line\">- nrm test 测试相应源的响应时间</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yarn-的使用\"><a href=\"#yarn-的使用\" class=\"headerlink\" title=\"yarn 的使用\"></a>yarn 的使用</h2><blockquote>\n<p>对比npm:<br>    速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用下载以最大化资源利用率，因此安装速度更快<br>    超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</p>\n</blockquote>\n<ul>\n<li>yarn init 初始化  下载package.json 文件</li>\n<li>yarn add 包名 添加包</li>\n<li>yarn add 包名@版本号 添加指定版本包</li>\n<li>yarn add 包名 –dev 安装到开发环境</li>\n<li>yarn upgrade 包名@版本号 将改包升级至指定版本</li>\n<li>yarn remove 包名 移除依赖包</li>\n<li>yarn install 可简写为：yarn 下载项目所有依赖包</li>\n</ul>\n<blockquote>\n<p>扩展：<br><b>中国 NPM 镜像</b><br>这是一个完整的 npmjs.org 镜像，你可以永磁代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -g cnpm --registry=<span class=\"attr\">https</span>:<span class=\"comment\">//registry.npmmirror.com</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"终端快捷键\"><a href=\"#终端快捷键\" class=\"headerlink\" title=\"终端快捷键\"></a>终端快捷键</h2><ol>\n<li><p>上箭头： 定位到上一次使用的命令</p>\n</li>\n<li><p>tab： 快速补全文件路径</p>\n</li>\n<li><p>esc： 快速清空当前已输入的命令</p>\n</li>\n<li><p>cls： 清空终端</p>\n</li>\n</ol>\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><h3 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h3><p>commonjs 模块化：只要不导出就是私有的</p>\n<h4 id=\"导出一个\"><a href=\"#导出一个\" class=\"headerlink\" title=\"导出一个\"></a>导出一个</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test-a&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>) <span class=\"comment\">// a.js 不带后缀也行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node 运行 结果为：&#123;&#125;  不导出默认导出空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = test <span class=\"comment\">// 导出之后 再次运行b.js 输出结果 test-a</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出多个\"><a href=\"#导出多个\" class=\"headerlink\" title=\"导出多个\"></a>导出多个</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test-a&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uper</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>).<span class=\"title function_\">toUpperCase</span>() + str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// module.exports = test</span></span><br><span class=\"line\"><span class=\"comment\">// 以对象的形式导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  test,</span><br><span class=\"line\">  uper</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 也可以解构 const &#123;test, uper&#125; = require(&#x27;./a)</span></span><br><span class=\"line\"><span class=\"comment\">// a &#123; test: [Function: test], uper: [Function: uper] &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">a.<span class=\"title function_\">test</span>() <span class=\"comment\">//test-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">uper</span>(<span class=\"string\">&#x27;hello&#x27;</span>)) <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n\n<p><code>导出多个（也可以这样写)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test-a&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uper</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span> ,<span class=\"number\">1</span>).<span class=\"title function_\">toUpperCase</span>() + str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">test</span> = test</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">uper</span> = uper</span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// a &#123; test: [Function: test], uper: [Function: uper] &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">a.<span class=\"title function_\">test</span>() <span class=\"comment\">//test-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">uper</span>(<span class=\"string\">&#x27;hello&#x27;</span>)) <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6-模块化\"><a href=\"#ES6-模块化\" class=\"headerlink\" title=\"ES6 模块化\"></a>ES6 模块化</h3><p>ES6 模块化：js ES6语法新增</p>\n<h4 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> moduleA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">&quot;./1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(moduleA)</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 运行 node 2.js 报错<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679837581820.png\" alt=\"1679837581820\"></p>\n<p>解决方法：</p>\n<ul>\n<li>方法一：npm init 初始化下载package.json文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;es-moduel&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;2.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;module&quot;</span>, <span class=\"comment\">//添加这一行代码</span></span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>再次执行就成功了，输出： &#123;&#125;</code></p>\n<ul>\n<li>方法二：需要 .mjs 文件名后缀不考虑</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完整版默认导出 1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> moduleA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">&quot;./1.js&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(moduleA.<span class=\"title function_\">getName</span>(<span class=\"string\">&#x27;node&#x27;</span>)) <span class=\"comment\">// node </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按需导出\"><a href=\"#按需导出\" class=\"headerlink\" title=\"按需导出\"></a>按需导出</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导出</span></span><br><span class=\"line\"><span class=\"comment\">// 3.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">25</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">msg</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return params.name + &#x27;:&#x27; + params.age</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;params.name&#125;</span>:<span class=\"subst\">$&#123;params.age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  obj,</span><br><span class=\"line\">  msg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.js 也可以这样写</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">25</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">msg</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;params.name&#125;</span>:<span class=\"subst\">$&#123;params.age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;obj, msg <span class=\"keyword\">as</span> a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./3.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 这里需要和 导出的模块名称对应 as 是指重命名</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj) <span class=\"comment\">// &#123; name: &#x27;张三&#x27;, age: 25 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">a</span>(obj)) <span class=\"comment\">// 张三:25</span></span><br></pre></td></tr></table></figure>\n\n<p><code>注意：</code></p>\n<p><code>export default 要导出的模块</code>    <code>默认导出一个文件只能默认导出一次</code></p>\n<p>导入： import   变量名（名称符合规范即可） from    ‘具体路径,可不带后缀’</p>\n<p><code>epxort  &#123;模块一, 模块二&#125;</code>   <code>按需导出将要导出的模块放在对象中，可一次导入多个，可以多次导出</code></p>\n<p>导入：import   {模块一, 模块二}   from  ‘路径’  </p>\n<p><code>按需导入是通过导出的对象模块解构的，名称需要和导入的模块一致，如果需要重命名，需以下写法</code></p>\n<p>import {模块一   as  变量名}  from ‘路径’<br><code>如果在package.json</code> 里面设置了 type:module 那么就只能用 es模块化，也就是只能使用一种方式</p>\n<p><code>ES6模块化，具有提升的效果，会提升到每个模块的头部</code></p>\n<h1 id=\"node-js-简介\"><a href=\"#node-js-简介\" class=\"headerlink\" title=\"node.js 简介\"></a>node.js 简介</h1><p><code>node.js是一个基于Chrome v8引擎的JavaScript运行环境</code></p>\n<p>node.js 运行环境 分为:</p>\n<ul>\n<li>v8引擎</li>\n<li>内置API（fs，path，http，js内置对象，querystring, etc…）</li>\n</ul>\n<p><code>注意：</code></p>\n<ul>\n<li><p>浏览器是 js 的前端运行环境</p>\n</li>\n<li><p>node.js是js 的后端运行环境</p>\n</li>\n<li><p>node.js 中无法调用 dom bom等浏览器内置API</p>\n</li>\n</ul>\n<p><strong>终端</strong>：是方便程序员更好的操作电脑，辅助工具有 cmd 、powershell（相较于cmd功能更强大，更多）</p>\n<p>脚手架目录详解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">- package.<span class=\"property\">json</span> 项目所有的依赖包</span><br><span class=\"line\">- package-lock.<span class=\"property\">json</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fs文件系统模块\"><a href=\"#fs文件系统模块\" class=\"headerlink\" title=\"fs文件系统模块\"></a>fs文件系统模块</h1><p>fs模块 用来操作文件的模块 里面有一系列的方法和属性</p>\n<p>**fs.readFile()**方法 用来读取文件中的内容</p>\n<p>**fs.wrtieFile()**方法 向指定文件中写入内容</p>\n<blockquote>\n<p>如果要在JavaScript代码中使用fs模块 要先来导入模块</p>\n<p>const fs &#x3D; require(‘fs’)</p>\n</blockquote>\n<h2 id=\"fs-readFile\"><a href=\"#fs-readFile\" class=\"headerlink\" title=\"fs.readFile\"></a>fs.readFile</h2><p>fs.readFile(path, [options], callback)</p>\n<p>被中括号（[]）包起来的是可选参数</p>\n<p>其他的都是必选参数</p>\n<p><strong>参数解读</strong></p>\n<ul>\n<li><p>参数一： 必选参数，字符串，文件的路径</p>\n</li>\n<li><p>参数二： 可选参数，表示以什么编码格式来解读文件 (默认是utf8)</p>\n</li>\n<li><p>参数三： 必选参数，文件读取成功，回调函数拿到读取的结果</p>\n</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p><strong>目录结构</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679052119180.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../file/f1.text&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功:&#x27;</span>, res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一形参是读取失败，第二个形参是读取成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果读取成功err结果为 null 否则就为 ERROR错误对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取失败 热水 结果为 undefined 否则输出读取结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fs-writeFile\"><a href=\"#fs-writeFile\" class=\"headerlink\" title=\"fs.writeFile\"></a>fs.writeFile</h2><p>fs.writeFile(path,data, [options], callback)</p>\n<p>被中括号（[]）包起来的是可选参数</p>\n<p>其他的都是必选参数</p>\n<p><strong>参数解读</strong></p>\n<ul>\n<li><p>参数一： 必选参数，字符串，文件的路径(向那个文件里面写入)</p>\n</li>\n<li><p>参数二： 可选参数，表示要写入的内容</p>\n</li>\n<li><p>参数二： 可选参数，表示以什么编码格式来解读文件 (默认是utf8)</p>\n</li>\n<li><p>参数三： 必选参数，文件读取成功，回调函数</p>\n</li>\n</ul>\n<h3 id=\"覆盖\"><a href=\"#覆盖\" class=\"headerlink\" title=\"覆盖\"></a>覆盖</h3><p><code>覆盖原有的内容</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;../file/f2.text&#x27;</span>, <span class=\"string\">&#x27;writeFlie写入&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入成功！&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 如果文件写入成功，err的值为null</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果文件写入失败，err的值为一个错误对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><p><code>再原有的基础上拼接</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../file/f2.text&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(读取失败)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) </span><br><span class=\"line\">  fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;../file/f2.text&#x27;</span>, res + <span class=\"string\">&#x27;writeFlie写入&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入成功！&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p><strong>目录结构</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679056594500.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据整理</span></span><br><span class=\"line\"><span class=\"comment\">// 初始数据： 小红=99 小白=100 小黄=70 小黑=66 小绿=88</span></span><br><span class=\"line\"><span class=\"comment\">// 结果： 小红：99 小白：100 小黄：70 小黑: 66 小绿: 88</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../file/f3.text&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败!&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = res.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newarr = []</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> newarr.<span class=\"title function_\">push</span>(item.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;=&#x27;</span> , <span class=\"string\">&#x27;:&#x27;</span>)))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newstr = newarr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\r\\n&#x27;</span>)</span><br><span class=\"line\">  fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;../file/f3.text&#x27;</span>,newstr, <span class=\"keyword\">function</span>(<span class=\"params\">err2, res2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err2) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入失败!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入成功!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fs-模块-路径动态拼接的问题\"><a href=\"#fs-模块-路径动态拼接的问题\" class=\"headerlink\" title=\"fs 模块 - 路径动态拼接的问题\"></a>fs 模块 - 路径动态拼接的问题</h2><p><strong>目录结构</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679056594500.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../file/f1.text&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功:&#x27;</span>, res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679056652250.png\" alt=\"1679056652250\"></p>\n<blockquote>\n<p>在 node 文件夹下面执行 node js\\01fs读取.js 报错 cd js 再执行 node js\\01fs读取.js不会报错</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file/f1.text&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功:&#x27;</span>, res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679060435644.png\" alt=\"1679060435644\"></p>\n<p>在使用 fs 模块操作文件时，如果提供的操作路径是以 .&#x2F; 或 ..&#x2F; 开头的相对路径时，很容易出现路径动态拼接错误的问题<br>原因：代码在运行的时候，会已执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</p>\n<p>解决方案：</p>\n<ul>\n<li>使用绝对路径 鼠标反键复制路径 C:\\Users\\Administrator\\Desktop\\笔记\\node\\file\\f1.text (移植性非常差、不利于维护)</li>\n<li>——dirname 当前目录拼接</li>\n<li>或者cd到要执行文件路径下 node js文件名</li>\n</ul>\n<p>斜杠转义： C:\\Users\\Administrator\\Desktop\\笔记\\node\\file\\f1.text</p>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 移植性非常差、不利于维护</span></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;C:\\\\Users\\\\Administrator\\\\Desktop\\\\笔记\\\\node\\\\file\\\\f1.text&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>, err.<span class=\"property\">message</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功:&#x27;</span>, res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679057186191.png\" alt=\"1679057186191\"></p>\n<p>__dirname : 表示当前文件所处的目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(__dirname + <span class=\"string\">&#x27;/../file/f1.text&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e)  <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>, e.<span class=\"property\">message</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取成功!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1679059778515.png\" alt=\"1679059778515\"></p>\n<h1 id=\"path-路径模块\"><a href=\"#path-路径模块\" class=\"headerlink\" title=\"path 路径模块\"></a>path 路径模块</h1><h2 id=\"路径拼接-path-join\"><a href=\"#路径拼接-path-join\" class=\"headerlink\" title=\"路径拼接 path.join()\"></a>路径拼接 path.join()</h2><p><a href=\"\">导入： const path &#x3D; require(‘path’)</a></p>\n<p>path.join() 的语法格式<br>使用 path.join() 方法，可以把多个路径片段拼接为完整路径字符串，语法格式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">join</span>([...paths])</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数解读</strong></p>\n<ul>\n<li>…paths <string> 路径片段的序列</li>\n<li>返回值: <string></li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：../ 会抵消前面的路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathstr = path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;/a&#x27;</span>, <span class=\"string\">&#x27;//b/c&#x27;</span>, <span class=\"string\">&#x27;../&#x27;</span>, <span class=\"string\">&#x27;./d&#x27;</span>, <span class=\"string\">&#x27;/e&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pathstr) <span class=\"comment\">// 输出 \\a\\b\\d\\e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原来读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(__dirname + <span class=\"string\">&#x27;/../file/f1.text&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改写</span></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(path.<span class=\"title function_\">join</span>(__dirname , <span class=\"string\">&#x27;../file/f1.text&#x27;</span>),<span class=\"string\">&quot;utf-8&quot;</span>,<span class=\"function\">(<span class=\"params\">err2, res2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2)</span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* + 号拼接 和 path.join() 拼接的 区别：</span></span><br><span class=\"line\"><span class=\"comment\">  path.join() 如果拼接的字符串没有 \\ 的话会自己补全 </span></span><br><span class=\"line\"><span class=\"comment\">  const pathstr = path.join(&#x27;/a&#x27;, &#x27;//b/c&#x27;, &#x27;../&#x27;, &#x27;./d&#x27;, &#x27;/e&#x27;) 如果多写了 \\ 或者是 . 内部会屏蔽多余的不会报错</span></span><br><span class=\"line\"><span class=\"comment\">  + 拼接会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取路径中的文件名\"><a href=\"#获取路径中的文件名\" class=\"headerlink\" title=\"获取路径中的文件名\"></a>获取路径中的文件名</h2><p><strong>path.basename() 的代码示例</strong></p>\n<p>使用 path.basename方法()，可以从一个文件路径中，获取到文件的名称部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量存放路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathstr = <span class=\"string\">&#x27;/node/public/index.html&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取完整的文件名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = path.<span class=\"title function_\">basename</span>(pathstr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name) <span class=\"comment\">// 输出 index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取完整文件名，不要后缀</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name2 = path.<span class=\"title function_\">basename</span>(pathstr, <span class=\"string\">&#x27;.html&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name2) <span class=\"comment\">// 输出 .html</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取路径中的文件扩展名\"><a href=\"#获取路径中的文件扩展名\" class=\"headerlink\" title=\"获取路径中的文件扩展名\"></a>获取路径中的文件扩展名</h2><p>path.extname() 的代码示例</p>\n<p>使用 path.extname() 方法，可以获取路径中的扩展名部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path  = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义路径字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;src/view/index.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fext = path.<span class=\"title function_\">extname</span>(str)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fext) <span class=\"comment\">// 输出 .vue</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"url-模块\"><a href=\"#url-模块\" class=\"headerlink\" title=\"url 模块\"></a>url 模块</h1><p>node 自动执行代码（当代码保存后）</p>\n<blockquote>\n<p>npm i -g nodemon 全局安装<br>nodemon -v 查看版本<br>或 <code>npm i -g node-dev</code> 执行命令 node-dev 文件名</p>\n</blockquote>\n<h2 id=\"url-parse-路径-方法\"><a href=\"#url-parse-路径-方法\" class=\"headerlink\" title=\"url.parse(路径) 方法\"></a>url.parse(路径) 方法</h2><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/1680338269226.png\" alt=\"1680338269226\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderHtml, renderStates &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./functions&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// url.parse(req.url) 获取url对象信息</span></span><br><span class=\"line\">  <span class=\"comment\">// url.parse(req.url).pathname 路径</span></span><br><span class=\"line\">  <span class=\"comment\">// 默认会读取图标文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&#x27;/favicon.ico&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlobj = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(urlobj)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = urlobj.<span class=\"property\">pathname</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path)</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"title function_\">renderStates</span>(path), &#123; <span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;text/html; Charset=utf-8&quot;</span> &#125;)</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title function_\">renderHtml</span>(path))</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// const urlobj = url.parse(req.url,true) 第二个参数表示可以拿到参数</span></span><br><span class=\"line\"><span class=\"comment\">// query: &#x27;id=8&amp;name=mouse&#x27;,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"旧版方法\"><a href=\"#旧版方法\" class=\"headerlink\" title=\"旧版方法\"></a>旧版方法</h2><blockquote>\n<p>了解即可<br>format （）已废弃</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> urlString = <span class=\"string\">&#x27;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parseStr = url.<span class=\"title function_\">parse</span>(urlString)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(parseStr)</span><br><span class=\"line\"> <span class=\"comment\">/* Url &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  protocol: &#x27;https:&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  slashes: true,</span></span><br><span class=\"line\"><span class=\"comment\">  auth: null,</span></span><br><span class=\"line\"><span class=\"comment\">  host: &#x27;www.baidu.com:443&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  port: &#x27;443&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  hostname: &#x27;www.baidu.com&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  hash: &#x27;#tag=110&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  search: &#x27;?id=8&amp;name=mouse&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  query: &#x27;id=8&amp;name=mouse&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  pathname: &#x27;/ad/index.html&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  path: &#x27;/ad/index.html?id=8&amp;name=mouse&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  href: &#x27;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parseObj = url.<span class=\"title function_\">format</span>(parseStr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(parseObj)</span><br><span class=\"line\"><span class=\"comment\">// https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不加 / 替换 加 / 拼接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = url.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/one/two/three&#x27;</span>, <span class=\"string\">&#x27;four&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = url.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/one/two/three/&#x27;</span>, <span class=\"string\">&#x27;four&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是域名的话会替换 域名/ 后面的所有内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = url.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;http://example.com/a/c&#x27;</span>, <span class=\"string\">&#x27;/one&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, b)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新版方法\"><a href=\"#新版方法\" class=\"headerlink\" title=\"新版方法\"></a>新版方法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://localhost:3000/list?a=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderHtml, renderStates &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./functions&#x27;</span>)</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 默认会读取图标文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&#x27;/favicon.ico&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(req.<span class=\"property\">url</span>, <span class=\"string\">&#x27;http://localhost:3000&#x27;</span>) <span class=\"comment\">// 创建实例对象</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url)</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url.<span class=\"property\">searchParams</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;a&#x27;</span>))<span class=\"comment\">// 获取get请求的参数</span></span><br><span class=\"line\"> <span class=\"comment\">// url.searchParams 获取路径中的参数</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url.<span class=\"property\">searchParams</span>) <span class=\"comment\">// URLSearchParams &#123; &#x27;a&#x27; =&gt; &#x27;1&#x27; &#125; 迭代器形式</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> url.<span class=\"property\">searchParams</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key, value) <span class=\"comment\">// a 1</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> path = url.<span class=\"property\">pathname</span></span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"title function_\">renderStates</span>(path), &#123; <span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;text/html; Charset=utf-8&quot;</span> &#125;)</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title function_\">renderHtml</span>(path))</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(<span class=\"string\">&#x27;/one&#x27;</span>, <span class=\"string\">&#x27;http://example.com/a/c&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str, str.<span class=\"property\">href</span>)</span><br><span class=\"line\"><span class=\"comment\">// URL &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   href: &#x27;http://example.com/one&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   origin: &#x27;http://example.com&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   protocol: &#x27;http:&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   username: &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   password: &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   host: &#x27;example.com&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   hostname: &#x27;example.com&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   port: &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   pathname: &#x27;/one&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   search: &#x27;&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//   searchParams: URLSearchParams &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   hash: &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"comment\">// http://example.com/one</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"queryString-模块\"><a href=\"#queryString-模块\" class=\"headerlink\" title=\"queryString 模块\"></a>queryString 模块</h1><h2 id=\"parse\"><a href=\"#parse\" class=\"headerlink\" title=\"parse\"></a>parse</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;name=张三&amp;age=25&amp;sex=男&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;querystring&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const obj = query.parse(str)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  sex</span><br><span class=\"line\">&#125; = query.<span class=\"title function_\">parse</span>(str)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, age, sex)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stringify\"><a href=\"#stringify\" class=\"headerlink\" title=\"stringify\"></a>stringify</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;querystring&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;女&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newstr = query.<span class=\"title function_\">stringify</span>(person)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newstr)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"escaped-unescaped\"><a href=\"#escaped-unescaped\" class=\"headerlink\" title=\"escaped&#x2F;unescaped\"></a>escaped&#x2F;unescaped</h2><p>字符转义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;querystring&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;id=3&amp;city=北京&amp;url=https://www.baidu.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> escaped = query.<span class=\"built_in\">escape</span>(str)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(escaped) <span class=\"comment\">// id%3D3%26city%3D%E5%8C%97%E4%BA%AC%26url%3Dhttps%3A%2F%2Fwww.baidu.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unescaped = query.<span class=\"built_in\">unescape</span>(escaped)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(unescaped) <span class=\"comment\">// id=3&amp;city=北京&amp;url=https://www.baidu.com </span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"http-模块\"><a href=\"#http-模块\" class=\"headerlink\" title=\"http 模块\"></a>http 模块</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步 导入http模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 第二步创建 服务器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// req 接受浏览器传递的参数</span></span><br><span class=\"line\">  <span class=\"comment\">// res 返回渲染的内容</span></span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;111&#x27;</span>) <span class=\"comment\">// 可以写多次</span></span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>() <span class=\"comment\">// 第三步 这一步必须要，表示当前服务器向浏览器发送内容</span></span><br><span class=\"line\">  <span class=\"comment\">// res.end() 表示当前请求已结束，下面的代码不执行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 第四步 开启服务器</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 3000 表示当前端口 可通过 localhost:3000 访问 输出结果：111</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server服务器已开启&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简写</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>() </span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server服务器已开启&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>返回html</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;你好 nodejs&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/html&gt;`</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>()&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出： 浣犲ソ nodejs</span></span><br><span class=\"line\"><span class=\"comment\">// 发现中文会出现乱码</span></span><br><span class=\"line\"><span class=\"comment\">// 解决方法 res.writeHeader(200,&#123;&quot;Content-Type&quot;:&quot;text-html&quot;&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>res.writeHead(200, &#123; &quot;Content-Type&quot;:&quot;text/html; charset=utf-8&quot; &#125;)</code> 在res.end() 之前发送</p>\n<ul>\n<li>text&#x2F;html 当作html 来解析</li>\n<li>text&#x2F;plain 当作字符串来解析 res 返回什么网页就展示什么</li>\n<li>charset&#x3D;utf-8 字符集 表示可以显示中文</li>\n</ul>\n<h2 id=\"案例-2\"><a href=\"#案例-2\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p><code>通过不同路径显示不同内容</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认会读取图标文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&#x27;/favicon.ico&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">url</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"title function_\">renderStates</span>(req.<span class=\"property\">url</span>), &#123; <span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;text/html; Charset=utf-8&quot;</span> &#125;)</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title function_\">renderHtml</span>(req.<span class=\"property\">url</span>))</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderHtml</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/list&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h1&gt;你好 nodejs&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/html&gt;`</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/home&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;home&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;`</span></span><br><span class=\"line\">      <span class=\"attr\">default</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;404&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderStates</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = [<span class=\"string\">&#x27;/home&#x27;</span>, <span class=\"string\">&#x27;/list&#x27;</span>]</span><br><span class=\"line\"> <span class=\"keyword\">return</span>  path.<span class=\"title function_\">includes</span>(url) ? <span class=\"number\">200</span> : <span class=\"number\">404</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>改写</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server2.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;renderHtml, renderStates&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./functions&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认会读取图标文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&#x27;/favicon.ico&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">url</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"title function_\">renderStates</span>(req.<span class=\"property\">url</span>), &#123; <span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;text/html; Charset=utf-8&quot;</span> &#125;)</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title function_\">renderHtml</span>(req.<span class=\"property\">url</span>))</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderHtml</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/list&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h1&gt;你好 nodejs&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/html&gt;`</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/home&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;home&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;`</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/api&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      [&#x27;list1&#x27;, &#x27;list2&#x27;, &#x27;list3&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">      <span class=\"attr\">default</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;404&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderStates</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = [<span class=\"string\">&#x27;/home&#x27;</span>, <span class=\"string\">&#x27;/list&#x27;</span>, <span class=\"string\">&#x27;/api&#x27;</span>]</span><br><span class=\"line\"> <span class=\"keyword\">return</span>  path.<span class=\"title function_\">includes</span>(url) ? <span class=\"number\">200</span> : <span class=\"number\">404</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  renderHtml,</span><br><span class=\"line\">  renderStates</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>// 其他写法</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听事件请求</span></span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\">(<span class=\"params\">request, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>:<span class=\"string\">&#x27;application/json&#x27;</span> &#125;)</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http-扩展模块-json\"><a href=\"#http-扩展模块-json\" class=\"headerlink\" title=\"http 扩展模块-json\"></a>http 扩展模块-json</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>:<span class=\"string\">&#x27;text/html; Charset=utf-8&#x27;</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myurl = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(myurl.<span class=\"property\">pathname</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/api/aaa&#x27;</span>:</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">`start(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        name:<span class=\"string\">&#x27;张三&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        age:<span class=\"number\">25</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;)&#125;</span>)`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span> :</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;404&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jsonp 接口调用 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> oscript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    oscript.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://localhost:3000/api/aaa&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(oscript)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">start</span>(<span class=\"params\">url</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>:<span class=\"string\">&#x27;text/html; Charset=utf-8&#x27;</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myurl = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myurl.<span class=\"property\">query</span>.<span class=\"property\">callback</span>)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(myurl.<span class=\"property\">pathname</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/api/aaa&#x27;</span>:</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">`<span class=\"subst\">$&#123;myurl.query.callback&#125;</span>(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        name:<span class=\"string\">&#x27;张三&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        age:<span class=\"number\">25</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;)&#125;</span>)`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span> :</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;404&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- jsonp 接口调用 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> oscript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    oscript.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://localhost:3000/api/aaa?callback=test&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(oscript)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">url</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http-扩展模块-cors\"><a href=\"#http-扩展模块-cors\" class=\"headerlink\" title=\"http 扩展模块-cors\"></a>http 扩展模块-cors</h2><p><a href=\"https://github.com/qiufeihong2018/answer_of_interview_questions/blob/master/images/personal-blog-ui.jpg?raw=true\">https://github.com/qiufeihong2018/answer_of_interview_questions/blob/master/images/personal-blog-ui.jpg?raw=true</a></p>\n<h2 id=\"http-模块-get\"><a href=\"#http-模块-get\" class=\"headerlink\" title=\"http 模块-get\"></a>http 模块-get</h2><h2 id=\"http-模块-post\"><a href=\"#http-模块-post\" class=\"headerlink\" title=\"http 模块-post\"></a>http 模块-post</h2><h1 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h1><p>快速搭建<code>express</code>项目</p>\n<ol>\n<li><p>首先确保你已经在本地安装了 Node.js 和 npm</p>\n</li>\n<li><p>打开终端并创建一个新的文件夹，例如 <code>my-express-app</code>，然后在该文件夹中打开终端</p>\n</li>\n<li><p>运行以下命令来初始化一个新的 npm 项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>按照提示填写项目的基本信息，例如项目名称、描述、作者等信息。在完成后会生成一个 <code>package.json</code> 文件，并保存在项目的根目录中</p>\n</li>\n<li><p>安装 Express</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install express</span><br></pre></td></tr></table></figure>\n\n<p>这样就会在项目中安装 Express 包</p>\n</li>\n<li><p>创建 <code>index.js</code> 文件作为项目入口文件，并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const express = require(&#x27;express&#x27;)</span><br><span class=\"line\">const app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.send(&#x27;Hello world!&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;Server is running on port 3000&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这个文件创建了一个使用 Express 的应用程序，并定义了一个处理 <code>/</code> 路径请求的路由。该路由返回一个 “Hello world!” 的响应。最后，应用程序被绑定到本地的 3000 端口，并使用 <code>console.log()</code> 打印出服务器已经启动的消息</p>\n</li>\n<li><p>运行该应用程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node index.js</span><br></pre></td></tr></table></figure>\n\n<p>这样应用程序就会运行，并可以通过访问 <code>http://localhost:3000</code> 来访问你的应用</p>\n</li>\n</ol>\n","categories":["Node"],"tags":["node"]},{"title":"ts入门知识","url":"/2024/08/07/Ts/ts%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/","content":"<h1 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a><strong>Typescript</strong></h1><h2 id=\"01-安装-Typescript\"><a href=\"#01-安装-Typescript\" class=\"headerlink\" title=\"01-安装 Typescript\"></a>01-安装 Typescript</h2><!--安装Typescript，需首先安装 Nodejs-->\n\n\n\n<p><strong>安装Typescript</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br><span class=\"line\"># 或者使用cnpm进行安装</span><br><span class=\"line\">cnpm install -g typescript</span><br><span class=\"line\">tsc -v 检测是否安装成功</span><br><span class=\"line\">初始化tsc --init</span><br><span class=\"line\">tsc -w 可以自动编译 ts文件 我们只需要执行对应的js文件就可以了</span><br><span class=\"line\">tsc -ts文件名  将ts文件转义成js文件，ts文件不能直接运行，需要先转义成js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>其他工具</code>:</p>\n<p>npm i @types&#x2F;node -D  ts-node  ts文件名可以直接输出</p>\n<p>npm i ts-node -g</p>\n<p>npm i nrm -g    管理npm 镜像源</p>\n<p>nrm -h 查看命令</p>\n<p>nrm ls 查询镜像源    nrm use  镜像源</p>\n<p><img src=\"C:\\Users\\Administrator\\Desktop\\ts\\镜像源.png\"></p>\n<h2 id=\"02-数据类型\"><a href=\"#02-数据类型\" class=\"headerlink\" title=\"02-数据类型\"></a><strong>02-数据类型</strong></h2><ul>\n<li>布尔类型(boolean)</li>\n<li>数字类型(number)</li>\n<li>字符串类型(string)</li>\n<li>数组类型(array)</li>\n<li>对象类型(object)</li>\n<li>元组类型(tuple)</li>\n<li>枚举类型(enum)</li>\n<li>任意类型(any)</li>\n<li>null 和 undefined</li>\n<li>void类型</li>\n<li>never类型</li>\n</ul>\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: number = <span class=\"number\">2</span>         <span class=\"comment\">// 普通数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notnumber</span>: number = <span class=\"title class_\">NaN</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">infinityNumber</span>: number = <span class=\"title class_\">Infinity</span> <span class=\"comment\">//无穷大</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">decimal</span>: number = <span class=\"number\">6</span> <span class=\"comment\">//六进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">hex</span>: number = <span class=\"number\">0xf00d</span> <span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">binary</span>: number = <span class=\"number\">0b1010</span> <span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">octal</span>: number = <span class=\"number\">0o744</span> <span class=\"comment\">//八进制</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b1</span>: boolean = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b2</span>: boolean = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>: string = <span class=\"string\">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"null-undefined\"><a href=\"#null-undefined\" class=\"headerlink\" title=\"null undefined\"></a>null undefined</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">n = u</span><br><span class=\"line\">u = n</span><br><span class=\"line\">严格模式</span><br><span class=\"line\">tsconfig.<span class=\"property\">json</span></span><br><span class=\"line\"><span class=\"comment\">// true 开启 false 关闭</span></span><br><span class=\"line\"><span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">关闭严格模式 <span class=\"literal\">null</span> 和 <span class=\"literal\">undefined</span> 可以互相赋值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null和undefined 是其他数据类型(never类型)的子类型</span></span><br><span class=\"line\"><span class=\"comment\">// 定义为具体类型的变量,不能为undefined，即不能不初始化一个值。但是定义为undefined类型的变量可以不进行初始化</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以将变量定义为 具体类型变量 或 undefined类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">num</span>: number | <span class=\"literal\">undefined</span> | <span class=\"literal\">null</span>  <span class=\"comment\">// 此时num即可以为空，也可以赋数字的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似的，一个变量可以定义为多种类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">a</span>:number | string = <span class=\"number\">123</span></span><br><span class=\"line\">a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined和null类型本身的类型用处不是很大</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h3><p><code>表示一中永远无法到达的类型</code> ：type  A &#x3D; string &amp; number   &#x2F;&#x2F; A 就是never类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// never类型: 是其他类型(包括null和undefined)的子类型，代表从不会出现的值，就是说可以把null和undefined赋值给number、string等类型的变量。然而一旦指定了 --strictNullChecks标记，null和undefined就只能赋值给void和它们各自，想给string传入一个null或undefined时需要指定联合类型: string | null | undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 这意味着声明never的变量只能被never类型所赋值</span></span><br><span class=\"line\"><span class=\"comment\">// undefined只能赋值undefined，null只能赋值null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">a</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\">a = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">b</span>:<span class=\"literal\">null</span></span><br><span class=\"line\">b = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// never表示从不会出现的值,例如throw一个错误</span></span><br><span class=\"line\"><span class=\"comment\">// never类型是任何类型的子类型，可以赋值给任何类型</span></span><br><span class=\"line\"><span class=\"comment\">// 没有类型是never类型的子类型或赋值给never类型（除了never本身）</span></span><br><span class=\"line\"><span class=\"comment\">// 一般情况下用不到</span></span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法到达的终点：例如抛出异常、死循环</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">c</span>:never</span><br><span class=\"line\">c = (<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;错误&#x27;</span>)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infiniteLoop</span>(<span class=\"params\"></span>):never &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// never 类型在联合类型里面会被忽略掉，所以这里的 B 类型为 string | void</span></span><br><span class=\"line\">type B = string | <span class=\"keyword\">void</span> | never</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Kun</span> = <span class=\"string\">&#x27;唱&#x27;</span> | <span class=\"string\">&#x27;跳&#x27;</span> | <span class=\"string\">&#x27;rap&#x27;</span> | <span class=\"string\">&#x27;篮球&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">value: Kun</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;唱&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;跳&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;rap&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;篮球&#x27;</span>:    <span class=\"comment\">//如果这里的篮球不加就会报错，因为不能把string赋值给never</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">error</span>:never = value</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"void-类型\"><a href=\"#void-类型\" class=\"headerlink\" title=\"void 类型\"></a>void 类型</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void类型: 表示没有任何类型,一般用于定义方法的时候表示没有返回值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>):<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;run&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个void类型的变量没有什么作用，因为它只能被赋予undefined和null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"keyword\">void</span> = <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Symbol类型\"><a href=\"#Symbol类型\" class=\"headerlink\" title=\"Symbol类型\"></a>Symbol类型</h2><p><code>Symbol 表示唯一值，每个Symbol 数据都是唯一的</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>:symbol = <span class=\"title class_\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>:symbol = <span class=\"title class_\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1,a2)   <span class=\"comment\">// Symbol(1) Symbol(1)</span></span><br><span class=\"line\">a1 === a2   a1 == a2  <span class=\"comment\">// 都为false  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 那么如何让两个 Symbol 返回true呢？</span></span><br><span class=\"line\"><span class=\"comment\">// for会去全局Symbol里面查看有没有注册过这个key，如果有直接拿来用，不会创建新的，没有的话就创建新的</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;1&#x27;</span>) === <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;1&#x27;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 场景</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>:symbol = <span class=\"title class_\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>:symbol = <span class=\"title class_\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    [a1]: <span class=\"number\">111</span>,</span><br><span class=\"line\">    [a2]: <span class=\"number\">222</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"number\">80</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// obj &#123;name:80,[Symbol(1)]:111,[Symbol(1)]:222&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 怎么取到 a1和a2 的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key) <span class=\"comment\">// name:1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)) <span class=\"comment\">// 也读取不到</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(obj))  <span class=\"comment\">// 读取不到</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertySymbols</span>(obj))  <span class=\"comment\">// 可以读取到symbol 但是丢失name</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj))  <span class=\"comment\">// &#123;name:80,[Symbol(1)]:111,[Symbol(1)]:222&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"03-any-和-unknow-的区别\"><a href=\"#03-any-和-unknow-的区别\" class=\"headerlink\" title=\"03-any 和 unknow 的区别\"></a>03-any 和 unknow 的区别</h2><h3 id=\"类型级别\"><a href=\"#类型级别\" class=\"headerlink\" title=\"类型级别\"></a>类型级别</h3><ol>\n<li><p>顶级类型 any unknow</p>\n</li>\n<li><p>Object</p>\n</li>\n<li><p>Number String Boolean</p>\n</li>\n<li><p>number string boolean symbol null undefined</p>\n</li>\n<li><p>1 ‘张三’ false</p>\n</li>\n<li><p>never</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// any类型可以赋任意类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">num</span>:any = <span class=\"number\">123</span></span><br><span class=\"line\">num = <span class=\"literal\">true</span></span><br><span class=\"line\">num = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unknown 只能赋值给自身 或者是 any</span></span><br><span class=\"line\"><span class=\"comment\">// unknown 没有办法读取对象的任何属性，方法也不能调用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: unknown = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: number = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: any = <span class=\"number\">3</span></span><br><span class=\"line\">b = a <span class=\"comment\">// 报错</span></span><br><span class=\"line\">c = a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>: unknown = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">setname</span>: <span class=\"function\">() =&gt;</span> <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>) <span class=\"comment\">// obj类型未知</span></span><br><span class=\"line\"><span class=\"comment\">//unknown 类型比 any 类型更加安全</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>总结：</code> </p>\n<ul>\n<li>any类型可以赋给任意类型的值</li>\n<li>unknown 只能赋值给自身 或者是 any</li>\n<li>unknown 没有办法读取对象的任何属性，方法也不能调用</li>\n<li>unknown 类型比 any 类型更加安全</li>\n</ul>\n<h2 id=\"04-Object-object\"><a href=\"#04-Object-object\" class=\"headerlink\" title=\"04-Object object {}\"></a>04-Object object {}</h2><p>Object大写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 包含所有类型的 Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"title class_\">Object</span> = <span class=\"string\">&#x27;123&#x27;</span>  \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>:<span class=\"title class_\">Object</span> = <span class=\"number\">123</span>   \t\t </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>:<span class=\"title class_\">Object</span> = <span class=\"literal\">false</span>   \t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a3</span>:<span class=\"title class_\">Object</span> = []    \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a4</span>:<span class=\"title class_\">Object</span> = &#123;&#125;    \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a5</span>:<span class=\"title class_\">Object</span> = <span class=\"function\">()=&gt;</span> <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p>object小写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不包含原始类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:object = <span class=\"string\">&#x27;123&#x27;</span>  \t\t <span class=\"comment\">// 错误 原始类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>:object = <span class=\"number\">123</span>   \t\t <span class=\"comment\">// 错误 原始类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>:object = <span class=\"literal\">false</span>   \t <span class=\"comment\">// 错误 原始类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a3</span>:object = []    \t\t <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a4</span>:object = &#123;&#125;    \t\t <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a5</span>:object = <span class=\"function\">()=&gt;</span> <span class=\"number\">123</span>   \t <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>{} 字面量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 包含所有类型的 Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:&#123;&#125; = <span class=\"string\">&#x27;123&#x27;</span>  \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>:&#123;&#125; = <span class=\"number\">123</span>   \t\t </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>:&#123;&#125; = <span class=\"literal\">false</span>   \t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a3</span>:&#123;&#125; = []    \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a4</span>:&#123;&#125; = &#123;&#125;    \t\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a5</span>:&#123;&#125; = <span class=\"function\">()=&gt;</span> <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;&#125; = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 字面量&#123;&#125; 对象类型 赋值后不能修改</span></span><br><span class=\"line\">b.<span class=\"property\">age</span> = <span class=\"number\">25</span> <span class=\"comment\">// 无法添加</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"05-interface接口\"><a href=\"#05-interface接口\" class=\"headerlink\" title=\"05-interface接口\"></a>05-interface接口</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被约束的类型 不能多属性 也不能少属性</span></span><br><span class=\"line\"><span class=\"comment\">// interface 同名的会重合，将所有的类型合到一起</span></span><br><span class=\"line\">interface msg &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string</span><br><span class=\"line\">    <span class=\"attr\">age</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface msg &#123;</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: msg = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引签名 当后端接口返回数据过多，我们只需要其中某一些属性</span></span><br><span class=\"line\"><span class=\"comment\">// propName -&gt; 对象的key</span></span><br><span class=\"line\">interface data &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string \t<span class=\"comment\">// 必须有</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: number   \t<span class=\"comment\">// 必须有</span></span><br><span class=\"line\">    [<span class=\"attr\">propName</span>:string]:any <span class=\"comment\">// 索引签名</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">res</span>:data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,  <span class=\"comment\">//下面的不参与ts校验</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口继承</span></span><br><span class=\"line\"><span class=\"comment\">// 可以继承多个 interface a extends b 接口名  </span></span><br><span class=\"line\">interface a <span class=\"keyword\">extends</span> b  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface b &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>:a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用interface 定义函数</span></span><br><span class=\"line\">interface <span class=\"title class_\">Fn</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">name</span>:string):number[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn</span>:<span class=\"title class_\">Fn</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name:string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接口继承</li>\n<li>索引签名</li>\n<li>接口重合</li>\n</ul>\n<h2 id=\"06-可选参数\"><a href=\"#06-可选参数\" class=\"headerlink\" title=\"06-可选参数\"></a>06-可选参数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface msg &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string</span><br><span class=\"line\">    age？: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;zs&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">10</span> <span class=\"comment\">//这里的age为可选参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"07-readonly\"><a href=\"#07-readonly\" class=\"headerlink\" title=\"07-readonly\"></a>07-readonly</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface msg &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string</span><br><span class=\"line\">    age？: number</span><br><span class=\"line\">    readonly <span class=\"attr\">fn</span>:<span class=\"function\">()=&gt;</span><span class=\"literal\">false</span> <span class=\"comment\">// fn 方法只读，不可修改</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"08-数组的定义\"><a href=\"#08-数组的定义\" class=\"headerlink\" title=\"08-数组的定义\"></a>08-数组的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;&gt; 表示泛型</span></span><br><span class=\"line\"><span class=\"comment\">// 第1种定义数组的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">arr</span>:number[] = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]  <span class=\"comment\">// 数字数组</span></span><br><span class=\"line\"><span class=\"comment\">// 第2种定义数组的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;number&gt; = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//大杂烩数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:any = [<span class=\"number\">12</span>, <span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;123&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元组类型,属于数组的一种,可以为数组中每一个位置元素指定一个类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[number, string, string] = [<span class=\"number\">12</span>, <span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;123&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 interface 定义数组</span></span><br><span class=\"line\">interface obj &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:string</span><br><span class=\"line\">    age?:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">arr</span>:obj = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">arr</span>:number[][] = [[<span class=\"number\">12</span>], [<span class=\"number\">5</span>], [<span class=\"number\">8</span>]]  <span class=\"comment\">// 数字数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Array</span>&lt;number&gt;&gt; = [[<span class=\"number\">12</span>], [<span class=\"number\">5</span>], [<span class=\"number\">8</span>]]</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\">...args:string[]</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">a</span>:any[] = <span class=\"variable language_\">arguments</span> <span class=\"comment\">// 报错因为 arguments 是伪数组很多数组方法都没有</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">a</span>:A = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"title class_\">IArguments</span>= <span class=\"variable language_\">arguments</span> <span class=\"comment\">// 原理就是 通过interface</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">a</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    interface A &#123;</span><br><span class=\"line\">        <span class=\"attr\">callee</span>:<span class=\"title class_\">Function</span></span><br><span class=\"line\">        <span class=\"attr\">length</span>:number</span><br><span class=\"line\">        [<span class=\"attr\">index</span>:number]:any</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举类型</span></span><br><span class=\"line\"><span class=\"comment\">// 枚举类型中间没有等号</span></span><br><span class=\"line\">enum <span class=\"title class_\">Flag</span> &#123;success = <span class=\"number\">1</span>, error = <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果定义一个数字枚举，第一个成员初始化为1，其余成员会自动从1开始增长</span></span><br><span class=\"line\">enum <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Up</span> = <span class=\"number\">1</span>, <span class=\"comment\">// 如果不指定Up初始化值，则 Up的值为0，Down为1</span></span><br><span class=\"line\">    <span class=\"title class_\">Down</span>,  <span class=\"comment\">// Up = 1时，Down会自动变成2</span></span><br><span class=\"line\">    <span class=\"title class_\">Left</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Right</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:<span class=\"title class_\">Flag</span> = <span class=\"title class_\">Flag</span>.<span class=\"property\">success</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)  <span class=\"comment\">// 输出1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果枚举的标识符没有赋值,打印出来的为前一个的值加1。如果第一项没有值，则第一项值默认为0</span></span><br><span class=\"line\">enum <span class=\"title class_\">Color</span> &#123;blue, red, yellow = <span class=\"number\">3</span>, green, <span class=\"string\">&#x27;white&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">blue</span>)  <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">red</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">yellow</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">green</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>.<span class=\"property\">white</span>)  <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>09-函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数定义</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a: number,b: number</span>):number &#123;</span><br><span class=\"line\">    reutrn a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)) <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = (<span class=\"attr\">a</span>: number,<span class=\"attr\">b</span>: number):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a+b</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数参数默认值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = (<span class=\"attr\">a</span>: number = <span class=\"number\">10</span>,<span class=\"attr\">b</span>: number = <span class=\"number\">20</span>):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数可选参数 可选参数不能同时和默认参数一起使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = (<span class=\"attr\">a</span>: number = <span class=\"number\">1</span>,b？: number):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如何传递一个对象</span></span><br><span class=\"line\">interface user &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: number[],</span><br><span class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">this</span>:obj,num:number</span>) =&gt;</span> <span class=\"keyword\">void</span> <span class=\"comment\">//num 表示传递的参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ts 中可以定义 this 的类型 在js中无法使用 必须是第一个参数定义 this的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\"><span class=\"variable language_\">this</span>:obj,num:number</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">user</span>.<span class=\"title function_\">push</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">add</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">user</span>) <span class=\"comment\">// [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 函数重载</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>: number[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNum</span>(<span class=\"params\">add:number[]</span>):number[]   <span class=\"comment\">// 如果传入的是一个number的数组那就添加</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNum</span>(<span class=\"params\">id:number</span>):number[]   <span class=\"comment\">//如果传入了id就是单个查询</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNum</span>(<span class=\"params\"></span>):number[]   <span class=\"comment\">//如果什么都不穿就是查询全部</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNum</span>(<span class=\"params\">ids?: number | number[]</span>): number[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ids === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item == ids)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(ids)) &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">push</span>(...ids)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">findNum</span>([<span class=\"number\">11</span>]))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"9-类型断言-联合类型-交叉类型\"><a href=\"#9-类型断言-联合类型-交叉类型\" class=\"headerlink\" title=\"9-类型断言 | 联合类型 |交叉类型\"></a>9-类型断言 | 联合类型 |交叉类型</h2><blockquote>\n<p>当自己知道某个变量的类型时，可以通过类型断言这种方式告诉编译器。类型断言好比其他语言中的类型转换，但是不进行特殊的数据检查和结构，它没有运行时影响，只在编译阶段起作用。</p>\n</blockquote>\n<p>!!     类型强转</p>\n<p>!1 -&gt; false  -&gt;!false -&gt; true          !!1 -&gt; true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 联合类型</span></span><br><span class=\"line\"><span class=\"comment\">// let phonw:number | string = 17762682464 </span></span><br><span class=\"line\"><span class=\"comment\">// 注意：这里不能使用 ||</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\">type: number | boolean</span>):boolean &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!type</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">fn</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交叉类型</span></span><br><span class=\"line\">interface person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:string,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Man</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = (<span class=\"attr\">man</span>: person &amp; <span class=\"title class_\">Man</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// &#123; name: &#x27;张三&#x27;, age: 20, sex: &#x27;男&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类型断言</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\">num: number | string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((num <span class=\"keyword\">as</span> string).<span class=\"property\">length</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  类型断言也可以这样写</span></span><br><span class=\"line\">interface A &#123;</span><br><span class=\"line\">  <span class=\"attr\">run</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface B &#123;</span><br><span class=\"line\">  <span class=\"attr\">bulid</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = (<span class=\"attr\">type</span>:A | B):<span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((&lt;A&gt;type).<span class=\"property\">run</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">o</span>(&#123;<span class=\"attr\">run</span>:<span class=\"string\">&#x27;1&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span> =<span class=\"number\">123</span> <span class=\"comment\">// 报错 类型“Window &amp; typeof globalThis”上不存在属性“a”</span></span><br><span class=\"line\">(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> any).<span class=\"property\">a</span> = <span class=\"number\">123</span>   <span class=\"comment\">// any 类型上面可以访问任何属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = (<span class=\"attr\">type</span>:any):<span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> type <span class=\"keyword\">as</span> boolean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fn</span>(<span class=\"number\">1</span>)) <span class=\"comment\">// 1 类型断言并不会欺骗 ts</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"10-内置对象\"><a href=\"#10-内置对象\" class=\"headerlink\" title=\"10-内置对象\"></a>10-内置对象</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>:<span class=\"title class_\">Number</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">data</span>:<span class=\"title class_\">Date</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">reg</span>:<span class=\"title class_\">RegExp</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"regexp\">/\\w/</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">error</span>:<span class=\"title class_\">Error</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;错误&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">xhr</span>:<span class=\"title class_\">XMLHttpRequest</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//HTML元素 Element HTMLElement</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">div</span>:<span class=\"title class_\">HTMLDivElement</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NodeList（可遍历） dom 类型可以使用 forEach遍历</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">div</span>:<span class=\"title class_\">NodeList</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//当类型不确定可以</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">div</span>:<span class=\"title class_\">NodeListof</span>&lt;<span class=\"title class_\">HTMLDivElement</span> | <span class=\"title class_\">HTMLElement</span>&gt; = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">local</span>:<span class=\"title class_\">Storage</span> = <span class=\"variable language_\">localStorage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">lo</span>:<span class=\"title class_\">Location</span> = location</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cookie</span>:string = doucment.<span class=\"property\">cookie</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">promise</span>:<span class=\"title class_\">Promise</span>&lt;number&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r</span>)=&gt;</span><span class=\"title function_\">r</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    res.  <span class=\"comment\">//可以使用对应的数字方法</span></span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">promise</span>:<span class=\"title class_\">Promise</span>&lt;string&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r</span>)=&gt;</span><span class=\"title function_\">r</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    res.  <span class=\"comment\">//可以使用对应的字符串方法</span></span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"11-类型推论-类型别名\"><a href=\"#11-类型推论-类型别名\" class=\"headerlink\" title=\"11-类型推论 | 类型别名\"></a>11-类型推论 | 类型别名</h2><p><code>类型推论</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;张三&#x27;</span>  \t<span class=\"comment\">// 鼠标滑到str上面显示string类型</span></span><br><span class=\"line\">str = <span class=\"number\">345</span>        \t <span class=\"comment\">// 赋值其他类型，报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>]  \t \t <span class=\"comment\">// 也可以推论其他类型\tnumber类型的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a      \t\t\t <span class=\"comment\">// 如果默认没有赋值和类型那么就是any类型</span></span><br><span class=\"line\">a = <span class=\"number\">123</span> </span><br><span class=\"line\">a = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>类型别名</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// type 可以定义任何类型</span></span><br><span class=\"line\">type fn = <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>     <span class=\"comment\">// const f: fn = () =&gt; &#123; &#125;</span></span><br><span class=\"line\">type o = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>&#125;</span><br><span class=\"line\">type s = string</span><br><span class=\"line\">type narr = <span class=\"attr\">number</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extends 在ts里面表示包含的意思</span></span><br><span class=\"line\"><span class=\"comment\">// 左边的值 会作为右边类型的子类型</span></span><br><span class=\"line\">type num = <span class=\"number\">1</span> <span class=\"keyword\">extends</span> number ? <span class=\"number\">1</span> ：<span class=\"number\">0</span> <span class=\"comment\">// 返回结果为1</span></span><br><span class=\"line\"><span class=\"comment\">// 只有当number为 never 的时候为0 因为never的级别最低</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"12-生成器-迭代器\"><a href=\"#12-生成器-迭代器\" class=\"headerlink\" title=\"12-生成器 | 迭代器\"></a>12-生成器 | 迭代器</h2><p><code>生成器</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// yield 同步和异步代码可以修饰 </span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> man = <span class=\"title function_\">gen</span>()</span><br><span class=\"line\"><span class=\"comment\">// value 表示值（yield右边的值），done 为false表示可以继续执行，true不能执行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123;value:Promise &#123;1&#125;,done:false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123;value:2,done:false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>迭代器</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">set map arr <span class=\"title class_\">NodeList</span>(dom节点) 等这些都是 有迭代器的 可以通过 [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()获取</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">set</span>:<span class=\"title class_\">Set</span>&lt;number&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">each</span> = (<span class=\"params\">value:any</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"title class_\">It</span>:any = value[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">next</span>:any = &#123;<span class=\"attr\">done</span>:<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!next.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        next = <span class=\"title class_\">It</span>.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!next.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(next.<span class=\"property\">value</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">each</span>(set) <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\"><span class=\"comment\">// 迭代器的语法糖  for of 对象不可用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value) <span class=\"comment\">// 效果是一样的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 解构的底层原理 iterator</span></span><br><span class=\"line\"><span class=\"comment\">// 对象支持 for of</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">max</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"attr\">current</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">max</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">max</span>,</span><br><span class=\"line\">            <span class=\"attr\">current</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">current</span></span><br><span class=\"line\">            <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">current</span> == <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        <span class=\"attr\">value</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\">                        <span class=\"attr\">done</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        <span class=\"attr\">value</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">current</span>++</span><br><span class=\"line\">                        <span class=\"attr\">done</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">       \t \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = [...obj] <span class=\"keyword\">let</span> y = &#123;...obj&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x) <span class=\"comment\">// [0,1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y) <span class=\"comment\">// &#123;max:5,current:0,[Symbol.iterator]&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 数组解构底层调用interator 对象不是</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"13-泛型\"><a href=\"#13-泛型\" class=\"headerlink\" title=\"13-泛型\"></a>13-泛型</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\">a:number, b:number</span>):<span class=\"title class_\">Array</span>&lt;number&gt;&#123;<span class=\"keyword\">return</span> [a,b]&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\">a:number, b:number</span>):<span class=\"title class_\">Array</span>&lt;number&gt;&#123;<span class=\"keyword\">return</span> [a,b]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T&gt;(<span class=\"attr\">a</span>:T, <span class=\"attr\">b</span>:T):<span class=\"title class_\">Array</span>&lt;T&gt; &#123; <span class=\"keyword\">return</span> [a, b] &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)    \t\t<span class=\"comment\">// function fn5&lt;number&gt;(a: number, b: number): number[]</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>) \t<span class=\"comment\">// function fn5&lt;string&gt;(a: string, b: string): string[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">type A&lt;T&gt; = string | number | T</span><br><span class=\"line\">type <span class=\"attr\">a</span>:A&lt;<span class=\"literal\">null</span>&gt; = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">iterface <span class=\"title class_\">Data</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>:T,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">data</span>:<span class=\"title class_\">Data</span>&lt;number&gt; = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">msg</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> add&lt;K, T&gt;(<span class=\"attr\">a</span>: K, <span class=\"attr\">b</span>: T): <span class=\"title class_\">Array</span>&lt;K | T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [a, b]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 封装axios</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = &#123;</span><br><span class=\"line\">    get&lt;T&gt;(<span class=\"attr\">url</span>:string):<span class=\"title class_\">Promise</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"attr\">xhr</span>:<span class=\"title class_\">XMLHttpRequest</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>,url)</span><br><span class=\"line\">            xhr.<span class=\"property\">onreadystatechage</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;./data.json&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// &#123;messge:&quot;success&quot;,code:200&#125;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// data.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;message&quot;</span>:<span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;code&quot;</span>:<span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"14-泛型约束\"><a href=\"#14-泛型约束\" class=\"headerlink\" title=\"14-泛型约束\"></a>14-泛型约束</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在类型后面在跟一个 extends 在跟一个约束的类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> add&lt;T <span class=\"keyword\">extends</span> number&gt; (<span class=\"attr\">a</span>:T,<span class=\"attr\">b</span>:T) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>)) <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface len &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T <span class=\"keyword\">extends</span> len&gt;(<span class=\"attr\">a</span>:T) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">length</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">fn</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"literal\">false</span>) <span class=\"comment\">// 报错 没有length属性</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">111</span>) <span class=\"comment\">// 报错 没有length属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type key = keyof <span class=\"keyword\">typeof</span> obj</span><br><span class=\"line\"><span class=\"keyword\">function</span> ob&lt;T <span class=\"keyword\">extends</span> object, K <span class=\"keyword\">extends</span> keyof T&gt;(<span class=\"attr\">obj</span>: T, <span class=\"attr\">key</span>: K) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">ob</span>(obj, <span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:string,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:number,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现一个功能将 接口 Data里面的类型全部变成可选参数 不通过直接加？的方式</span></span><br><span class=\"line\"><span class=\"comment\">// for in for(let key in obj)</span></span><br><span class=\"line\">type <span class=\"title class_\">Options</span>&lt;T <span class=\"keyword\">extends</span> object&gt; = &#123;</span><br><span class=\"line\">  readonly [key <span class=\"keyword\">in</span> keyof T]?: T[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type c = <span class=\"title class_\">Options</span>&lt;<span class=\"title class_\">Data</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ts-config-配置文件\"><a href=\"#ts-config-配置文件\" class=\"headerlink\" title=\"ts.config 配置文件\"></a>ts.config 配置文件</h2><h2 id=\"ts-命名空间污染\"><a href=\"#ts-命名空间污染\" class=\"headerlink\" title=\"ts  命名空间污染\"></a>ts  命名空间污染</h2><p><code>如果模块中没有带有 import 和 export声明 那么它的内容就是全局可见的（因此模块也是全局可见的）</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// index2.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span> <span class=\"comment\">// 提示变量 a已经被声明了</span></span><br><span class=\"line\"><span class=\"comment\">// 解决方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>命名空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\">namespace A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// index2.ts</span></span><br><span class=\"line\">namespace B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 也可以做到互不干扰</span></span><br><span class=\"line\"><span class=\"comment\">// 命名空间会被编译成一个对象 console.log(A.a) // 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套命名空间</span></span><br><span class=\"line\">namespace A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> namespace C &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> D = <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A.<span class=\"property\">C</span>.<span class=\"property\">D</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽离命名空间</span></span><br><span class=\"line\"><span class=\"comment\">// 文件一</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> namespace B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 文件二</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;B&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./B&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A.<span class=\"property\">C</span>.<span class=\"property\">D</span>,B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名空间简化</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">AA</span> = A.<span class=\"property\">C</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">AA</span>.<span class=\"property\">D</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>多个命名空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">namespace A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和 interface 一样，相同的会合并</span></span><br><span class=\"line\">namespace A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"三斜线指令\"><a href=\"#三斜线指令\" class=\"headerlink\" title=\"三斜线指令\"></a>三斜线指令</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h2><p><code>在ts项目中要使用第三方包就必须下载对应的声明文件，如果没有就会报错</code></p>\n<ul>\n<li>一种是直接去社区找对应的包的ts声明文件 @types&#x2F;包名</li>\n<li>一种是自己手动写一个声明文件  规范    包名.d.ts</li>\n</ul>\n<h2 id=\"Mixins混入\"><a href=\"#Mixins混入\" class=\"headerlink\" title=\"Mixins混入\"></a>Mixins混入</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 混入</span></span><br><span class=\"line\">interface <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Age</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Sex</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">Name</span> = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">Age</span> = &#123; <span class=\"attr\">age</span>: <span class=\"number\">23</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Sex</span> = &#123; <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">MixisObj</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(a, b, c)</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Ts"],"tags":["ts"]},{"title":"vue2和vue3的区别","url":"/2024/08/05/Vue/vue2%E5%92%8Cvue3%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h1 id=\"对于-Vue3-的理解\"><a href=\"#对于-Vue3-的理解\" class=\"headerlink\" title=\"对于 Vue3 的理解\"></a>对于 Vue3 的理解</h1><ul>\n<li><p>性能更好了</p>\n<ul>\n<li>响应式的原理换成了 Proxy</li>\n<li>基本数据类型响应式还是通过 Object.defineProperty</li>\n<li>VNode Diff 算法进行了优化</li>\n</ul>\n</li>\n<li><p>体积更小了</p>\n<ul>\n<li>删除了一些不太常用的 API，例如 filter，EventBus</li>\n<li>按需导入，能配合 Webpack 支持 Tree Shaking</li>\n</ul>\n</li>\n<li><p>对 TS 支持更好了</p>\n</li>\n<li><p>Composition API</p>\n<ul>\n<li>解决了对同一功能的数据和业务逻辑复用和维护的问题</li>\n<li>Vue2 实现一个功能或业务，需要在 <code>data</code> 中定义数据，<code>methods</code> 中定义方法，等等，每个业务的数据比较分散，不利于维护</li>\n<li>Vue3 中可以通过自定义 hooks 来抽离功能、业务，提高了复用性和维护性，使得 Vue3 也可以驾驭大型项目</li>\n</ul>\n</li>\n<li><p>新特性</p>\n</li>\n</ul>\n<h1 id=\"创建一个-Vue3-项目\"><a href=\"#创建一个-Vue3-项目\" class=\"headerlink\" title=\"创建一个 Vue3 项目\"></a>创建一个 Vue3 项目</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导入一个 createApp 的函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个根组件 App.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 createApp 传递 App 根组件创建应用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用挂载到某个地方</span></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组合式-API\"><a href=\"#组合式-API\" class=\"headerlink\" title=\"组合式 API\"></a>组合式 API</h1><h2 id=\"script-setup-语法糖\"><a href=\"#script-setup-语法糖\" class=\"headerlink\" title=\"script setup 语法糖\"></a>script setup 语法糖</h2><ul>\n<li><code>defineProps</code> 接受数据</li>\n<li><code>defineEmits</code> 生成 <code>emit</code> 提交自定义事件</li>\n<li><code>defineExpose</code><ul>\n<li><code>script setup</code> 中数据默认外界是不能访问的</li>\n<li>如果需要访问，通过此函数暴露一下</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"setup-中的参数\"><a href=\"#setup-中的参数\" class=\"headerlink\" title=\"setup 中的参数\"></a>setup 中的参数</h2><h3 id=\"参数一：props\"><a href=\"#参数一：props\" class=\"headerlink\" title=\"参数一：props\"></a>参数一：props</h3><ul>\n<li>接受父组件传递的值</li>\n</ul>\n<h3 id=\"参数二：context\"><a href=\"#参数二：context\" class=\"headerlink\" title=\"参数二：context\"></a>参数二：context</h3><ul>\n<li><code>emit</code>：传递自定义事件</li>\n<li><code>attrs</code>：非 <code>props</code> 属性，父组件传递了值，子组件没有通过 <code>props</code> 接收</li>\n<li><code>slots</code>：插槽信息</li>\n</ul>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><ul>\n<li><p>包裹任意数据（普通和复杂）将其转换为响应式对象</p>\n</li>\n<li><p>注意</p>\n<ul>\n<li>JS 代码中使用 <code>ref</code> 响应式对象要加 <code>.value</code></li>\n<li>模板中不用加，会自动加</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h2><ul>\n<li>可以把数组或对象包装成响应式的数据</li>\n<li><code>reactive</code> 内部的数据如果是一个复杂数据类型的话（内部会借助 <code>reactive</code>），其实它还是一个 <code>reactive</code> 对象</li>\n</ul>\n<h2 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h2><ul>\n<li>可以把响应式对象中某一个属性转换未单独的响应式 <code>ref</code> 对象</li>\n<li>并且转换后的数据和原对象是关联的</li>\n</ul>\n<h2 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h2><ul>\n<li>可以把响应式对象中的多个属性转换为单独的响应式 <code>ref</code> 对象</li>\n</ul>\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><ul>\n<li><p>如果要修改 <code>computed</code> 数据，需要使用 <code>set</code> 的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">state.<span class=\"property\">fullName</span> = <span class=\"title function_\">computed</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;~&#x27;</span> + state.<span class=\"property\">lastName</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">newFullName</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [firstName, lastName] = newFullName.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;~&#x27;</span>)</span><br><span class=\"line\">    state.<span class=\"property\">firstName</span> = firstName</span><br><span class=\"line\">    state.<span class=\"property\">lastName</span> = lastName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><h3 id=\"监听-ref\"><a href=\"#监听-ref\" class=\"headerlink\" title=\"监听 ref\"></a>监听 ref</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>eat：&#123;&#123; obj.hobby.eat&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;obj.hobby.eat = &#x27;&#x27;&quot;</span>&gt;</span>面条<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; watch, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> obj = <span class=\"title function_\">ref</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">hobby</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">eat</span>: <span class=\"string\">&#x27;西瓜&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// watch 监听 ref 类型数据，默认监听的只是第一层，谁是第一层？</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">watch</span>(obj, <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;obj&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>监听 <code>ref</code> 默认是浅监听，只监听一层，可以开启深度监听</li>\n<li>只修改第一层 <code>obj.vue</code> 也能触发监听</li>\n<li><code>ref</code> 包裹的如果是一个对象，对象内部的复杂的数据类型其实是一个 <code>reactive</code> 类型的数据，那就符合监听 <code>reactive</code> 数据的特点</li>\n</ul>\n<h3 id=\"监听-reactive\"><a href=\"#监听-reactive\" class=\"headerlink\" title=\"监听 reactive\"></a>监听 reactive</h3><ul>\n<li>强制开启深度监听，<code>deep</code> 配置无效</li>\n<li>其实监听是 <code>reactive</code> 内部的数据，对本身的修改不会触发监听</li>\n<li>注意点<ul>\n<li><code>reactive</code> 内部的数据如果是一个复杂数据类型的话，其实它还是一个 <code>reactive</code>，对这个数据的监听还是符合监听 <code>reactive</code> 数据的特点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"监听普通值\"><a href=\"#监听普通值\" class=\"headerlink\" title=\"监听普通值\"></a>监听普通值</h3><ul>\n<li><p><code>watch(() =&gt; 普通值, () =&gt; &#123;&#125; )</code></p>\n</li>\n<li><p>如果监听 <code>reactive</code> 中的某个对象本身和内部数据的修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"function\">() =&gt;</span> state.<span class=\"property\">list</span>, <span class=\"function\">(<span class=\"params\">newList</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;TODOS&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(newList))</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onBeforeMount</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onBeforeMount&#x27;</span>) <span class=\"comment\">// 挂载之前</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onMounted&#x27;</span>) <span class=\"comment\">// 挂载之后</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">onBeforeUpdate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onBeforeUpdate&#x27;</span>) <span class=\"comment\">// 更新之前</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">onUpdated</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onUpdated&#x27;</span>) <span class=\"comment\">// 更新之后</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">onBeforeUnmount</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onBeforeUnmount&#x27;</span>) <span class=\"comment\">// 卸载之前</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">onUnmounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onUnmounted&#x27;</span>) <span class=\"comment\">// 卸载之后</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>把 Vue2 中的 <code>beforeCreate</code> 和 <code>created</code> 变成了 <code>setup</code></li>\n<li>相同的生命周期可以写多次</li>\n</ul>\n<h2 id=\"setup\"><a href=\"#setup\" class=\"headerlink\" title=\"setup\"></a>setup</h2><ul>\n<li>执行时机：比 <code>beforeCreate</code> 和 <code>created</code> 还要早</li>\n<li>内部没有 <code>this</code>，<code>this</code> 是 <code>undefined</code></li>\n<li>使用 <code>setup</code> 中的数据或方法需要在 <code>setup</code> 里面 <code>return</code></li>\n</ul>\n<h1 id=\"跨层级组件通信（依赖注入）\"><a href=\"#跨层级组件通信（依赖注入）\" class=\"headerlink\" title=\"跨层级组件通信（依赖注入）\"></a>跨层级组件通信（依赖注入）</h1><ul>\n<li>祖先通过 <code>provide</code> 提供数据</li>\n<li>后代通过 <code>inject</code> 注入数据<ul>\n<li>根据单项数据流的思想，注入过来的这个数据不能直接修改</li>\n<li>如果想改需要祖先再提供一个修改数据的方法到后代</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h1><ul>\n<li>相当于 <code>:modelValue</code> 和 <code>@update:modelValue</code> 的语法糖</li>\n<li>把 Vue2 中的 <code>v-model</code> 和 <code>.sync</code> 修饰符综合起来了，组件上也可以写多次 <code>v-model</code></li>\n</ul>\n<hr>\n","categories":["Vue"],"tags":["vue2","vue3"]},{"title":"vue调用电脑本地摄像头拍照","url":"/2024/08/13/Vue/vue2%E8%B0%83%E7%94%A8%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0%E6%91%84%E5%83%8F%E5%A4%B4/","content":"<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;camera_outer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;videoCamera&quot;</span> <span class=\"attr\">:width</span>=<span class=\"string\">&quot;videoWidth&quot;</span> <span class=\"attr\">:height</span>=<span class=\"string\">&quot;videoHeight&quot;</span> <span class=\"attr\">autoplay</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvasCamera&quot;</span> <span class=\"attr\">:width</span>=<span class=\"string\">&quot;videoWidth&quot;</span> <span class=\"attr\">:height</span>=<span class=\"string\">&quot;videoHeight&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img_bg_camera&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tx_img&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;getCompetence&quot;</span>&gt;</span>打开摄像头<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;stopNavigator&quot;</span>&gt;</span>关闭摄像头<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setImage&quot;</span>&gt;</span>拍照<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;cleanImage&quot;</span>&gt;</span>清除<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">el-select</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 200px;&quot;</span> @<span class=\"attr\">change</span>=<span class=\"string\">&quot;changeCamera&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;value&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;device in videoDevices&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;device.deviceId&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;device.deviceId&quot;</span>&gt;</span>&#123;&#123; device.label &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">el-option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">el-select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">videoWidth</span>: <span class=\"number\">400</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">videoHeight</span>: <span class=\"number\">300</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">imgSrc</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">thisCancas</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">thisContext</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">thisVideo</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">videoDevices</span>: [],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">currentDeviceId</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">value</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getVideoDevices</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getCompetence</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">thisCancas</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvasCamera&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">thisContext</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">thisCancas</span>.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">thisVideo</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;videoCamera&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">if</span> (navigator.<span class=\"property\">mediaDevices</span> === <span class=\"literal\">undefined</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        navigator.<span class=\"property\">mediaDevices</span> = &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">if</span> (navigator.<span class=\"property\">mediaDevices</span>.<span class=\"property\">getUserMedia</span> === <span class=\"literal\">undefined</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        navigator.<span class=\"property\">mediaDevices</span>.<span class=\"property\">getUserMedia</span> = <span class=\"keyword\">function</span> (<span class=\"params\">constraints</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">var</span> getUserMedia = navigator.<span class=\"property\">webkitGetUserMedia</span> || navigator.<span class=\"property\">mozGetUserMedia</span> || navigator.<span class=\"property\">getUserMedia</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (!getUserMedia) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;getUserMedia is not implemented in this browser&#x27;</span>))</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            getUserMedia.<span class=\"title function_\">call</span>(navigator, constraints, resolve, reject)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getVideoDevices</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">videoDevices</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentDeviceId</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">videoDevices</span>[<span class=\"number\">0</span>].<span class=\"property\">deviceId</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">videoDevices</span>[<span class=\"number\">0</span>].<span class=\"property\">label</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> constraints = &#123; <span class=\"attr\">audio</span>: <span class=\"literal\">false</span>, <span class=\"attr\">video</span>: &#123; <span class=\"attr\">deviceId</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">currentDeviceId</span> ? &#123; <span class=\"attr\">exact</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">currentDeviceId</span> &#125; : <span class=\"literal\">undefined</span>, <span class=\"attr\">width</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">videoWidth</span>, <span class=\"attr\">height</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">videoHeight</span>, <span class=\"attr\">transform</span>: <span class=\"string\">&#x27;scaleX(-1)&#x27;</span> &#125; &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(constraints).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;srcObject&#x27;</span> <span class=\"keyword\">in</span> _this.<span class=\"property\">thisVideo</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          _this.<span class=\"property\">thisVideo</span>.<span class=\"property\">srcObject</span> = stream</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          _this.<span class=\"property\">thisVideo</span>.<span class=\"property\">src</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">URL</span>.<span class=\"title function_\">createObjectURL</span>(stream)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        _this.<span class=\"property\">thisVideo</span>.<span class=\"property\">onloadedmetadata</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          _this.<span class=\"property\">thisVideo</span>.<span class=\"title function_\">play</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getVideoDevices</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> devices = <span class=\"keyword\">await</span> navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">enumerateDevices</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">videoDevices</span> = devices.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">device</span> =&gt;</span> device.<span class=\"property\">kind</span> === <span class=\"string\">&#x27;videoinput&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">videoDevices</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">changeCamera</span>(<span class=\"params\">value</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">currentDeviceId</span> = value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">stopNavigator</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">getCompetence</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">setImage</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      _this.<span class=\"property\">thisContext</span>.<span class=\"title function_\">drawImage</span>(_this.<span class=\"property\">thisVideo</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, _this.<span class=\"property\">videoWidth</span>, _this.<span class=\"property\">videoHeight</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> image = <span class=\"variable language_\">this</span>.<span class=\"property\">thisCancas</span>.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&#x27;image/png&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      _this.<span class=\"property\">imgSrc</span> = image</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;refreshDataList&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">imgSrc</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">dataURLtoFile</span>(<span class=\"params\">dataurl, filename</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> arr = dataurl.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> mime = arr[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> bstr = <span class=\"title function_\">atob</span>(arr[<span class=\"number\">1</span>])</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> n = bstr.<span class=\"property\">length</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> u8arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(n)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">while</span> (n--) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        u8arr[n] = bstr.<span class=\"title function_\">charCodeAt</span>(n)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([u8arr], filename, &#123; <span class=\"attr\">type</span>: mime &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">stopNavigator</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">thisVideo</span>?.<span class=\"property\">srcObject</span>?.<span class=\"title function_\">getTracks</span>()?.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">track</span> =&gt;</span> track.<span class=\"title function_\">stop</span>())</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">cleanImage</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">imgSrc</span> = <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">thisVideo</span> = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"><span class=\"selector-class\">.camera_outer</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"attribute\">position</span>: relative;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"attribute\">overflow</span>: hidden;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../../assets/img/user_0608_04.png&quot;</span>) no-repeat center;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-tag\">video</span>,</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-tag\">canvas</span>,</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.tx_img</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    -moz-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleX</span>(-<span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleX</span>(-<span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    -o-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleX</span>(-<span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleX</span>(-<span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.btn_camera</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">position</span>: absolute;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">4px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">text-align</span>: center;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.bg_r_img</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">position</span>: absolute;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.img_bg_camera</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">position</span>: absolute;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">height</span>: fit-content;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"selector-class\">.img_btn_camera</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">position</span>: absolute;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">text-align</span>: center;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      <span class=\"selector-class\">.loding_img</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["vue2"]},{"title":"pinia的使用方法","url":"/2024/08/28/Vue/pinia%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"<h1 id=\"安装-Pinia\"><a href=\"#安装-Pinia\" class=\"headerlink\" title=\"安装 Pinia\"></a>安装 Pinia</h1><p><a href=\"https://pinia.vuejs.org/zh/core-concepts/\">Pinia</a>      <a href=\"https://cn.vitejs.dev/\">Vite</a></p>\n<p><code>pinia只支持vue项目</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i  pinia</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用-Pinia\"><a href=\"#使用-Pinia\" class=\"headerlink\" title=\"使用 Pinia\"></a>使用 Pinia</h1><p><code>在vue项目中导入pinia</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 导入pinia</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建pinia实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pinia = <span class=\"title function_\">createPinia</span>()</span><br><span class=\"line\"><span class=\"comment\">// 挂载到 Vue实例</span></span><br><span class=\"line\">onst app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(pinia)</span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"options-API\"><a href=\"#options-API\" class=\"headerlink\" title=\"options API\"></a>options API</h1><blockquote>\n<p>在选项式写法中：this 指的是 store 实例, 可以通过 this.state 访问 state<br>组合式写法中：setup中没有 this 是 undefined</p>\n</blockquote>\n<p><code>创建 store 文件夹</code></p>\n<p><code>创建index.ts 文件</code></p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 1.定义容器 </span></span><br><span class=\"line\"><span class=\"comment\">// 参数1：容器的 ID，必须唯一，将来 Pinia 会把所有的容器挂载到根容器</span></span><br><span class=\"line\"><span class=\"comment\">// 参数2：选线对象(里面的各个模块)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值：一个函数，调用得到容器的实例</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useMainStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;mian&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于组件的 data，用来存储全局状态的</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.必须实函数：这样是为了在服务端渲染的时候避免交叉请求导致的数据状态污染</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.必须是箭头函数：这是为了更好的 TS 类型推导</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">state</span>:<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">foo</span>:<span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"attr\">count</span>:<span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"attr\">arr</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于组件的 computed，用来封装计算属性，有缓存的功能</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于组件的 methods，封装业务逻辑，修改 state数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意 不能使用箭头函数定义 actions 因为箭头函数绑定外部this</span></span><br><span class=\"line\">    <span class=\"attr\">actions</span>:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2.使用容器中的 state</span></span><br><span class=\"line\"><span class=\"comment\">// 3.修改 state</span></span><br><span class=\"line\"><span class=\"comment\">// 4.容器中的 action 的使用</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>模板中使用</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;templte&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; mainStore.count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; mainStore.foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/hr&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/templte&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123;useMainStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> mianStore = <span class=\"title function_\">useMainStore</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">// 这是有问题的，因为这样拿到的数据不是响应式的，是一次性的</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">// Pinia 其实就是把 state 数据都做了 reactive 处理了</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">// const &#123; count, foo &#125; = mainStore</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">// 解决方法 toRefs 或者是 storeToRefs</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">cosnt &#123;count, foo&#125; = <span class=\"title function_\">storeToRefs</span>(mainStore)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">cosnt handleClick = <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 方式一：对每个数据进行单个修改</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\tmainStore.<span class=\"property\">count</span>++</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    mainStore.<span class=\"property\">foo</span>++</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 方式二：如果需要修改多个数据，建议使用 $patch 批量更新</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    mainStore.$patch(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">count</span>: mainStore.<span class=\"property\">count</span>+<span class=\"number\">1</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;hello&#x27;</span>，</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">arr</span>: [...mainStore.<span class=\"property\">arr</span>,<span class=\"number\">4</span>] </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 方式三：更好的批量更新方式：$patch 一个函数,批量更新</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    mainStore.$patch(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\tstate.<span class=\"property\">count</span>++,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        state.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;hello&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        state.<span class=\"property\">arr</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 方式四：逻辑比较多的时候可以封装都 actions 做处理</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\tmainStore.<span class=\"title function_\">changeState</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"comment\">/* actions:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t * changeState() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t * \t   this.count++</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t * \t   this.foo = &#x27;foo&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t * \t   this.arr.push(4)</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t *\t   this.$patch(&#123;&#125;)</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t *     this.$patch(state=&gt;&#123;&#125;)</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t * &#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">\t */</span>\t</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"comment\">// patch 和普通多次修改的区别是什么，按理来说多次修改也是批量修改</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"comment\">// patch 是一次改变所有数据在更新一次视图 而changeState这种每次修改数据都要更新一次视图</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 函数接受一个可选参数：state 状态对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 方式一：传入state</span></span><br><span class=\"line\">    <span class=\"title function_\">count</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count 调用了&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state.<span class=\"property\">count</span> + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这样也可以但是不推荐</span></span><br><span class=\"line\">    <span class=\"comment\">// count() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;count 调用了&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">//  return this.count + 10</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方式二：不传入state</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果在 getters 中使用了 this 则必须手动返回指定返回值的类型，否则类型推导不出来</span></span><br><span class=\"line\">    <span class=\"title function_\">count</span>():number &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count 调用了&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"composition-API\"><a href=\"#composition-API\" class=\"headerlink\" title=\"composition API\"></a><strong>composition API</strong></h1><h2 id=\"创建仓库-1\"><a href=\"#创建仓库-1\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p><code>store/counter.ts</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCounterStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;counter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>App.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useCounterStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/counter&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// store 中有 counter 中 return 的状态和函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">useCounterStore</span>()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    App</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进行状态管理\"><a href=\"#进行状态管理\" class=\"headerlink\" title=\"进行状态管理\"></a>进行状态管理</h2><p><code>counter.ts</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCounterStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;counter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// state</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">  <span class=\"comment\">// getters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> doubleCount = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> count.<span class=\"property\">value</span> * <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"comment\">// actions</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">update</span> = (<span class=\"params\"></span>) =&gt; count.<span class=\"property\">value</span>++</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">asyncUpdate</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      count.<span class=\"property\">value</span>++</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; count, doubleCount, update, asyncUpdate &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用数据和修改数据的方法\"><a href=\"#使用数据和修改数据的方法\" class=\"headerlink\" title=\"使用数据和修改数据的方法\"></a>使用数据和修改数据的方法</h2><p><code>App.vue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useCounterStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/counter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// store 中有 counter 中 return 的状态和函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">useCounterStore</span>()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    APP &#123;&#123; store.count &#125;&#125; &#123;&#123; store.doubleCount &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;store.update()&quot;</span>&gt;</span>count++<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;store.asyncUpdate()&quot;</span>&gt;</span>async update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"storeToRefs\"><a href=\"#storeToRefs\" class=\"headerlink\" title=\"storeToRefs\"></a>storeToRefs</h2><p><strong>使用 storeToRefs 解决解构仓库状态丢失响应式的问题</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; storeToRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCounterStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/counter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store 中有 counter 中 return 的状态和函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">useCounterStore</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; count, doubleCount &#125; = <span class=\"title function_\">storeToRefs</span>(store)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; update, asyncUpdate &#125; = store</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    APP &#123;&#123; count &#125;&#125; &#123;&#123; doubleCount &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;update&quot;</span>&gt;</span>count++<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;asyncUpdate&quot;</span>&gt;</span>async update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vuex-和-Pinia-的主要区别\"><a href=\"#Vuex-和-Pinia-的主要区别\" class=\"headerlink\" title=\"Vuex 和 Pinia 的主要区别\"></a>Vuex 和 Pinia 的主要区别</h1><ul>\n<li><p>体积大小：Vuex 核心有 state、mutations、actions、getters和modules。而 Pinia 则更简单，去除了modules 和 mutations，更加轻量化、更适用中小型项目</p>\n</li>\n<li><p>调试：vuex支持时间快照，在调试工具中可以看到mutations修改state数据的记录，并且可以回到对应的历史状态</p>\n</li>\n<li><p>状态组织：在 Vuex 中，所有的状态都被组织在一个大的单一对象中。而在 Pinia 中，每个 store 都是一个独立的状态容器，这使得状态更容易组织和管理</p>\n</li>\n<li><p>类型安全：Pinia 有更好的 TypeScript 支持，因此如果你使用 TypeScript，Pinia 可能会更适合你</p>\n</li>\n<li><p>开发工具支持：虽然 Vuex 和 Pinia 都支持 Vue.js 开发工具，但 Pinia 提供了一些更多的内置功能</p>\n</li>\n<li><p>服务器端渲染支持：Pinia 对服务器端渲染（SSR）提供了内置支持</p>\n</li>\n<li><p>兼容性：Vuex 和 Pinia 都支持 Vue 2 和 Vue 3</p>\n</li>\n</ul>\n","categories":["Vue"],"tags":["pinia","vue"]},{"title":"vuex的使用方法","url":"/2024/08/06/Vue/vuex%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"<h1 id=\"Vuex-是什么\"><a href=\"#Vuex-是什么\" class=\"headerlink\" title=\"Vuex 是什么\"></a>Vuex 是什么</h1><p><a href=\"https://vuex.vuejs.org/zh/\">Vuex</a> 是一个专为 Vue.js 应用程序开发的全局状态管理库，采用集中式存储管理应用的所有组件的状态，解决多组件数据通信</p>\n<ol>\n<li>Vue 官方搭配，专属使用 (类似于：vue-router)，有专门的调试工具</li>\n<li>集中式状态方案（操作更简洁）<code>data() &#123; return &#123; 数据, 状态 &#125;&#125;</code></li>\n<li>数据变化是可预测的（响应式）</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240822151237594.png\" alt=\"image-20240822151237594\"></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><blockquote>\n<p>在vuex 中this 指的是 store 实例, 可以通过 this.state 访问 state</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span> (state) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/index.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">store</span>: store,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><h2 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h2><ul>\n<li>在组件中，通过 <code>this.$store.state.属性名</code> 来访问</li>\n<li>在模板中，可以省略 <code>this</code>，直接写成：<code>&#123;&#123;$store.state.属性名&#125;&#125;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title function_\">store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state 是定义响应式数据的地方</span></span><br><span class=\"line\">  <span class=\"comment\">// state: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     属性名：属性值</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 推荐</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        属性名：属性值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><ul>\n<li>在组件中通过 <code>this.$store.getters.getter的名字</code> 来访问</li>\n<li>在模板中，可以省略 <code>this</code>，直接写成：<code>&#123;&#123;$store.getters.getter的名字&#125;&#125;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title function_\">store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略其他...</span></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state 就是上边定义的公共数据state</span></span><br><span class=\"line\">      getter的名字<span class=\"number\">1</span>: <span class=\"keyword\">function</span> (<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> 要返回的值</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><p>mutations 中的每一项都是一个函数，每个函数有两个形参</p>\n<ul>\n<li>第一个参数表示当前的 state，Vuex 内部传入的</li>\n<li>第二个参数表示载荷，表示在调用 mutation 时传入的实参</li>\n</ul>\n<p>调用方式</p>\n<ul>\n<li>在组件中使用 this.$store.commit(‘mutations的名字’, 参数)</li>\n<li>在 actions 中通过 context.commit(‘mutations的名字’, 参数)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他</span></span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 每一项都是一个函数，可以声明两个形参</span></span><br><span class=\"line\">      mutation名<span class=\"number\">1</span>: <span class=\"keyword\">function</span>(<span class=\"params\">state, 载荷</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutation名<span class=\"number\">2</span>: <span class=\"keyword\">function</span>(<span class=\"params\">state, 载荷</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><ul>\n<li>在组件中通过 <code>this.$store.dispatch(&#39;actions的名字&#39;, 参数)</code></li>\n<li>在模板中，可以省略 <code>this</code>，直接写成：<code>&#123;&#123;$store.dispatch.actions的名字&#125;&#125;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title function_\">store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略其他...</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// context对象会自动传入，它与store实例具有相同的方法和属性</span></span><br><span class=\"line\">    action的名字: <span class=\"keyword\">function</span> (<span class=\"params\">context, 载荷</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 发异步请求，请求数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. commit调用mutation来修改数据</span></span><br><span class=\"line\">        <span class=\"comment\">// context.commit(&#x27;mutation名&#x27;, 载荷)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// action的名字: function (&#123;context&#125;, 载荷) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     commit(&#x27;mutation名&#x27;, 载荷)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h2><p>问题导入：</p>\n<ul>\n<li>随着项目越来越大，需要放在 vuex 中的数据越来越多，整个 store&#x2F;index.js 中代码会越来越长，怎么办呢？</li>\n</ul>\n<p>modules 的作用：</p>\n<ul>\n<li>拆分模板，把复杂的场景按模块来拆开</li>\n</ul>\n<h3 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state: 用来保存所有的公共数据</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    模块名<span class=\"number\">1</span>：&#123;</span><br><span class=\"line\">      <span class=\"comment\">// namespaced 为 true，则在使用 mutations 时，就必须要加上模块名</span></span><br><span class=\"line\">      <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">modules</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    模块名<span class=\"number\">2</span>：&#123;</span><br><span class=\"line\">      <span class=\"comment\">// namespaced不写，默认为 false，则在使用mutations时，不需要加模块名</span></span><br><span class=\"line\">      <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">modules</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>也可以更进一步对文件进行拆分</p>\n<p>|–store &#x2F;<br>|——- index.js # 引入模块<br>|——- modules<br>|————– &#x2F; mod1.js # 模块1<br>|————– &#x2F; mod2.js # 模块2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模块名1</span></span><br><span class=\"line\">\tmod1.<span class=\"property\">js</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 模块名2</span></span><br><span class=\"line\">\tmod2.<span class=\"property\">js</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"语法调整\"><a href=\"#语法调整\" class=\"headerlink\" title=\"语法调整\"></a>语法调整</h3><ul>\n<li>访问模块中的数据，要加上模块名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取数据项： &#123;&#123;$store.<span class=\"property\">state</span>.模块名.数据项名&#125;&#125;</span><br><span class=\"line\">获取getters：&#123;&#123;$store.<span class=\"property\">getters</span>[<span class=\"string\">&#x27;模块名/getters名&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>访问模块中的 mutations&#x2F;actions</strong></p>\n<blockquote>\n<p>如果 namespaced 为 true，则需要额外去补充模块名<br>如果 namespaced 为 false，则不需要额外补充模块名</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;mutations名&#x27;</span>) <span class=\"comment\">// namespaced为false</span></span><br><span class=\"line\">$store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;模块名/mutations名&#x27;</span>) <span class=\"comment\">// namespaced为true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用了 modules 之后，在访问数据时就要额外添加 modules 的名字了</p>\n<p>结论：在使用 modules 时，建议都给加上 namespaced!</p>\n<h3 id=\"结构优化\"><a href=\"#结构优化\" class=\"headerlink\" title=\"结构优化\"></a>结构优化</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/module1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> module1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> module1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/module2.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> module2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> module2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> module1 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./modules/module1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> module2 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./modules/module2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    module1,</span><br><span class=\"line\">    module2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h1><h2 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h2><ul>\n<li>直接使用：<code>this.$store.state.state属性名</code></li>\n</ul>\n<p><code>映射 辅助函数mapState</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 导入辅助函数mapState，它是在vuex中定义的一个工具函数</span></span><br><span class=\"line\"><span class=\"comment\">// ES6 按需导入 import &#123; mapState &#125; from &#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 说明1：...对象 是把对象展开，合并到computed</span></span><br><span class=\"line\">  <span class=\"comment\">// 说明2：mapState是一个函数</span></span><br><span class=\"line\">  <span class=\"comment\">//  [&#x27;数据项1&#x27;， &#x27;数据项2&#x27;]</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;state属性名&#x27;</span>])，</span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>(&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;state属性名&#x27;</span>&#125;) <span class=\"comment\">// 改名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用辅助函数后：this.state属性名</li>\n</ul>\n<h2 id=\"mapGetters\"><a href=\"#mapGetters\" class=\"headerlink\" title=\"mapGetters\"></a>mapGetters</h2><ul>\n<li>直接使用：<code>this.$store.getters.getters名字</code></li>\n</ul>\n<p><code>mapGetters 辅助函数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">      ...<span class=\"title function_\">mapGetters</span>([<span class=\"string\">&#x27;getters名字&#x27;</span>]),</span><br><span class=\"line\">      ...<span class=\"title function_\">mapGetters</span>(&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;getters名字&#x27;</span>&#125;) <span class=\"comment\">// 改名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用辅助函数后：this.getters名字</li>\n</ul>\n<h2 id=\"mapMutations\"><a href=\"#mapMutations\" class=\"headerlink\" title=\"mapMutations\"></a>mapMutations</h2><ul>\n<li>直接使用：<code>this.$store.commit(&#39;mutation名&#39;, 参数)</code></li>\n</ul>\n<p><code>mapMutations 辅助函数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;mutation名&#x27;</span>]),</span><br><span class=\"line\">        ...<span class=\"title function_\">mapMutations</span>(&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;mutation名&#x27;</span>&#125;) <span class=\"comment\">// 改名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用辅助函数后：this.mutation名</li>\n</ul>\n<h2 id=\"mapActions\"><a href=\"#mapActions\" class=\"headerlink\" title=\"mapActions\"></a>mapActions</h2><ul>\n<li>直接使用：<code>this.$store.dispatch(&#39;action名&#39;, 参数)</code></li>\n</ul>\n<p><code>mapActions 辅助函数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;actions名&#x27;</span>]),</span><br><span class=\"line\">        ...<span class=\"title function_\">mapActions</span>(&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;actions名&#x27;</span>&#125;) <span class=\"comment\">// 改名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用辅助函数后：this.actions名</li>\n</ul>\n<h1 id=\"moudle访问指定模块\"><a href=\"#moudle访问指定模块\" class=\"headerlink\" title=\"moudle访问指定模块\"></a>moudle访问指定模块</h1><p><code>开启namespaced ： namespaced: true</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240822094816598.png\"></p>\n<p>2.namespaced语法变化</p>\n<p>原始语法</p>\n<ul>\n<li>全局的：指的是 store&#x2F;index.js里面的 state、mutations、actions</li>\n<li>模块的：指的是模块内部的 state、mutations、actions</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state</span></span><br><span class=\"line\">全局的: $store.<span class=\"property\">state</span>.数据项名</span><br><span class=\"line\">模块的: $store.<span class=\"property\">state</span>.模块名.数据项名</span><br><span class=\"line\"><span class=\"comment\">//getters</span></span><br><span class=\"line\">全局的： $store.<span class=\"property\">getters</span>.<span class=\"property\">getter</span>名</span><br><span class=\"line\">模块的： $store.<span class=\"property\">getters</span>[<span class=\"string\">&#x27;模块名/getters名&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//mutations</span></span><br><span class=\"line\">全局的: $store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;mutations名&#x27;</span>,载荷) </span><br><span class=\"line\">模块的: $store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;模块名/mutations名&#x27;</span>,载荷)</span><br><span class=\"line\"><span class=\"comment\">//actions</span></span><br><span class=\"line\">全局的: $store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;actions名&#x27;</span>,载荷) </span><br><span class=\"line\">模块的: $store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;模块名/actions名&#x27;</span>,载荷)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"state-1\"><a href=\"#state-1\" class=\"headerlink\" title=\"state\"></a>state</h2><ul>\n<li>直接使用：<code>this.$store.state.模块名.xxx</code></li>\n<li>map 辅助函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;xxx&#x27;</span>]),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"getters-1\"><a href=\"#getters-1\" class=\"headerlink\" title=\"getters\"></a>getters</h2><ul>\n<li>直接使用：<code>this.$store.getters.模块名.xxx</code></li>\n<li>map 辅助函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;xxx&#x27;</span>]),</span><br><span class=\"line\">        ...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mutations-1\"><a href=\"#mutations-1\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><ul>\n<li>直接使用：<code>this.$store.commit(&#39;模块名/mutation名&#39;, 参数)</code></li>\n<li>map 辅助函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;xxx&#x27;</span>]),</span><br><span class=\"line\">        ...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"actions-1\"><a href=\"#actions-1\" class=\"headerlink\" title=\"actions\"></a>actions</h2><ul>\n<li>直接使用：<code>this.$store.dispatch(&#39;模块名/action名&#39;, 参数)</code></li>\n<li>map 辅助函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;xxx&#x27;</span>]),</span><br><span class=\"line\">        ...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>辅助函数语法</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state</span></span><br><span class=\"line\">全局的: ...<span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;数据项名&#x27;</span>])</span><br><span class=\"line\">模块的: ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;数据项名&#x27;</span>])</span><br><span class=\"line\">更改属性名: ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, &#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//getters</span></span><br><span class=\"line\">全局的: ...<span class=\"title function_\">mapGetters</span>([<span class=\"string\">&#x27;数据项名&#x27;</span>])</span><br><span class=\"line\">模块的: ...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;数据项名&#x27;</span>])</span><br><span class=\"line\">更改属性名: ...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//mutations</span></span><br><span class=\"line\">全局的: ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;mutaion名&#x27;</span>])</span><br><span class=\"line\">模块的: ...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;mutaion名&#x27;</span>])</span><br><span class=\"line\">更改属性名: ...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//actions</span></span><br><span class=\"line\">全局的: ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;action名&#x27;</span>])</span><br><span class=\"line\">模块的: ...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;模块名&#x27;</span>, [<span class=\"string\">&#x27;action名&#x27;</span>])</span><br><span class=\"line\">更改属性名: ...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;模块名&#x27;</span>,&#123;<span class=\"string\">&#x27;新名字&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"vuex-persistedstate-持久化\"><a href=\"#vuex-persistedstate-持久化\" class=\"headerlink\" title=\"vuex-persistedstate 持久化\"></a>vuex-persistedstate 持久化</h1><p><strong>下载插件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save vuex-persistedstate@3.2.1</span><br></pre></td></tr></table></figure>\n\n<p><strong>在vuex中配置插件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 导入持久化插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> creteState <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex-persistedstate&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//配置持久化存储数据的 vuex 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">creteState</span>()],</span><br><span class=\"line\">  <span class=\"comment\">//1.state:存储数据</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 登录成功之后的 token 值</span></span><br><span class=\"line\">    <span class=\"attr\">token</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//2.mutations:更新数据</span></span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//更新 token</span></span><br><span class=\"line\">    <span class=\"title function_\">updateToken</span>(<span class=\"params\">state, newToken</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">token</span> = newToken</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//3.actions: 异步更新数据</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"子模块访问根节点\"><a href=\"#子模块访问根节点\" class=\"headerlink\" title=\"子模块访问根节点\"></a>子模块访问根节点</h1><h2 id=\"state-2\"><a href=\"#state-2\" class=\"headerlink\" title=\"state\"></a>state</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">someData</span>: <span class=\"string\">&#x27;ModuleA data&#x27;</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someRootData</span>(<span class=\"params\">state, getters, rootState</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootState.<span class=\"property\">someRootData</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someRootData</span>: <span class=\"string\">&#x27;Root data&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"getters-2\"><a href=\"#getters-2\" class=\"headerlink\" title=\"getters\"></a>getters</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someRootGetter</span>(<span class=\"params\">state, getters, rootState, rootGetters</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootGetters.<span class=\"property\">someRootGetter</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someRootGetter</span>: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Root getter value&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>带参数的 getters</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Charlie&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过返回一个函数，使得 getter 可以接收参数</span></span><br><span class=\"line\">    <span class=\"attr\">getUserById</span>: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"property\">users</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.<span class=\"property\">id</span> === id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">user</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传递用户 ID 作为参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>.<span class=\"title function_\">getUserById</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 返回 &#123; id: 2, name: &#x27;Bob&#x27; &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在任何需要的地方</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = store.<span class=\"property\">getters</span>.<span class=\"title function_\">getUserById</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user) <span class=\"comment\">// 输出: &#123; id: 2, name: &#x27;Bob&#x27; &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"actions-2\"><a href=\"#actions-2\" class=\"headerlink\" title=\"actions\"></a>actions</h2><blockquote>\n<p>调用根模块的 action 并传递参数 dispatch(‘根模块actions名’, payload, { root: true })</p>\n</blockquote>\n<p><strong>在子模块的 actions 中访问根模块的 state 和 getters</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someAction</span>(<span class=\"params\">&#123; state, commit, rootState, rootGetters &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rootState.<span class=\"property\">someRootData</span>) <span class=\"comment\">// 访问根模块的 state</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rootGetters.<span class=\"property\">someRootGetter</span>) <span class=\"comment\">// 访问根模块的 getters</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 调用根模块的 action</span></span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;someRootAction&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someRootData</span>: <span class=\"string\">&#x27;Root data&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someRootGetter</span>: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"string\">&#x27;Root getter value&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>在子模块的 actions 中调用根模块的 mutations 和 actions</strong></p>\n<blockquote>\n<p>调用根模块的 mutations 并传递参数 commit(‘根模块mutations名’, 参数, { root: true })</p>\n</blockquote>\n<h2 id=\"mutations-2\"><a href=\"#mutations-2\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someAction</span>(<span class=\"params\">&#123; commit, dispatch &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用根模块的 mutation null 向someRootMutation 传递的参数</span></span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;someRootMutation&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someRootMutation</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Root mutation called&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">someRootAction</span>(<span class=\"params\">&#123; commit &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Root action called&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>vuex中有哪些配置项（核心概念）作用是什么</p>\n<ul>\n<li>state作用： 负责存储数据</li>\n<li>getters作用：state计算属性(有缓存)</li>\n<li>mutaions作用：负责同步更新state数据<ul>\n<li>mutaions是唯一可以修改state数据的方式</li>\n</ul>\n</li>\n<li>actions作用：负责异步操作，例如发送网络请求，将请求到的数据通过commit触发mutaions来修改state</li>\n<li>modules作用：负责模块化管理vuex数据</li>\n</ul>\n<p><strong>如果直接在页面中或者actions中修改state里面的数据报错吗？</strong><br><code>不会，但是直接修改 state 的代码无法被 Vuex 的调试工具（如 Vue DevTools）正确追踪和记录，难以调试应用中的问题</code><br><code>如果你在异步操作中直接修改了 state，可能导致状态不一致，因为异步操作可能在不同的时间段触发多次状态修改</code></p>\n<p><strong>什么情况下只能通过mutations修改state</strong></p>\n<p><code>开启vuex 严格模式，如果使用其他方式更改state会报错</code></p>\n<blockquote>\n<p>严格模式主要用于开发环境，它可以帮助你确保所有状态修改都遵循 Vuex 的最佳实践。通过捕捉不合法的状态修改，可以在开发早期发现潜在的错误，避免难以调试的状态管理问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">strict</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 开启严格模式</span></span><br><span class=\"line\">  <span class=\"comment\">// strict: process.env.NODE_ENV !== &#x27;production&#x27; // 生产环境关闭严格模式</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["vue","vuex"]},{"title":"Webpack基础知识","url":"/2024/08/02/Webpack/Webpack/","content":"<blockquote>\n<p>Webpack 是一款模块打包工具，可以将各种静态资源（js、css、图片、字体等）打包成最终发布到生产环境的资源。以下是一个简单的 Webpack 配置教程，供参考</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Webpack 可以通过 npm 来安装，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>Webpack 的配置文件是一个 JS 模块，模块导出一个包含配置信息的对象</p>\n<blockquote>\n<p>以下是一个简单的配置文件</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"string\">&#x27;@babel/preset-react&#x27;</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">hmr</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">reloadAll</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;sass-loader&#x27;</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;file-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.css&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是一个包含了常用配置的 Webpack 配置文件，其中：</p>\n<ul>\n<li><p><code>entry</code> 表示入口文件，可以是字符串、数组或对象</p>\n</li>\n<li><p><code>output</code> 表示输出文件的配置，包括 <code>filename</code>（输出的文件名）和 <code>path</code>（输出的路径）</p>\n</li>\n<li><pre><code>module.rules\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">  表示处理各种资源类型的规则，其中：</span><br><span class=\"line\"></span><br><span class=\"line\">  - `test` 表示该规则适用的资源类型（可以是正则表达式或者字符串）</span><br><span class=\"line\">  - `use` 表示使用哪些 loader 来处理该类型的资源</span><br><span class=\"line\"></span><br><span class=\"line\">- `plugins` 插件配置，用于扩展 Webpack 功能，如代码压缩、热更新等</span><br><span class=\"line\"></span><br><span class=\"line\">- `devServer` 是开发服务器的配置</span><br><span class=\"line\"></span><br><span class=\"line\">### Loader</span><br><span class=\"line\"></span><br><span class=\"line\">Loader 用于对 Webpack 中的各种资源（如 js、css、图片等）进行编译、转换等操作，是 Webpack 最重要的概念之一。常用的 Loader 如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- `babel-loader` 用于将 ES6+ 代码转为浏览器能够识别的 ES5 代码</span><br><span class=\"line\">- `css-loader` 用于加载 css 文件，并转换为 JS 模块</span><br><span class=\"line\">- `style-loader` 用于将样式代码插入到 HTML 文件中</span><br><span class=\"line\">- `sass-loader` 用于将 Sass/Scss 文件转为 CSS 文件</span><br><span class=\"line\">- `file-loader` 用于加载图片、字体等文件，并将其输出到指定的目录中</span><br><span class=\"line\">- `url-loader` 与 file-loader 类似，但可以将小于阈值的文件转为 Data URL 格式</span><br><span class=\"line\"></span><br><span class=\"line\">### Plugin</span><br><span class=\"line\"></span><br><span class=\"line\">Plugin 用于扩展 Webpack 功能，从而实现一些自动化操作。常用的 Plugin 如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- `html-webpack-plugin` 用于自动生成一个 HTML 文件，并在其中插入打包生成的 js、css 等资源文件</span><br><span class=\"line\">- `clean-webpack-plugin` 用于每次打包前清理打包输出目录</span><br><span class=\"line\">- `mini-css-extract-plugin` 用于将 css 抽离成单独的文件</span><br><span class=\"line\">- `copy-webpack-plugin` 用于将指定的文件或目录复制到打包输出目录中</span><br><span class=\"line\"></span><br><span class=\"line\">### 运行</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过以下命令来启动 Webpack：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nnpx webpack --mode development\n</code></pre>\n</li>\n</ul>\n<pre><code>\n以上命令中，`--mode development` 表示以开发模式运行 Webpack，还支持 `--mode production` 以及 `--mode none` 两种模式\n\n在 Webpack 配置文件中配置好 entry 和 output 字段，并定义好需要使用的 loader 和 plugin，通过执行上述命令即可完成打包，最终在 dist 文件夹下会生成一个 bundle.js 和一个 bundle.css 文件，可以通过 HTML 页面来引入\n</code></pre>\n","categories":["Webpack"],"tags":["webpack","构建工具"]},{"title":"一篇文章学完vue2","url":"/2024/08/22/Vue/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%AD%A6%E5%AE%8Cvue2/","content":"<h1 id=\"Vue基础\"><a href=\"#Vue基础\" class=\"headerlink\" title=\"Vue基础\"></a>Vue基础</h1><h2 id=\"上手vue简单示例\"><a href=\"#上手vue简单示例\" class=\"headerlink\" title=\"上手vue简单示例\"></a>上手vue简单示例</h2><ul>\n<li>想让 Vue 工作，就必须创建一个 Vue 实例，且要传入一个配置对象</li>\n<li>demo 容器里的代码依然符合 html 规范，只不过混入了一些特殊的 Vue 语法</li>\n<li>demo 容器里的代码被称为【Vue模板】</li>\n<li>Vue实例和容器是一一对应的，真实开发中只有一个Vue实例，并且会配合着组件一起使用</li>\n<li>是 Vue 的语法：插值表达式，可以读取到 data 中的所有属性</li>\n<li>一旦 data 中的数据发生改变，那么页面中用到该数据的地方也会自动更新( Vue 实现的响应式)<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入Vue --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>初始vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hello &#123;&#123; name &#125;&#125; !<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> <span class=\"comment\">//阻止vue启动时生成生产提示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> x= <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, <span class=\"comment\">//选择挂载点，指定vue实例为哪个容器服务</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>:&#123; <span class=\"comment\">//data 用于存储数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h2><p>Vue模板语法有2大类:<br>插值语法：<br>  功能：用于解析标签体内容<br>  写法：，xxx是 js 表达式，且可以直接读取到 data 中的所有属性<br>指令语法:<br>  功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…）<br>  举例：v-bind:href&#x3D;“xxx” 或 简写为 :href&#x3D;“xxx”，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>指令语法与插值语法的使用<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;Bing_url&quot;</span>&gt;</span>&#123;&#123;Bing_title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;BaiDu_url&quot;</span>&gt;</span>&#123;&#123;BaiDu_title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> x= <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Bing</span><span class=\"attr\">_title</span>:<span class=\"string\">&#x27;Bing&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">BaiDu</span><span class=\"attr\">_title</span>:<span class=\"string\">&#x27;BaiDu&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Bing</span><span class=\"attr\">_url</span>:<span class=\"string\">&#x27;http://www.bing.com&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">BaiDu</span><span class=\"attr\">_url</span>:<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>Vue中有2种数据绑定的方式：<br>  单向绑定(v-bind)：数据只能从data流向页面<br>  双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data<br>tips:</p>\n<ol>\n<li>双向绑定一般都应用在表单类元素上（如：input、select等）</li>\n<li><code>v-model:value=&#39;&#39;</code> 可以简写为 <code>v-model=&#39;&#39;</code>，因为 v-model 默认收集的就是 value 值<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数据绑定<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;data1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;input type=&quot;text&quot; v-model:value=&quot;data2&quot;&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;data2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> x = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data1</span>:<span class=\"string\">&#x27;单向绑定&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data2</span>:<span class=\"string\">&#x27;双向绑定&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"el与data的数据\"><a href=\"#el与data的数据\" class=\"headerlink\" title=\"el与data的数据\"></a>el与data的数据</h2><p>el 有2种写法<br>  new Vue 时候配置el属性<br>  先创建 Vue 实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定 el 的挂载点<br>data 有2种写法<br>  对象式<br>  函数式（在组件中，data 必须使用函数式）<br>常规定义方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data1</span>:<span class=\"string\">&#x27;单向绑定&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data2</span>:<span class=\"string\">&#x27;双向绑定&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种定义方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 此处函数不能写为箭头函数 ，否则 this 指向 window,如下</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// data:()=&gt;&#123; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data1</span>:<span class=\"string\">&#x27;单向绑定&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data2</span>:<span class=\"string\">&#x27;双向绑定&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  vm.$mount(<span class=\"string\">&#x27;#root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MVVM-模型\"><a href=\"#MVVM-模型\" class=\"headerlink\" title=\"MVVM 模型\"></a>MVVM 模型</h2><p>M：模型(Model) ：data中的数据<br>V：视图(View) ：模板代码<br>VM：视图模型(ViewModel)：Vue实例</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/Vue_MVVM.png\" alt=\"Vue中的MVVM模型视图\"><br>总结：</p>\n<ol>\n<li>Vue构造函数 所管理的 data 函数中所有的属性，最终都会出现在 vm 实例身上</li>\n<li>vm 身上的所有属性 以及 Vue 原型上的所有属性，在 Vue 模板语法中均可以直接使用</li>\n</ol>\n<h2 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h2><h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  Object.defineProperty(obj, prop, descriptor)</span></span><br><span class=\"line\"><span class=\"comment\">    obj：要定义属性的对象。</span></span><br><span class=\"line\"><span class=\"comment\">    prop：要定义或修改的属性的名称</span></span><br><span class=\"line\"><span class=\"comment\">    descriptor：要定义或修改的属性描述符</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Persion</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Persion</span>,<span class=\"string\">&#x27;age&#x27;</span>,&#123; </span><br><span class=\"line\">  <span class=\"comment\">// value:18,</span></span><br><span class=\"line\">  <span class=\"comment\">// writable: true, // 如果为 true，则值可以被修改，否则它是只可读的</span></span><br><span class=\"line\">  <span class=\"comment\">// enumerable: true,// 如果为 true，则表示是可以遍历的，可以在for… .in Object.keys()中枚举出来</span></span><br><span class=\"line\">  <span class=\"comment\">// configurable: true // 如果为 true，则此属性可以被删除，这些特性也可以被修改，否则不可以</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// gte()函数（getter）会在 Persion 对象指定属性被访问时调用，且返回值为指定属性（此处为 age 属性）的值</span></span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Persion.age 被访问了&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// set()函数（setter）会在 Persion 对象指定属性被修改时调用，且会收到具体的修改值</span></span><br><span class=\"line\">  <span class=\"attr\">set</span>:<span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Persion.age 将被修改，值为&#x27;</span>,value);</span><br><span class=\"line\">    number = value</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Persion.age --- &#x27;</span>,<span class=\"title class_\">Persion</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Persion</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Persion</span>)); <span class=\"comment\">// Object.keys() 以数组形式返回参数对象的属性名</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实现简单数据代理\"><a href=\"#实现简单数据代理\" class=\"headerlink\" title=\"实现简单数据代理\"></a>实现简单数据代理</h3><p><strong>单向绑定</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">x</span>:<span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; <span class=\"attr\">y</span>:<span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj2,<span class=\"string\">&#x27;x&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    obj1.<span class=\"property\">x</span> = value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj1.<span class=\"property\">x</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h2><h3 id=\"事件的基本使用\"><a href=\"#事件的基本使用\" class=\"headerlink\" title=\"事件的基本使用\"></a>事件的基本使用</h3><ol>\n<li>使用<code>v-on:xxx</code> 或 语法糖形式：<code>@xxx</code> 绑定事件，其中xxx是事件名,如：<code>&lt;button @click=&quot;show(value)&quot;&gt;点击输出信息&lt;/button&gt;</code></li>\n<li>事件的回调需要配置在 methods 对象中，最终会在 vm 上</li>\n<li>methods 中配置的函数，都是被 Vue 所管理的函数，事件处理函数中的 this 的指向 vm 或 组件实例对象</li>\n<li><code>@click=&quot;show(value)&quot;</code>和<code>@click=&quot;show&quot;</code>效果一致，事件处理函数会默认收到事件信息，如果同时需要事件信息和传递形参，需借助<code>$event</code>,例如：<code>&lt;button @click=&quot;show($event,value)&quot;&gt;点击输出信息&lt;/button&gt;</code><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>事件处理<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;button v-on:click=&quot;show&quot;&gt;点击输出信息&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 语法糖 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span>点击输出信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 传参 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;show1(66)&quot;</span>&gt;</span>点击输出信息2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 传参 并且需要 event 对象 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;show2($event,44)&quot;</span>&gt;</span>点击输出信息3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Hello&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">show</span>(<span class=\"params\">event</span>) &#123;<span class=\"comment\">//默认接收到事件信息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">target</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// Hello</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">show1</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 66</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">show2</span>(<span class=\"params\">event,value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event,value); <span class=\"comment\">// &#x27;event&#x27; , 44</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>Vue中的事件修饰符</p>\n<ol>\n<li>.prevent：阻止默认事件（常用）   原生 —— event.preventDefault()</li>\n<li>.stop：阻止事件冒泡（常用）    原生 —— event.stopPropagation()</li>\n<li>.once：事件只触发一次（常用）</li>\n<li>.capture: 使用事件捕获模式(即内部元素触发的事件先在此处理，然后才交由内部元素进行处理)</li>\n<li>.self: 只当在 event.target 是当前元素自身时触发处理函数</li>\n<li>.passive: 事件默认行为立即执行，无需等待事件回调执行完毕<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">&quot;doThat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h3><p>键盘事件语法糖：<code>@keydown</code>，<code>@keyup</code></p>\n<ol>\n<li>Vue中常用的按键别名：</li>\n</ol>\n<ul>\n<li>回车 &#x3D;&gt; enter</li>\n<li>删除 &#x3D;&gt; delete</li>\n<li>退出 &#x3D;&gt; esc</li>\n<li>空格 &#x3D;&gt; space</li>\n<li>换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</li>\n<li>上  &#x3D;&gt; up </li>\n<li>下  &#x3D;&gt; down </li>\n<li>左  &#x3D;&gt; left </li>\n<li>右  &#x3D;&gt; right</li>\n</ul>\n<ol start=\"2\">\n<li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</li>\n<li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<br> (1). 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br> (2). 配合keydown使用：正常触发事件。</li>\n<li>也可以使用keyCode去指定具体的按键（不推荐）</li>\n<li>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名（不推荐）<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>键盘事件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;showInfo&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;回车确认&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;showInfo&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;回车确认&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.ctrl.y</span>=<span class=\"string\">&quot;showInfo&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;ctrl+y确认&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">showInfo</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><ol>\n<li>在 computed 属性对象中定义计算属性的方法</li>\n<li>在页面中使用来显示计算的结果</li>\n<li>定义：要用的属性不存在，要通过已有属性计算得来。</li>\n<li>原理：底层借助了 <code>Objcet.defineproperty</code> 方法提供的 getter 和 setter。</li>\n<li>计算属性的 get 函数什么时候执行？<br>  (1). 初次读取时会执行一次。<br>  (2). 当依赖的数据发生改变时会被再次调用。</li>\n<li>优势：与 methods 实现相比，内部有缓存机制（复用），效率更高，调试方便。</li>\n<li>备注：<br>  (1). 计算属性最终会出现在vm上，直接读取使用即可。<br>  (2). 如果计算属性要被修改，那必须写set 函数去响应修改，且 set 中要引起计算时依赖的数据发生改变。<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>计算属性案例<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstname&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastname&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">firstname</span>:<span class=\"string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">lastname</span>:<span class=\"string\">&#x27;三&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">fullName</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span> + <span class=\"string\">`-`</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> arr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span> = arr[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span> = arr[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n计算属性的简写方式：（前提：此计算属性不需要被修改）<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以将计算属性写为一个函数形式，此函数当作计算属性的 getter 使用</span></span><br><span class=\"line\">  <span class=\"title function_\">fullName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span> + <span class=\"string\">`-`</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>通过 vm 对象的 $watch() 或 watch 配置来监听指定的属性<br>当被监听的属性变化时, 回调函数自动调用, 进行相关操作<br>监听的属性必须存在，才能进行监听！！!<br>监听的两种写法：<br>  (1). new Vue时传入watch配置<br>  (2). 通过vm.$watch监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">isHost</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">isHost</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让 handler 调用一下</span></span><br><span class=\"line\">\t\t    <span class=\"comment\">//handler什么时候调用？当 isHot 发生改变时。</span></span><br><span class=\"line\">        <span class=\"title function_\">handler</span>(<span class=\"params\">newValue,oldVlaue</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newValue,oldVlaue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">isHost</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$watch(<span class=\"string\">&#x27;isHost&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>, </span><br><span class=\"line\">\t  <span class=\"title function_\">handler</span>(<span class=\"params\">newValue,oldValue</span>)&#123;</span><br><span class=\"line\">\t  \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"深度监听\"><a href=\"#深度监听\" class=\"headerlink\" title=\"深度监听\"></a>深度监听</h3><p><strong>适用与监听引用数据类型</strong></p>\n<ol>\n<li>Vue 中的 watch 默认不监测对象内部值的改变（一层）。</li>\n<li>配置 <code>deep:true</code> 可以监测对象内部值改变（多层），个人理解为监听引用数据类型<br>备注：</li>\n<li>Vue 自身可以监测对象内部值的改变，但 Vue 提供的 watch 默认不可以！</li>\n<li>使用 watch 时根据数据的具体结构，决定是否采用深度监听。<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">  <span class=\"attr\">obj</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 监听多级结构中的某个属性</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;obj.a&#x27;</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue,oldVlaue</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newValue,oldVlaue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 监听多级结构</span></span><br><span class=\"line\">  <span class=\"attr\">obj</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">deep</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//开启深度监听</span></span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue,oldVlaue</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newValue,oldVlaue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"监听属性的简写形式\"><a href=\"#监听属性的简写形式\" class=\"headerlink\" title=\"监听属性的简写形式\"></a>监听属性的简写形式</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>:&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当某个监听属性不需要配置项时，只需要响应者时触发语法糖，vm.$watch 也可以使用语法糖</span></span><br><span class=\"line\">  <span class=\"title function_\">isHost</span>(<span class=\"params\">newValue,oldVlaue</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newValue,oldVlaue);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"computed-和-watch-的区别\"><a href=\"#computed-和-watch-的区别\" class=\"headerlink\" title=\"computed 和 watch 的区别\"></a>computed 和 watch 的区别</h2><ol>\n<li>computed 能完成的功能，watch 都可以完成。</li>\n<li>watch 能完成的功能，computed 不一定能完成，例如：watch 可以进行异步操作，computed 中不能开启异步任务。</li>\n<li>两个重要的小原则：</li>\n</ol>\n<ul>\n<li>所有被 Vue管理的函数，最好写成普通函数，这样 this 的指向才是 vm 或 组件实例对象。</li>\n<li>所有不被 Vue所管理的函数（定时器的回调函数、ajax 的回调函数等、Promise 的回调函数），最好写成箭头函数，这样this 的指向才是 vm 或 组件实例对象。<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        reuturn a + b </span><br><span class=\"line\">        <span class=\"comment\">// return的值交给箭头函数执行 ，箭头函数由浏览器定时器对象调用，非 Vue 示例调用</span></span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">计算属性必须要返回值，侦听属性是依靠给已有属性重新赋值。</span></span><br><span class=\"line\"><span class=\"comment\">异步任务不能使用 return 给外部同步函数返回值，因为是异步的，所以也不能用同步定义的变量接</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动态指定class-style-样式\"><a href=\"#动态指定class-style-样式\" class=\"headerlink\" title=\"动态指定class &amp; style 样式\"></a>动态指定class &amp; style 样式</h2><p>在应用界面中, 某个(些)元素的样式是变化的，class&#x2F;style 绑定就是专门用来实现动态样式效果的技术</p>\n<ol>\n<li>class绑定：<br><code>:class=&#39;xxx&#39; // xxx可以是字符串、对象、数组。</code><br>  字符串  表达式是字符串: <code>&#39;classA&#39;</code>  适用于：类名不确定，要动态获取<br>  对象  表达式是对象: <code>&#123;classA:isA, classB: isB&#125;</code> 适用于：要绑定多个样式，个数不确定，名字也不确定<br>  数组  表达式是数组: <code>[&#39;classA&#39;, &#39;classB&#39;]</code>  适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</li>\n<li>style 绑定：<br><code>:style=&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;</code> ，其中 activeColor&#x2F;fontSize 是 data 属性<br>  对象  <code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code> 其中xxx是动态值。<br>  数组  <code>:style=&quot;[a,b]&quot;</code> 其中a、b是样式对象。<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>动态指定样式<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 绑定样式 —— 字符串写法 适用情况:样式类名不确定 需要追加--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic red&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;login_class&quot;</span>&gt;</span>未登录/注册<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>随机改变样式<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 绑定样式 —— 数组写法 适用情况:样式类名不确定 追加个数也不确定--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;class_arr&quot;</span>&gt;</span>未登录/注册<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 绑定样式 —— 对象写法 适用情况:样式类名确定 个数确定 但动态决定追加--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;class_obj&quot;</span>&gt;</span>未登录/注册<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 绑定内联样式 —— 对象写法 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;h3 :style=&quot;&#123;fontSize: 10+&#x27;px&#x27;&#125;&quot;&gt; 内联样式指定 &lt;/h3&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;style_obj&quot;</span>&gt;</span> 内联样式对象指定 <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 绑定内联样式 —— 数组写法 (极少用)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[style_obj]&quot;</span>&gt;</span> 内联样式数组指定 <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">login_class</span>:<span class=\"string\">&#x27;12&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">class_arr</span>:[<span class=\"string\">&#x27;pink&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">class_obj</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">pink</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">green</span>:<span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">style_obj</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;10px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">login</span>(<span class=\"params\"></span>) &#123;  </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">login_class</span> = <span class=\"string\">&#x27;green&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">demo</span>(<span class=\"params\"></span>) &#123;  </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>,<span class=\"string\">&#x27;pink&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">login_class</span> = arr[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">3</span>)]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"渲染指令\"><a href=\"#渲染指令\" class=\"headerlink\" title=\"渲染指令\"></a>渲染指令</h2><h3 id=\"v-if-v-show\"><a href=\"#v-if-v-show\" class=\"headerlink\" title=\"v-if | v-show\"></a>v-if | v-show</h3><ol>\n<li>v-if<br>语法：</li>\n</ol>\n<ol>\n<li><code>v-if = &#39;表达式&#39;</code></li>\n<li><code>v-else-if = &#39;表达式&#39;</code></li>\n<li><code>v-else = &#39;表达式&#39;</code><br>适用于：切换频率较低的场景<br>特点：不展示的DOM元素直接被移除<br>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”</li>\n</ol>\n<ol start=\"2\">\n<li>v-show<br>语法：<br>  <code>v-show=&#39;表达式&#39;</code><br>适用于：切换频率较高的场景<br>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉(display:none)<br>备注：使用 v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到 v-if 是实打实地改变dom元素，v-show 是隐藏或显示dom元素<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>条件渲染<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- v-show 可以接受布尔值/表达式作为属性值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>&#123;&#123; hello_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;0.1+0.2===0.3&quot;</span>&gt;</span>&#123;&#123; vue_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- v-if 可以接受布尔值/表达式作为属性值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;n==1&quot;</span>&gt;</span>&#123;&#123; hello_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;n==2&quot;</span>&gt;</span>&#123;&#123; hello_name &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;n==3&quot;</span>&gt;</span>&#123;&#123; hello_name &#125;&#125;!!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;n&gt;=3&quot;</span>&gt;</span>&#123;&#123; hello_name &#125;&#125; good<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;n++&quot;</span>&gt;</span>点击变换<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- v-if与template的配合使用  管理多个元素渲染 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;n==1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> x= <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">hello_name</span>:<span class=\"string\">&#x27;Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">vue_name</span>:<span class=\"string\">&#x27;Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">n</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"列表渲染-v-for\"><a href=\"#列表渲染-v-for\" class=\"headerlink\" title=\"列表渲染 | v-for\"></a>列表渲染 | v-for</h3><p>v-for指令，用于展示列表数据<br>语法：<code>v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</code><br>可遍历元素：数组、对象、字符串（用的很少）、指定次数（用的很少）</p>\n<ul>\n<li>组: (item, index)</li>\n<li>象: (value, key)</li>\n<li>符串：(char, index)</li>\n<li>字：(number, index)<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>列表渲染<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 遍历数组 --&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- &lt;ul v-for=&quot;p in persion&quot; :key=&quot;p.id&quot;&gt; --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;p of persion&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;p.id&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;p.name&#125;&#125; ，年龄：&#123;&#123;p.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 遍历对象 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value,key) of persion[0]&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;key&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(char,index) of &#x27;hello&#x27;&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>第&#123;&#123;index&#125;&#125;字母为：&#123;&#123; char &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(char,index) of 4&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;char+index+Math.random()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; char &#125;&#125; ，索引为 &#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> x= <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">persion</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;sk9G2O01avD&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;12&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;k8F4Dl7m&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;34&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;oB5vA0Qmm1p&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;杰克&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;22&#x27;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"key-的作用与原理\"><a href=\"#key-的作用与原理\" class=\"headerlink\" title=\"key 的作用与原理\"></a>key 的作用与原理</h4><p>虚拟DOM中key的作用：<br>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：<br>对比规则：</p>\n<ol>\n<li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<br> ①若虚拟DOM中内容没变, 直接使用之前的真实DOM<br> ②若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>\n<li>旧虚拟DOM中未找到与新虚拟DOM相同的key创建新的真实DOM，随后渲染到到页面。<br>用index作为key可能会引发的问题：</li>\n</ol>\n<ol>\n<li>若对数据进行：<strong>逆序添加、逆序删除</strong>等破坏顺序操作: 会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低</li>\n<li>如果结构中还包含输入类的DOM： 会产生错误DOM更新 &#x3D;&#x3D;&gt;界面有问题<br>开发中如何选择key:</li>\n</ol>\n<ol>\n<li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li>\n<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>\n</ol>\n<h3 id=\"实现列表排序\"><a href=\"#实现列表排序\" class=\"headerlink\" title=\"实现列表排序\"></a>实现列表排序</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>列表排序<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;inputKey&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;检索姓名&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;sortType = 1&quot;</span>&gt;</span>年龄升序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;sortType = 2&quot;</span>&gt;</span>年龄降序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;sortType&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;p of filePersion&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;p.id&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;p.name&#125;&#125; ，年龄：&#123;&#123;p.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">sortType</span>: <span class=\"number\">0</span>, <span class=\"comment\">//0 原顺序 ，1 升序，2 降序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">inputKey</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">persion</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;sk9G2O01avD&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;12&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;k8F4Dl7m&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;34&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;1Ff3lm0G&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;李六&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;54&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;sf3Pd94pf7za&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张九&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;32&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;oB5vA0Qmm1p&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;杰克&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;22&#x27;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">filePersion</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> arr =  <span class=\"variable language_\">this</span>.<span class=\"property\">persion</span>.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">p</span>)=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> p.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">inputKey</span>) &gt;= <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 判断是否需要排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sortType</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">sortType</span> === <span class=\"number\">1</span> ?  p1.<span class=\"property\">age</span>-p2.<span class=\"property\">age</span> : p2.<span class=\"property\">age</span>-p1.<span class=\"property\">age</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> arr</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据监测原理-对象\"><a href=\"#数据监测原理-对象\" class=\"headerlink\" title=\"数据监测原理_对象\"></a>数据监测原理_对象</h3><p>简单模拟vue更新数据原理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;尚硅谷&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>:<span class=\"string\">&#x27;北京&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Observer</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//汇总 data 对象中所有的属性形成一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)</span><br><span class=\"line\">    <span class=\"comment\">//遍历 keys 数组，分别添加 getter 、 setter</span></span><br><span class=\"line\">    keys.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>, k, &#123;</span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj[k]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span><br><span class=\"line\">                obj[k] = val</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个监听的实例对象，用于监听(中转) data 中属性的变化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obs = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(data)\t\t</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obs)\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备一个vm实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = &#123;&#125;</span><br><span class=\"line\">vm.<span class=\"property\">_data</span> = data = obs</span><br></pre></td></tr></table></figure>\n<h3 id=\"Vue-set\"><a href=\"#Vue-set\" class=\"headerlink\" title=\"Vue.set\"></a>Vue.set</h3><blockquote>\n<p>对象中后追加的属性，Vue 默认不做响应式处理，Vue.set() 方法可以给对象添加属性，并触发视图更新。</p>\n</blockquote>\n<p>Vue.set 的使用（两种方式）<br>  方式1：<code>Vue.set(target，propertyName/index，value)</code><br>  方式2：<code>vm.$set(target，propertyName/index，value)</code><br>注意：Vue.set方法也可以对数组（数组是特殊的对象）进行操作，但是不能对data中的根数据进行改变</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 追加属性data对象 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span> = <span class=\"string\">&quot;updataPersion&quot;</span>&gt;</span>更新数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;p of persion&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;p.id&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; p.name &#125;&#125; <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;p.age&quot;</span>&gt;</span>，年龄：&#123;&#123; p.age &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">persion</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;sk9G2O01avD&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;k8F4Dl7m&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;34&#x27;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"title function_\">updataPersion</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"comment\">// Vue.set(this.persion[0],&#x27;age&#x27;,100)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">persion</span>[<span class=\"number\">0</span>],<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">     &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据监测原理-数组\"><a href=\"#数据监测原理-数组\" class=\"headerlink\" title=\"数据监测原理_数组\"></a>数据监测原理_数组</h3><p>vue 监测在数组中没有 getter 和 setter，所以监测不到数据的更改，也不会引起页面的更新。<br>vue 对数组的监测是通过 <strong>包装数组上常用的用于修改数组的方法</strong>来实现的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(n,index) of arr&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; ,<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 通过索引改变原数组是不被允许的  不奏效--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;arr[0]=100&quot;</span>&gt;</span>通过索引改变原数组<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;arr.splice(0,1,100)&quot;</span>&gt;</span>通过数组方法改变原数组<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>通过set()改变原数组<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">age</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">arr</span>,<span class=\"number\">0</span>,<span class=\"number\">200</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>Vue监听数据的原理：</p>\n<ol>\n<li>vue会监听data中所有层次的数据</li>\n<li>如何监测对象中的数据？<br>  通过 setter 实现监听，且要在 new Vue 时就传入要监测的数据。<br>  对象中后追加的属性，Vue 默认不做响应式处理，如需给后添加的属性做响应式，请使用如下API： <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.set(target，propertyName/index，value) </span><br><span class=\"line\">vm.$set(target，propertyName/index，value)</span><br></pre></td></tr></table></figure></li>\n<li>如何监测数组中的数据？<br>  通过包裹数组更新元素的方法实现，本质就是做了两件事：<ol>\n<li>调用原生对应的方法对数组进行更新</li>\n<li>重新解析模板，进而更新页面</li>\n</ol>\n</li>\n<li>在Vue修改数组中的某个元素一定要用如下方法：<br>  使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()<br>  <code>Vue.set()</code> 或 <code>vm.$set()</code><br>  直接替换原数组 如：<code>arr = arr.filter((n)=&gt;&#123;return n!==1&#125;)</code></li>\n<li>特别注意：<code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给 vm 或 vm 的根数据对象 添加属性！！！</li>\n<li>数据劫持：每个数据经过数据代理的过程就叫数据劫持</li>\n</ol>\n<h2 id=\"收集表单数据\"><a href=\"#收集表单数据\" class=\"headerlink\" title=\"收集表单数据\"></a>收集表单数据</h2><ol>\n<li>v-model 默认收集的是被收集元素的 value 值，用户输入即收集 value 值。如 text&#x2F;password&#x2F;email等属性input表单元素 <code>&lt;input type=&quot;text&quot; v-model=&quot;userInfo.account&quot;&gt;</code></li>\n<li>表单元素默认无 value 值的，如 checkbox&#x2F;redio&#x2F;select等属性表单元素，可以手动配置value属性，v-model收集配置属性 <code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;</code></li>\n<li>没有配置 value 属性的表单元素，那么默认收集的就是 checked（勾选 or 未勾选，是布尔值）<code>&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;</code></li>\n<li>v-model 的指定收集元素的初始值会影响 收集的属性配置了 input 的 value 属性<br>  v-model 的初始值是非数组，那么收集的就是 checked（勾选 or 未勾选，是布尔值）<br>  v-model 的初始值是数组，那么收集的的就是 手动配置的 value 组成的数组</li>\n<li>v-model 收集表单元素可以添加修饰符，如<code>v-model.number = &#39;userInfo.age&#39;</code><br> lazy：失去焦点再收集数据<br> number：输入字符串转为有效的数字<br> trim：输入首尾空格过滤<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    账号：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.account&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    性别：</span><br><span class=\"line\">    男 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span> </span><br><span class=\"line\">    女 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;female&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    爱好：</span><br><span class=\"line\">    LOL     <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.hobby&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;lol&quot;</span>&gt;</span> <span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">    原神    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.hobby&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;mihoyo&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    所在服务器：</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.server&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>请选择你的服务器地址<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot; asia &quot;</span>&gt;</span>亚洲<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot; america &quot;</span>&gt;</span>美洲<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot; europe &quot;</span>&gt;</span>欧洲<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    其它信息：</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.other&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;userInfo.agree&quot;</span>&gt;</span> 阅读并接收<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>用户协议<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> x= <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">userInfo</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">account</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">password</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">hobby</span>:[],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">server</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">other</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">agree</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">login</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">userInfo</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"过滤器（了解）\"><a href=\"#过滤器（了解）\" class=\"headerlink\" title=\"过滤器（了解）\"></a>过滤器（了解）</h2><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。<br>语法：</p>\n<ol>\n<li>注册过滤器：<br>全局注册 <code>Vue.filter(name,callback)</code><br>局部注册 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></li>\n<li>使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code> 或 <code>v-bind:属性 = &#39;xxx | 过滤器名&#39;</code><br>备注：</li>\n</ol>\n<ul>\n<li>过滤器也可以接收额外参数、多个过滤器也可以串联</li>\n<li>过滤器并没有改变原本的数据, 是产生新的对应的数据<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>过滤器<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;timeStr&quot;</span>&gt;</span>当前时间为： &#123;&#123; time | timeFormater &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      time</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">filters</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">timeFormater</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> value.<span class=\"title function_\">toLocaleString</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"vue指令\"><a href=\"#vue指令\" class=\"headerlink\" title=\"vue指令\"></a>vue指令</h2><h3 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h3><p>目前vue中的常见内置指令：</p>\n<ul>\n<li>v-bind  : 单项绑定解析表达式 ，语法糖： :xxx</li>\n<li>v-model  : 双向数据绑定</li>\n<li>v-on  : 绑定事件监听 语法糖： @</li>\n<li>v-if  : 条件渲染（动态控制节点是否存在）</li>\n<li>v-else  : 条件渲染（动态控制节点是否存在）</li>\n<li>v-show  : 条件渲染（动态控制节点是否展示）</li>\n<li>v-for  : 遍历数组&#x2F;对象&#x2F;字符串 </li>\n<li>v-text  : 向所在节点渲染指定文本内容</li>\n<li>v-html  : 向所在节点渲染指定标签内容</li>\n<li>v-cloak  : 向所在节点渲染指定文本内容</li>\n<li>v-once  : 向所在节点渲染指定文本内容</li>\n<li>v-pre  : 向所在节点渲染指定文本内容<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- v-text 解析文本--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>你好，<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- v-html 解析标签--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;aStr&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- v-cloak 添加爹play：none属性，vue实例接管容器之后会删除此属性--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-cloak</span>&gt;</span> hello &#123;&#123;name&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- v-once 添加此属性的标签只会在初始动态渲染后，转为为静态属性--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span> number初始值为 &#123;&#123; number &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>number值为 &#123;&#123; number &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;number++&quot;</span>&gt;</span>number++<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- v-pre 添加此属性，vue实例解析模板时会跳过解析阶段 一般用于优化--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-pre</span>&gt;</span> number值为 &#123;&#123; number &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">number</span>:<span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">aStr</span>: <span class=\"string\">`&lt;a href=&quot;javascript:alert(&#x27;XSS攻击成功&#x27;);&quot;&gt;链接标签&lt;/a&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><p>局部指令语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\"><span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">// 配置自定义指令 对象写法</span></span><br><span class=\"line\"><span class=\"attr\">directives</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;自定义指令名&#x27;</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">bind</span>(<span class=\"params\">element, binding</span>)&#123;&#125;,<span class=\"comment\">// 指令与元素成功绑定时（一上来）调用</span></span><br><span class=\"line\">    <span class=\"title function_\">inserted</span>(<span class=\"params\">element, binding</span>)&#123;&#125;,<span class=\"comment\">// 指令所在元素被插入页面时 调用</span></span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"params\">element, binding</span>)&#123;&#125;<span class=\"comment\">// 指令所在的模板被重新解析时 调用 </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 配置自定义指令 语法糖（函数写法），当不需要 指定 inserted 函数 时 。此函数被当作 bind和 update 函数调用</span></span><br><span class=\"line\"><span class=\"comment\">// directives: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#x27;自定义指令名&#x27;:(element,binding) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>配置对象 directives 中常用的3个回调：</p>\n<ul>\n<li>bind：指令与元素成功绑定时调用。</li>\n<li>inserted：指令所在元素被插入页面时调用。</li>\n<li>update：指令所在模板结构被重新解析时调用。</li>\n</ul>\n<p>全局指令的定义方式：<code>Vue.directive(&#39;指令名&#39;,&#123;&#125;)</code> 或者<code>Vue.directive(&#39;指令名&#39;,function() &#123;&#125;)</code><br>注意：</p>\n<ul>\n<li>自定义指令名不要采用驼峰命名法，因采用以下的方式<code>big-number() &#123;&#125;</code>,调用方式<code>&lt;div v-bing-number=&quot;number&quot;&gt;&lt;/div&gt;</code></li>\n<li>指令定义时不使用 v- ，使用时需要添加 <em><strong>v-</strong></em><br>理解这三个的调用时机，需要进一步了解 vue 的生命周期。<br>实例：<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>自定义指令<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;number++&quot;</span>&gt;</span>n++<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bing</span>=<span class=\"string\">&quot;number&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-fbnd</span>=<span class=\"string\">&quot;number&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">number</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">directives</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">bing</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">bind</span>(<span class=\"params\">element,binding</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element,binding);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          element.<span class=\"property\">innerText</span> = binding.<span class=\"property\">value</span>*<span class=\"number\">100</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,<span class=\"comment\">// 指令所在元素 与 Vue实例绑定时 调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">inserted</span>(<span class=\"params\">element, binding</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          element.<span class=\"property\">style</span>.<span class=\"property\">background</span> = <span class=\"string\">&#x27;skyblue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,<span class=\"comment\">// 指令所在元素被插入页面时 调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">update</span>(<span class=\"params\">element, binding</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          element.<span class=\"property\">innerText</span> = binding.<span class=\"property\">value</span>*<span class=\"number\">100</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"comment\">// 指令所在的模板被重新解析时 调用 </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">fbnd</span>(<span class=\"params\">element, binding</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        element.<span class=\"property\">innerText</span> = binding.<span class=\"property\">value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Vue生命周期\"><a href=\"#Vue生命周期\" class=\"headerlink\" title=\"Vue生命周期\"></a>Vue生命周期</h2><p>Vue 实例有⼀个完整的⽣命周期：new Vue()、初始化事件(.once事件)和生命周期、编译模版、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。生命周期函数中的 this 指定 vm 或者组件实例对象<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"生命周期模型图\"></p>\n<ol>\n<li>beforeCreate（创建前）：数据监测(getter和setter)和初始化事件还未开始，此时 data 的响应式追踪、event&#x2F;watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。</li>\n<li>created（创建后）：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el属性。</li>\n<li>beforeMount（挂载前）：在挂载开始之前被调用，相关的render函数首次被调用。此阶段Vue开始解析模板，生成虚拟DOM存在内存中，还没有把虚拟DOM转换成真实DOM，插入页面中。所以网页不能显示解析好的内容。</li>\n<li>mounted（挂载后,<em><strong>常用</strong></em>）：在el被新创建的 vm.$el（就是真实DOM的拷贝）替换，并挂载到实例上去之后调用（将内存中的虚拟DOM转为真实DOM，真实DOM插入页面）。此时页面中呈现的是经过Vue编译的DOM，这时在这个钩子函数中对DOM的操作可以有效，但要尽量避免。一般在这个阶段进行: <em><strong>开启定时器，发送网络请求，订阅消息，绑定自定义事件 等</strong></em></li>\n<li>beforeUpdate（更新前）：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染（数据是新的，但页面是旧的，页面和数据没保持同步呢）。</li>\n<li>updated（更新后） ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</li>\n<li>beforeDestroy（销毁前,<em><strong>常用</strong></em>）：实例销毁之前调用。这一步，实例仍然完全可用，this 仍能获取到实例。在这个阶段一般进行: <em><strong>关闭定时器，取消订阅消息，解绑自定义事件 等</strong></em>。</li>\n<li>destroyed（销毁后）：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。</li>\n</ol>\n<p><strong>父子组件生命周期顺序:</strong></p>\n<ul>\n<li><code>创建阶段</code>：父组件beforeCreate -&gt; 父组件created -&gt; 父组件beforeMount -&gt; 子组件beforeCreate -&gt; 子组件created -&gt; 子组件beforeMount -&gt; 子组件mounted -&gt; 父组件mounted</li>\n<li><code>更新阶段</code>：父组件beforeUpdate -&gt; 子组件beforeUpdate -&gt; 子组件updated -&gt; 父组件updated</li>\n<li><code>销毁阶段</code>：父组件beforeDestroy -&gt; 子组件beforeDestroy -&gt; 子组件destroyed -&gt; 父组件destroyed</li>\n</ul>\n<h1 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h1><p>Vue中使用组一个文件的三大步骤：</p>\n<ul>\n<li>定义组件(创建组件)</li>\n<li>注册组件</li>\n<li>使用组件(写组件标签)</li>\n</ul>\n<h2 id=\"了解组件化开发\"><a href=\"#了解组件化开发\" class=\"headerlink\" title=\"了解组件化开发\"></a>了解组件化开发</h2><h3 id=\"单文件组件和非单文件组件\"><a href=\"#单文件组件和非单文件组件\" class=\"headerlink\" title=\"单文件组件和非单文件组件\"></a>单文件组件和非单文件组件</h3><p>单文件组件：一个文件只包含一个组件（推荐）<br>非单文件组件：一个文件包含n个组件</p>\n<h3 id=\"组件化基本过程\"><a href=\"#组件化基本过程\" class=\"headerlink\" title=\"组件化基本过程\"></a>组件化基本过程</h3><ol>\n<li>创建组件</li>\n<li>注册组件</li>\n<li>使用组件<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tit</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>&#123;&#123;number&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hello</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 1. 利用 Vue.extend() 创建组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> tit = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">con</span>:<span class=\"string\">&quot;组件化基本流程（局部注册）&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t\t&lt;h3&gt;&#123;&#123;con&#125;&#125;&lt;/h3&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &lt;/&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> hel = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t\t&lt;h3&gt;hello world !!!&lt;/h3&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &lt;/&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 3.全局注册 要在创建 vm 实例之前注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;hello&#x27;</span>,hel)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>:&#123; </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">number</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 2. 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      tit</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"组件注意点\"><a href=\"#组件注意点\" class=\"headerlink\" title=\"组件注意点\"></a>组件注意点</h3><p>关于组件名：<br>一个单词组成：<br>  第一种写法(首字母小写)：tit，使用组件:<tit></tit><br>  第二种写法(首字母大写)：Tit ，使用组件:<Tit></Tit><br>多个单词组成：<br>  第一种写法(kebab-case命名)：my-school，使用组件:<my-school></my-school><br>  第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)，使用组件:<MySchool></MySchool><br>备注：<br>(1).组件命名规则之一：不要使用 HTML 中已有的元素名称，例如：h2、H2都不行。<br>(2).可以使用 name 配置项指定组件在开发者工具中呈现的名字。如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tit = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">scholl</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;school&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">template</span>:<span class=\"string\">``</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>关于组件标签:<br>第一种写法：<br>第二种写法：<br>备注：不用使用脚手架时，会导致后续组件不能渲染。<br>一个语法糖：<br><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tit = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">scholl</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;school&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">template</span>:<span class=\"string\">``</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件嵌套\"><a href=\"#组件嵌套\" class=\"headerlink\" title=\"组件嵌套\"></a>组件嵌套</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Tit</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Tit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 1.  创建组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title class_\">Hello</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t&lt;div&gt;&lt;h3&gt;你好 世界 !!!&lt;/h3&gt;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title class_\">Tit</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">con</span>:<span class=\"string\">&quot;Hello Vue !!!&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Hello</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t\t\t&lt;h3&gt;&#123;&#123;con&#125;&#125;&lt;/h3&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;Hello&gt;&lt;/Hello&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">\t\t`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 2. 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Tit</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"VueComponetn\"><a href=\"#VueComponetn\" class=\"headerlink\" title=\"VueComponetn\"></a>VueComponetn</h3><ol>\n<li>各组件本质是一个名为 VueComponent 的构造函数，且不是程序员定义的，是 Vue.extend 生成的。</li>\n<li>我们只需要写组件标签，Vue解析时会帮我们创建组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</li>\n<li>特别注意：每次调用Vue.extend，返回的都是一个 <em><strong>全新的 VueComponent</strong></em> (这个VueComponent可不是实例对象)</li>\n<li>关于this指向：<br>组件配置中：</li>\n</ol>\n<ul>\n<li>data函数、methods中的函数、watch中的函数、<ul>\n<li>computed中的函数 它们的this均是【VueComponent实例对象】。</li>\n</ul>\n</li>\n<li>new Vue(options)配置中：<ul>\n<li>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。</li>\n</ol>\n<h3 id=\"Vue与VueComponent\"><a href=\"#Vue与VueComponent\" class=\"headerlink\" title=\"Vue与VueComponent\"></a>Vue与VueComponent</h3><p>一个重要的内置关系：<code>VueComponent.prototype.proto === Vue.prototype</code><br>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/Vue%E4%B8%8EVueComponent.png\" alt=\"Vue与VueComponent关系\"></p>\n<h3 id=\"单文件组件文件结构\"><a href=\"#单文件组件文件结构\" class=\"headerlink\" title=\"单文件组件文件结构\"></a>单文件组件文件结构</h3><p>单文件组件需要借助脚手架环境<br>main.js 入口文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>:<span class=\"string\">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>:&#123;<span class=\"title class_\">App</span>&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>App.vue 根组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Scholl</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Scholl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> <span class=\"title class_\">School</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./School.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;App&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">component</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">School</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>School.vue 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Scholl</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Scholl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> <span class=\"title class_\">School</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./School.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;App&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">component</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">School</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"脚手架基础\"><a href=\"#脚手架基础\" class=\"headerlink\" title=\"脚手架基础\"></a>脚手架基础</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>安装<code>npm install -g @vue/cli</code><br>创建项目<code>vue create 项目名</code><br>运行项目<code>npm run serve</code></p>\n<h3 id=\"脚手架文件目录\"><a href=\"#脚手架文件目录\" class=\"headerlink\" title=\"脚手架文件目录\"></a>脚手架文件目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── node_modules </span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── favicon.ico: 页签图标</span><br><span class=\"line\">│   └── index.html: 主页面</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── assets: 存放静态资源</span><br><span class=\"line\">│   │   └── logo.png</span><br><span class=\"line\">│   │── component: 存放组件</span><br><span class=\"line\">│   │   └── HelloWorld.vue</span><br><span class=\"line\">│   │── App.vue: 汇总所有组件</span><br><span class=\"line\">│   │── main.js: 入口文件</span><br><span class=\"line\">├── .gitignore: git版本管制忽略的配置</span><br><span class=\"line\">├── babel.config.js: babel的配置文件</span><br><span class=\"line\">├── package.json: 应用包配置文件 </span><br><span class=\"line\">├── README.md: 应用描述文件</span><br><span class=\"line\">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"render函数\"><a href=\"#render函数\" class=\"headerlink\" title=\"render函数\"></a>render函数</h3><p>vue.js与vue.runtime.xxx.js的区别：<br>  vue.js是完整版的Vue，包含：核心功能+模板解析器。<br>  vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。<br>默认使用 vue.runtime.xxx.js ，没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// render: (createElement) =&gt; &#123;return createElement(App)&#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// 简写</span></span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>使用<code>vue inspect &gt; output.js</code>命令可以查看到 脚手架隐藏的 webpack 配置，会生成查看文件 output.js 文件。<br>手动配置 webpack ，使用 文件 vue.config.js <a href=\"https://cli.vuejs.org/zh/config/\">vue.config.js 配置参考</a></p>\n<h3 id=\"ref-属性\"><a href=\"#ref-属性\" class=\"headerlink\" title=\"ref 属性\"></a>ref 属性</h3><p>ref 被用来给元素或子组件注册引用信息（id的替代者）<br>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）<br>使用方式：<br>  标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code><br>  获取：<code>this.$refs.xxx</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showTit&quot;</span>&gt;</span>获取标题<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">School</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#x27;sch&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">School</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">School</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/School.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;App&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">title</span>:<span class=\"string\">&quot;App.vue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">School</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">showTit</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">tit</span>) <span class=\"comment\">//Dom</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">sch</span>) <span class=\"comment\">//vc</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"props-属性传参\"><a href=\"#props-属性传参\" class=\"headerlink\" title=\"props 属性传参\"></a>props 属性传参</h3><p>功能：让组件接收外部传过来的数据<br>传递参数：    <School ref=\"sch\" a=\"1\" b=\"2\"></School><br>接收参数：<br>第一种方式（只接收）：props:[‘name’]<br>第二种方式（限制类型）：props:{name:String}<br>第三种方式（限制类型、限制必要性、指定默认值）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 接收简写方式（常用）</span></span><br><span class=\"line\">  <span class=\"comment\">// props:[&#x27;a&#x27;,&#x27;b&#x27;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 完整接收方式</span></span><br><span class=\"line\">  <span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>:<span class=\"title class_\">Number</span> <span class=\"comment\">//规定数据类型</span></span><br><span class=\"line\">      <span class=\"attr\">required</span>:<span class=\"literal\">true</span><span class=\"comment\">//规定数据是否必要</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>:<span class=\"title class_\">String</span> <span class=\"comment\">//规定数据类型</span></span><br><span class=\"line\">      <span class=\"attr\">dafault</span>:<span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">//规定数据默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>\n<h3 id=\"mixin-混入\"><a href=\"#mixin-混入\" class=\"headerlink\" title=\"mixin 混入\"></a>mixin 混入</h3><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能(配置)。<br>一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。<br>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</p>\n<ol>\n<li>定义混入文件 mixin.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> show = &#123;</span><br><span class=\"line\">  <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">showName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> stu = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">students</span>:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;01&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;wangwu&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;03&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;04&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;jerry&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`                       </span></span><br><span class=\"line\"><span class=\"string\">2. 使用混入（局部混入）</span></span><br><span class=\"line\"><span class=\"string\">student.vue</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>html</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;stu in students&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;stu.id&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        姓名：&#123;&#123;stu.name&#125;&#125;，年龄：&#123;&#123;stu.age&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; stu &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../minxin&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Student&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">mixins</span>:[stu]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\nschool.vue<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;school&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showName&quot;</span>&gt;</span></span><br><span class=\"line\">    名字：&#123;&#123;name&#125;&#125;，地址：&#123;&#123;address&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; show &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../minxin.js&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;School&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;xxx学校&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">address</span>:<span class=\"string\">&quot;china&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">mixins</span>:[show]</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&lt;/script</span></span><br></pre></td></tr></table></figure></li>\n<li>全局混入<br>main.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入混入文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; show,<span class=\"title class_\">Stu</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./minxin&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并混入</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(show)</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(<span class=\"title class_\">Stu</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"params\">n</span>=&gt;</span><span class=\"title function_\">n</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制。<br>本质：包含 install 方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。<br>语法:   <code>对象.install = function (Vue, options) &#123;&#125;</code><br>常被用来定义以下配置</p>\n<ol>\n<li>添加全局过滤器 Vue.filter(….)</li>\n<li>添加全局指令 Vue.directive(….)</li>\n<li>配置全局混入(合) Vue.mixin(….)</li>\n<li>添加实例方法（添加后 vm vc均可调用）Vue.prototype.key &#x3D; value<br>示例：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//全局过滤器</span></span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"title function_\">filter</span>(<span class=\"string\">&#x27;mySlice&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//定义全局指令</span></span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"title function_\">directive</span>(<span class=\"string\">&#x27;fbind&#x27;</span>, &#123;</span><br><span class=\"line\">          <span class=\"comment\">//指令与元素成功绑定时（一上来）</span></span><br><span class=\"line\">          <span class=\"title function_\">bind</span>(<span class=\"params\">element, binding</span>) &#123;</span><br><span class=\"line\">              element.<span class=\"property\">value</span> = binding.<span class=\"property\">value</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">//指令所在元素被插入页面时</span></span><br><span class=\"line\">          <span class=\"title function_\">inserted</span>(<span class=\"params\">element, binding</span>) &#123;</span><br><span class=\"line\">              element.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">//指令所在的模板被重新解析时</span></span><br><span class=\"line\">          <span class=\"title function_\">update</span>(<span class=\"params\">element, binding</span>) &#123;</span><br><span class=\"line\">              element.<span class=\"property\">value</span> = binding.<span class=\"property\">value</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//定义混入</span></span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(&#123;</span><br><span class=\"line\">          <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                  <span class=\"attr\">x</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">                  <span class=\"attr\">y</span>: <span class=\"number\">200</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hello</span> = <span class=\"function\">() =&gt;</span> &#123; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你好啊aaaa&#x27;</span>) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n通过全局方法<code>Vue.use()</code> 使用插件。它需要在调用 new Vue() 启动应用之前完成：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">MyPlugin</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...组件选项</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"scoped-样式作用域\"><a href=\"#scoped-样式作用域\" class=\"headerlink\" title=\"scoped 样式作用域\"></a>scoped 样式作用域</h3><p>作用：让样式在局部生效，防止冲突。<br>写法：<code>&lt;style lang=&#39;css&#39; scoped&gt; ... &lt;/style&gt;</code>或<code>&lt;style lang=&#39;less&#39; scoped&gt; ... &lt;/style&gt;</code><br>补充：使用 less 安装<code>npm install less less-loader</code></p>\n<h2 id=\"ToDolist案例\"><a href=\"#ToDolist案例\" class=\"headerlink\" title=\"ToDolist案例\"></a>ToDolist案例</h2><ol>\n<li>组件化编码流程：<br>​ (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。<br>​ (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<br>​    1).一个组件在用：放在组件自身即可。<br>​    2). 一些组件在用：放在他们共同的父组件上（状态提升）。<br>​ (3).实现交互：从绑定事件开始。</li>\n<li>props适用于：<br>​ (1).父组件 &#x3D;&#x3D;&gt; 子组件 通信<br>​ (2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</li>\n<li>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</li>\n<li>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</li>\n</ol>\n<h2 id=\"本地存储\"><a href=\"#本地存储\" class=\"headerlink\" title=\"本地存储\"></a>本地存储</h2><h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><ol>\n<li>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用 于控制 Cookie 有效期、安全性、使用范围的可选属性组成。不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie 一同发送到服务器。</li>\n<li>Cookie的特性：</li>\n</ol>\n<ul>\n<li>Cookie一旦创建成功，名称就无法修改</li>\n<li>Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie</li>\n<li>每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb</li>\n<li>有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的</li>\n<li>Cookie在请求一个新的页面的时候都会被发送过去</li>\n</ul>\n<ol start=\"3\">\n<li>Cookie 在身份认证中的作用<br>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动 将 Cookie 保存在浏览器中<br>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie，通过请求头的形式发送给 服务器，服务器即可验明客户端的身份<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/Cookie%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81.png\" alt=\"Cookie 身份验证流程\"></li>\n</ol>\n<p> cookie 的基本语法和使用方式：</p>\n<p>设置 Cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务器端设置</span></span><br><span class=\"line\">Set-Cookie: &lt;name&gt;=&lt;value&gt;; Expires=&lt;date&gt;; Path=&lt;path&gt;; Domain=&lt;domain&gt;; Secure; HttpOnly; SameSite=&lt;samesite&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = <span class=\"string\">&quot;name=JohnDoe; expires=Fri, 31 Dec 2021 23:59:59 GMT; path=/&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Cookie 不能直接删除，可以通过：覆盖 Cookie、设置过期时间、使用 HttpOnly 和 Secure 属性禁用<br>Cookie 可以通过 Domain 和 Path 来跨子域共享，但不能跨完全不同的域<br>LocalStorage 和 SessionStorage 完全局限于同一域和协议，不能共享数据给不同的域或子域</p>\n</blockquote>\n<p><strong>常用属性</strong></p>\n<ul>\n<li>name：Cookie 的名称</li>\n<li>value：Cookie 的值</li>\n<li>SameSite：限制跨站请求时发送 Cookie，用于防止 CSRF 攻击</li>\n<li>Secure：如果设置了 Secure，cookie 只会在 HTTPS 连接时被发送</li>\n<li>HttpOnly：cookie 无法通过 JavaScript 访问，有助于防止 XSS 攻击</li>\n<li>Domain：指定 cookie 适用的域。默认是当前域，设置这个属性可以让 cookie 在子域共享</li>\n<li>Max-Age：设置 cookie 的存活时间，以秒为单位。与 expires 类似，但更推荐使用 Max-Age</li>\n<li>Expires：过期时间，格式通常为 GMT 格式。如果未指定，将在会话结束时（浏览器关闭时）删除</li>\n<li>Path: 设置 cookie 适用的路径。例如，path&#x3D;&#x2F; 表示 cookie 对整个网站可用，而 path&#x3D;&#x2F;somepath&#x2F; 表示 cookie 仅对 &#x2F;somepath&#x2F; 下的路径有效</li>\n</ul>\n<p>读取 Cookie</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookies = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span></span><br></pre></td></tr></table></figure>\n<p>删除 Cookie<br>将过期时间设为过去的时间可以删除 Cookie：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = <span class=\"string\">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webStorage\"><a href=\"#webStorage\" class=\"headerlink\" title=\"webStorage\"></a>webStorage</h3><p><em><strong>LocalStorage</strong></em></p>\n<ol>\n<li>LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</li>\n<li>LocalStorage的优点：<br>  在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息<br>  LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在<br>  仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</li>\n<li>LocalStorage的缺点：<br>  存在浏览器兼容问题，IE8以下版本的浏览器不支持<br>  如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage<br>  LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">localStorage</span> 常用 <span class=\"variable constant_\">API</span></span><br><span class=\"line\"><span class=\"comment\">// 保存数据到 localStorage</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 localStorage 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 localStorage 删除保存的数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 localStorage 删除所有保存的数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取某个索引的Key</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">key</span>(index)</span><br></pre></td></tr></table></figure>\n<em><strong>SessionStorage</strong></em></li>\n<li>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了，session是一种特殊的cookie。cookie是保存在客户端的，而session是保存在服务端。</li>\n<li>为什么要用 session<br>由于cookie 是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session 诞生了<br>具体应用参考：<a href=\"https://blog.csdn.net/hangao233/article/details/123089029\">前后端的身份认证</a></li>\n<li>session原理<br>当客户端第一次请求服务器的时候，服务器生成一份session保存在服务端，将该数据(session)的id以cookie的形式传递给客户端；以后的每次请求，浏览器都会自动的携带cookie来访问服务器(session数据id)。<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240906145833.png\" alt=\"session 原理\"><br>session 工作流程<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/session%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" alt=\"session 工作流程\"></li>\n</ol>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>组件自定义事件是一种组件间通信的方式，适用于：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件（那么就要在父组件中给子组件绑定自定义事件（事件的回调在A中））</p>\n<ol>\n<li>绑定自定义事件：<br>第一种方式：（利用 v-on 绑定，利用 <code>this.$emit(&#39;name&#39;,value) </code>触发）</li>\n</ol>\n<p>父组件 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 利用自定义事件 传递回调实现数据传递 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Student</span> @<span class=\"attr\">antguigu</span>=<span class=\"string\">&quot;getStudent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Student</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getStudent</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App接收到的参数是&#x27;</span>,value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;sendStudent&quot;</span>&gt;传递学生&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">students</span>:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;01&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;wangwu&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">sendStudent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 触发自定义事件</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;antguigu&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">students</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式，（利用 <code>this.$refs.Stu.$on(&#39;antguigu&#39;,this.getStudentName)</code> 绑定，利用 <code>this.$emit(&#39;name&#39;,value) </code>触发）</p>\n<p>父组件 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 利用自定义事件 传递回调实现数据传递 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Student</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;Stu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Student</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getStudentName</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;App接收到的参数是&#x27;</span>,name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">Stu</span>.$on(<span class=\"string\">&#x27;antguigu&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">getStudentName</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 触发一次</span></span><br><span class=\"line\">    <span class=\"comment\">// this.$refs.Stu.$once(&#x27;antguigu&#x27;,this.getStudentName)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;sendStudent&quot;</span>&gt;</span>传递学生<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name:&quot;Student&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      students:[</span><br><span class=\"line\">        &#123;id:&#x27;01&#x27;,name:&#x27;lisi&#x27;,age:18&#125;,</span><br><span class=\"line\">        &#123;id:&#x27;02&#x27;,name:&#x27;wangwu&#x27;,age:28&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sendStudent() &#123;</span><br><span class=\"line\">      // 触发自定义事件</span><br><span class=\"line\">      this.$emit(&#x27;antguigu&#x27;,this.students)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>解绑自定义事件<br>语法：</li>\n</ol>\n<ul>\n<li><code>this.$off()</code>   不传参，解绑所有事件</li>\n<li><code>this.$off(&#39;antguigu&#39;)</code>   传递字符串参数，解绑指定单个事件</li>\n<li><code>this.$off([&#39;antguigu&#39;,&#39;demo&#39;])</code>  传递字符串数组参数，解绑指定多个事件</li>\n</ul>\n<p>父组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 利用 ref 绑定两个自定义事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">Stu</span>.$on(<span class=\"string\">&#x27;antguigu&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">getStudentName</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">Stu</span>.$on(<span class=\"string\">&#x27;demo&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">getStudentName</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// ...</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">unbind</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 解绑所有自定义事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// this.$off()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 解绑单个自定义事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// this.$off(&#x27;antguigu&#x27;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 解绑多个自定义事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.$off([<span class=\"string\">&#x27;antguigu&#x27;</span>,<span class=\"string\">&#x27;demo&#x27;</span>])</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>组件上也可以绑定原生DOM事件，需要使用 native 修饰符。<br><code>&lt;Student ref=&quot;student&quot; @click.native=&quot;show&quot;/&gt;</code></li>\n<li>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！</li>\n</ol>\n<h2 id=\"全局事件总线\"><a href=\"#全局事件总线\" class=\"headerlink\" title=\"全局事件总线\"></a>全局事件总线</h2><p>一种组件间通信的方式，适用于任意组件间通信。</p>\n<ol>\n<li>安装全局事件总线：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$bus</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure></li>\n<li>使用事件总线：</li>\n</ol>\n<ul>\n<li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">methods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$bus</span>.$on(<span class=\"string\">&#x27;xxxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></li>\n</ul>\n<ol start=\"3\">\n<li>注意：最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</li>\n</ol>\n<p>全局事件总线实现：<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF.png\" alt=\"全局事件总线实现\"></p>\n<h2 id=\"消息订阅与发布\"><a href=\"#消息订阅与发布\" class=\"headerlink\" title=\"消息订阅与发布\"></a>消息订阅与发布</h2><blockquote>\n<p>Vue中了解，常用事件总线<br>一种组件间通信的方式，适用于任意组件间通信</p>\n</blockquote>\n<p>使用步骤：<br>安装 第三方库：<code>npm i pubsub-js</code><br>引入: <code>import pubsub from &#39;pubsub-js&#39;</code><br>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">  <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pid</span> = pubsub.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&#x27;xxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>) <span class=\"comment\">//订阅消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供数据：pubsub.publish(‘xxx’,数据)<br>最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去取消订阅。</p>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><p>语法：this.$nextTick(回调函数)<br>作用：在下一次 DOM 更新结束后执行其指定的回调。<br>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$nextTick(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">inputTitle</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画与过度\"><a href=\"#动画与过度\" class=\"headerlink\" title=\"动画与过度\"></a>动画与过度</h2><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><p>写法：</p>\n<ol>\n<li>准备以下样式：<br>元素进入的样式：</li>\n</ol>\n<ul>\n<li>v-enter：进入的起点</li>\n<li>v-enter-active：进入过程中</li>\n<li>v-enter-to：进入的终点<br>元素离开的样式：</li>\n<li>v-leave：离开的起点</li>\n<li>v-leave-active：离开过程中</li>\n<li>v-leave-to：离开的终点</li>\n</ul>\n<ol start=\"2\">\n<li>使用<transition>包裹要过渡的元素，并配置name属性：<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n备注：若有多个元素需要过度，则需要使用：<transition-group >，且每个元素都要指定key值。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow=!isShow&quot;</span>&gt;</span>显示/隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sch&quot;</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo2&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"comment\">/* 进入的起点 离开的终点*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.sch-enter</span>, <span class=\"selector-class\">.sch-leave-to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>)</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"comment\">/* 进入的终点 离开的起点*/</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.sch-enter-to</span>, <span class=\"selector-class\">.sch-leav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateX</span>(<span class=\"number\">0px</span>)</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.sch-enter-active</span>,<span class=\"selector-class\">.sch-leave-active</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span> linear;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow=!isShow&quot;</span>&gt;</span>显示/隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 同时应用多个元素动画  transition-group --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!isShow&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>世界<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.v-enter-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">animation</span>: atguigu <span class=\"number\">1s</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.v-leave-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">animation</span>: atguigu <span class=\"number\">1s</span> reverse;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"comment\">/* 定义动画 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"keyword\">@keyframes</span> atguigu &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">from</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">100%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">0px</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动画第三方库\"><a href=\"#动画第三方库\" class=\"headerlink\" title=\"动画第三方库\"></a>动画第三方库</h3><p><a href=\"https://animate.style/\">Animate.css</a><br>安装：<code>npm install animate.css --save</code><br>引入：<code>import &#39;animate.css&#39;</code><br>使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=&quot;animate__animated animate__bounce&quot; </span><br><span class=\"line\">enter-active-class=&quot;animate__swing&quot;</span><br><span class=\"line\">leave-active-class=&quot;animate__backOutUp&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">transition-group</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">appear</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;animate__animated animate__bounce&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">enter-active-class</span>=<span class=\"string\">&quot;animate__swing&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">leave-active-class</span>=<span class=\"string\">&quot;animate__backOutUp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!isShow&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>你好啊！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 。<br>分类：默认插槽、具名插槽、作用域插槽</p>\n<h3 id=\"默认插槽\"><a href=\"#默认插槽\" class=\"headerlink\" title=\"默认插槽\"></a>默认插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Category</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>html结构1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Category</span>&gt;</span></span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"comment\">&lt;!-- 定义插槽 --&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>插槽默认内容...<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Demo</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>html结构1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>html结构2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- template 包裹的元素不会被渲染到 dom 树中 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;##&quot;</span>&gt;</span>链接1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;##&quot;</span>&gt;</span>链接2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;##&quot;</span>&gt;</span>链接3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Demo</span>&gt;</span></span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"comment\">&lt;!-- 定义插槽 --&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>插槽默认内容...<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>props: 父给子传数据，传方法<br>作用域插槽：数据在组件的自身（子组件），但根据数据生成的结构需要组件的使用者（父组件）来决定。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Demo</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">       作用域插槽 必须使用 tempalte 为根元素包裹其它元素</span></span><br><span class=\"line\"><span class=\"comment\">       scope 属性用于指定父组件数据的接收名</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span></span><br><span class=\"line\">       &#123;&#123; data. &#125;&#125;</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Demo</span>&gt;</span></span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">         <span class=\"comment\">&lt;!-- 定义插槽 --&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">:games</span>=<span class=\"string\">&quot;games&quot;</span>&gt;</span>插槽默认内容...<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>:<span class=\"string\">&quot;Demo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">games</span>:[<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"string\">&#x27;bb&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;...&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h1><p>目前可以发送网络请求的方式：</p>\n<ol>\n<li>xhr（基于XMLHttpRequest） 存在的问题：配置调用混乱；编码方式复杂；实际开发中经常被JQuery-Ajax代替</li>\n<li>JQuery-Ajax 存在的问题：Vue开发中不需要调用jQuery这个重量级框架（1w＋行）</li>\n<li>vue-resource（vue1.x推出） vue2.0之后不在更新和维护，作者推荐了axios</li>\n<li>fetch 基于promis 但兼容性差</li>\n</ol>\n<h2 id=\"axios发送网络请求\"><a href=\"#axios发送网络请求\" class=\"headerlink\" title=\"axios发送网络请求\"></a>axios发送网络请求</h2><p>axios特点</p>\n<ul>\n<li>在浏览器中发送 XMLHttpRquest 请求</li>\n<li>在 node.js 中发送http请求</li>\n<li>支持 Promise API</li>\n<li>拦截（转换）请求和响应</li>\n<li>转换请求和响应</li>\n</ul>\n<p>axios基本使用:</p>\n<ol>\n<li>安装：npm install axios –save</li>\n<li>引入：import axios from “axios”</li>\n<li>使用（默认使用get请求）：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 请求方法 1</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://127.0.0.1:3001/data&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// params 可选 针对get请求的参数拼接 如：127.0.0.1:3000/data?type=pop</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;pop&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">page</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简化方法</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;url&#x27;</span>).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"comment\">// 成功的回调</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 失败的回调</span></span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p>报错，违反了同源策略（协议、域名和端口相同，可访问资源）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at &#x27;https://www.runoob.com/try/ajax/json_demo.json&#x27; from origin &#x27;http://localhost:8080&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>\n<p>解决跨域问题</p>\n<ol>\n<li>cros （后端使用）</li>\n<li>jsonp (面试题，但实际应用少)</li>\n<li>代理服务器<br>服务器之间使用http协议传输数据，不受同源策略限制，前端正向代理后端反向代理<br>缺点：会导致请求和服务器都不知道来自哪里</li>\n</ol>\n<p>方式1:借助vue cli开启单个代理服务器,在vue.config.js中添加如下配置：<br><a href=\"https://cli.vuejs.org/zh/config/#devserver-proxy\">官方配置参考文档</a>：<br>说明：<br>优点：配置简单，请求资源时直接发给 8080 端口即可。<br>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。<br>工作方式：若按照上述配置代理，当请求了前端 (public) 不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置代理服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">lintOnSave</span>:<span class=\"literal\">false</span> ,<span class=\"comment\">//关闭 es lite 语法检查</span></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123; <span class=\"comment\">//开启代理服务器(转发端口) ---&gt; 跨域问题</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: <span class=\"string\">&#x27;https://www.runoob.com:443&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求资源</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:8080/try/ajax/json_demo.json&#x27;</span>).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功&#x27;</span>,response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失败&#x27;</span>,error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式2:<br>可以配置多个代理,且可以灵活控制是否请求代理;缺点 配置较为繁琐,请求资源必须加前缀</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置代理服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api1&#x27;</span>: &#123;<span class=\"comment\">// 匹配以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,<span class=\"comment\">// 代理目标服务器协议+主机名</span></span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/api1&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,<span class=\"comment\">// 控制实际请求地址会将 /api1 匹配前缀删除</span></span><br><span class=\"line\">        <span class=\"attr\">ws</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// 默认true ,用于支持 websocket</span></span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//默认true,用于控制请求头中的 host 值</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api2&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">&#x27;^/api2&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求资源</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:8080/api1&#x27;</span>+<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://localhost:8080/api2&#x27;</span>+<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"VueX\"><a href=\"#VueX\" class=\"headerlink\" title=\"VueX\"></a>VueX</h1><ol>\n<li>概念<br>​ 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</li>\n<li>何时使用？<br>​ 多个组件需要共享数据时</li>\n<li>原理<br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/vuex.png\" alt=\"Vuex原理图\"></li>\n</ol>\n<h3 id=\"1-搭建vuex-环境\"><a href=\"#1-搭建vuex-环境\" class=\"headerlink\" title=\"1. 搭建vuex 环境\"></a>1. 搭建vuex 环境</h3><ol>\n<li>创建文件：src&#x2F;store&#x2F;index.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建store</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span>,&#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 准备actions对象——响应组件中用户的动作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// mutations -- 处理组件操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// state -- 存储数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>在main.js中创建vm时传入store配置项<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">//引入store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建vm</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">\tstore</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"vuex基本使用\"><a href=\"#vuex基本使用\" class=\"headerlink\" title=\"vuex基本使用\"></a>vuex基本使用</h3><p>初始化数据、配置actions、配置mutations，操作文件store.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span>,&#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// actions -- 响应组件操作状态</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"attr\">incrementAsync</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;INCREMENTASYNC&#x27;</span>,value)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">incrementOdd</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (conText.<span class=\"property\">state</span>.<span class=\"property\">sum</span> % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;INCREMENTASYNC&#x27;</span>,value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// mutations -- 处理组件操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"attr\">INCREMENT</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">DECREMENT</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">sum</span> -= value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">INCREMENTODD</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">INCREMENTASYNC</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// state -- 存储数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sum</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组件中读取vuex中的数据：<code>$store.state.sum</code></li>\n<li>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code>或<code>$store.commit</code>(‘mutations中的方法名’,数据)</li>\n<li>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch，直接编写commit<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>当前求和结果为: &#123;&#123;$store.state.sum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;inputNumber&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;decrement&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incrementOdd&quot;</span>&gt;</span>结果为奇数再加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incrementAsync&quot;</span>&gt;</span>异步+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Category&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">inputNumber</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;INCREMENT&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inputNumber</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">decrement</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;DECREMENT&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inputNumber</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">incrementOdd</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;incrementOdd&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inputNumber</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">incrementAsync</span> () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;incrementAsync&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inputNumber</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h3><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。<br>在store.js中追加getters配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span>,&#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// actions -- 响应组件操作状态</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// mutations -- 处理组件操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// state -- 存储数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sum</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">bigSum</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">sum</span>&gt;<span class=\"number\">0</span>?state.<span class=\"property\">sum</span>*(state.<span class=\"property\">sum</span>-<span class=\"number\">1</span>):state.<span class=\"property\">sum</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  ... ,</span><br><span class=\"line\">  getters</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件中读取数据：$store.getters.bigSum</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>当前求和结果为: &#123;&#123;$store.state.sum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>放大十倍的结果为: &#123;&#123;$store.getters.bigSum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"vuex-中的四个-map-方法\"><a href=\"#vuex-中的四个-map-方法\" class=\"headerlink\" title=\"vuex 中的四个 map 方法\"></a>vuex 中的四个 map 方法</h3><ol>\n<li>mapState 映射 state 中的数据为计算属性<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  <span class=\"attr\">school</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sum</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组件计算属性</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借助 mapState 生成计算属性：sum、school（对象写法）</span></span><br><span class=\"line\">   ...<span class=\"title function_\">mapState</span>(&#123;<span class=\"attr\">sum</span>:<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"attr\">school</span>:<span class=\"string\">&#x27;school&#x27;</span>&#125;),</span><br><span class=\"line\">  <span class=\"comment\">// 借助 mapState 生成计算属性：sum、school（数组写法）</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>]),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>mapGetters 映射 getters 中的数据为计算属性<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">bigSum</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.<span class=\"property\">sum</span>&gt;<span class=\"number\">0</span>?state.<span class=\"property\">sum</span>*(state.<span class=\"property\">sum</span>-<span class=\"number\">1</span>):state.<span class=\"property\">sum</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组件计算属性</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借助 mapGetters 生成计算属性：bigSum（对象写法）</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapGetters</span>(&#123;<span class=\"attr\">bigSum</span>:<span class=\"string\">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class=\"line\">  <span class=\"comment\">// 借助 mapGetters 生成计算属性：bigSum（数组写法）</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapGetters</span>([<span class=\"string\">&#x27;bigSum&#x27;</span>]),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>mapActions与mapMutations<br>帮助我们生成与actions对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// increment() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.$store.commit(&#x27;INCREMENT&#x27;,this.inputNumber)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// decrement() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.$store.commit(&#x27;DECREMENT&#x27;,this.inputNumber)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//语法糖：靠 mapActions生成：increment、decrement（对象形式）</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapMutations</span>(&#123;<span class=\"attr\">increment</span>:<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"attr\">decrement</span>:<span class=\"string\">&#x27;decrement&#x27;</span>&#125;),</span><br><span class=\"line\">  ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"string\">&#x27;decrement&#x27;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// incrementOdd() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.$store.dispatch(&#x27;incrementOdd&#x27;,this.inputNumber)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// incrementAsync () &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.$store.dispatch(&#x27;incrementAsync&#x27;,this.inputNumber)</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//语法糖：靠 mapActions 生成：incrementOdd、incrementAsync两种方式</span></span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>(&#123;<span class=\"attr\">incrementOdd</span>:<span class=\"string\">&#x27;incrementOdd&#x27;</span>,<span class=\"attr\">incrementAsync</span>:<span class=\"string\">&#x27;incrementAsync&#x27;</span>&#125;)</span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;incrementOdd&#x27;</span>,<span class=\"string\">&#x27;incrementAsync&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"vuex-模块化\"><a href=\"#vuex-模块化\" class=\"headerlink\" title=\"vuex 模块化\"></a>vuex 模块化</h3><p>目的：让代码更好维护，让多种数据分类更加明确。<br>store.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// countAbout personAbout 可以封装为文件并单独引入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> countAbout = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//开启命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>:&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">bigSum</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> state.<span class=\"property\">sum</span> * <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> personAbout = &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//开启命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>:&#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    countAbout,</span><br><span class=\"line\">    personAbout</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>读取 state 数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接读取</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">personAbout</span>.<span class=\"property\">list</span></span><br><span class=\"line\"><span class=\"comment\">//方式二：借助 mapState 读取：用 mapState 取 countAbout 中的state 必须加上 &#x27;countAbout&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>,<span class=\"string\">&#x27;subject&#x27;</span>]),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读取 getters 数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接读取</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>[<span class=\"string\">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助 mapGetters 读取：</span></span><br><span class=\"line\">...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>组件中调用 commit </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接 commit</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助 mapMutations：</span></span><br><span class=\"line\">...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">increment</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span>,<span class=\"attr\">decrement</span>:<span class=\"string\">&#x27;DECREMENT&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure>\n<p>组件中调用 dispath </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接 dispath</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;persionAbout/addForServe&#x27;</span>,&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助 mapMutations：</span></span><br><span class=\"line\">...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;incrementOdd&#x27;</span>,<span class=\"string\">&#x27;incrementAsync&#x27;</span>]),</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span>,&#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> countOptains <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./count&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> persionOptains <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./persion&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">countAbout</span>:countOptains,</span><br><span class=\"line\">    <span class=\"attr\">persionAbout</span>:persionOptains</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// count.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">incrementAsync</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;INCREMENTASYNC&#x27;</span>,value)</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">incrementOdd</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (conText.<span class=\"property\">state</span>.<span class=\"property\">sum</span> % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;INCREMENTASYNC&#x27;</span>,value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">INCREMENT</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">DECREMENT</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">sum</span> -= value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">INCREMENTODD</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">INCREMENTASYNC</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">sum</span> += value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">sum</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">bigSum</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"property\">sum</span>&gt;<span class=\"number\">0</span>?state.<span class=\"property\">sum</span>*(state.<span class=\"property\">sum</span>-<span class=\"number\">1</span>):state.<span class=\"property\">sum</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// persion.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">addWang</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value.<span class=\"property\">name</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;王&#x27;</span>)) &#123;</span><br><span class=\"line\">        conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;ADD_PERSION&#x27;</span>,value)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;包含王吗？&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">addForServe</span>:<span class=\"keyword\">function</span>(<span class=\"params\">conText,value</span>) &#123;</span><br><span class=\"line\">      axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://api.uixsj.cn/hitokoto/get&#x27;</span>).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">          conText.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;ADD_SERVE&#x27;</span>,response.<span class=\"property\">data</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"comment\">// conText.commit(&#x27;ADD_PERSION&#x27;,value)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">ADD_PERSION</span>:<span class=\"keyword\">function</span>(<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">persionList</span>.<span class=\"title function_\">unshift</span>(value)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">ADD_SERVE</span>:<span class=\"keyword\">function</span> (<span class=\"params\">state,value</span>) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">serverStr</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">persionList</span>:[</span><br><span class=\"line\">      &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;001&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;admin&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;002&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">serverStr</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">firstName</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"property\">persionList</span>[<span class=\"number\">0</span>].<span class=\"property\">name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"params\">n</span>=&gt;</span><span class=\"title function_\">n</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">  <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$bus</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">//全局事件总线</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Counter.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Persion 组件<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>当前组件求和结果为: &#123;&#123;sum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>n*(n-1)的结果为: &#123;&#123;bigSum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>下方组件的总人数为：&#123;&#123;persions.length&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;inputNumber&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment(inputNumber)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;decrement(inputNumber)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incrementOdd(inputNumber)&quot;</span>&gt;</span>结果为奇数再加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incrementAsync(inputNumber)&quot;</span>&gt;</span>异步+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; mapState,mapGetters,mapMutations,mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Category&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">inputNumber</span>: <span class=\"number\">1</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    ...<span class=\"title function_\">mapMutations</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">increment</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span>,<span class=\"attr\">decrement</span>:<span class=\"string\">&#x27;DECREMENT&#x27;</span>&#125;),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    ...<span class=\"title function_\">mapActions</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;incrementOdd&#x27;</span>,<span class=\"string\">&#x27;incrementAsync&#x27;</span>]),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">computed</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">sum</span>:<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&#x27;name&#x27;</span>&#125;),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    ...<span class=\"title function_\">mapState</span>(<span class=\"string\">&#x27;persionAbout&#x27;</span>,&#123;<span class=\"attr\">persions</span>:<span class=\"string\">&#x27;persionList&#x27;</span>&#125;),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    ...<span class=\"title function_\">mapGetters</span>(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">bigSum</span>:<span class=\"string\">&#x27;bigSum&#x27;</span>&#125;),</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-tag\">button</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Peersion.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Persion 组件 <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;serveStr&quot;</span>&gt;</span>&#123;&#123;serveStr&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>上方组件求和为 &#123;&#123;sum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>首个人名 &#123;&#123;firstName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入姓名&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;inputName&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add_wang&quot;</span>&gt;</span>添加名字含王的人<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in persions&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Persion&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">inputName</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">str</span>:<span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">computed</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">persions</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">persionAbout</span>.<span class=\"property\">persionList</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">countAbout</span>.<span class=\"property\">sum</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">firstName</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>[<span class=\"string\">&#x27;persionAbout/firstName&#x27;</span>]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">serveStr</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">persionAbout</span>.<span class=\"property\">serverStr</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;persionAbout/ADD_PERSION&#x27;</span>,&#123;<span class=\"attr\">id</span>:<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()+<span class=\"string\">&#x27;_persion&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">inputName</span>&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">add_wang</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;persionAbout/addWang&#x27;</span>,&#123;<span class=\"attr\">id</span>:<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()+<span class=\"string\">&#x27;_persion&#x27;</span>,<span class=\"attr\">name</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">inputName</span>&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;persionAbout/addForServe&#x27;</span>,&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><p>一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。<br>前端路由：key是路径，value是组件。后端路由：key是路径，value是函数&#x2F;方法。</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p>vue-router是一个插件库，用于实现SPA 单页面应用<br>安装vue-router，命令：<code>npm i vue-router</code><br>应用插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>编写router配置项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入 VueRouter</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入 Luyou 组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../pages/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建 router 实例对象，用于管理路由规则</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">routes</span>:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">component</span>:<span class=\"title class_\">About</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">component</span>:<span class=\"title class_\">Home</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>配置路由路径（active-class可配置高亮样式）<br><code>&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt; About &lt;/router-link&gt;</code><br>指定展示位置<br><code>&lt;router-view&gt;&lt;/router-view&gt;</code><br>注意点：</p>\n<ul>\n<li>路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。</li>\n<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>\n<li>每个组件都有自己的$route属性，里面存储着自己的路由信息。</li>\n<li>整个应用只有一个router，可以通过组件的$router属性获取到。</li>\n</ul>\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><p>配置路由规则，使用children配置项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">routes</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">News</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">Message</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>跳转（要写完整路径）：<br><code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code><br>指定展示位置<br><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n<h2 id=\"路由传参-query参数\"><a href=\"#路由传参-query参数\" class=\"headerlink\" title=\"路由传参 query参数\"></a>路由传参 query参数</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 传参方式1 （字符串） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail?id=$&#123;item.id&#125;&amp;title=$&#123;item.title&#125;`&quot;</span>&gt;</span>message&#123;&#123;item.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 传参方式1 （对象） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  path: &#x27;/home/message/detail&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  query: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    id: item.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    title: item.title</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">&#125;&quot;</span>&gt;</span>message&#123;&#123;item.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接收参数<br><code>&lt;li&gt; &#123;&#123;$route.query.id&#125;&#125;   &#123;&#123;$route.query.title&#125;&#125; &lt;/li&gt;</code></p>\n<h3 id=\"补充：路由的命名\"><a href=\"#补充：路由的命名\" class=\"headerlink\" title=\"补充：路由的命名\"></a>补充：路由的命名</h3><p>作用：可以简化路由的跳转。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置路由表时添加 name</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/demo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">component</span>:<span class=\"title class_\">Demo</span>,</span><br><span class=\"line\">\t<span class=\"attr\">children</span>:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">component</span>:<span class=\"title class_\">Test</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">children</span>:[</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>:<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"comment\">//给路由命名</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;welcome&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">component</span>:<span class=\"title class_\">Hello</span>,</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--简化前，需要写完整的路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo/test/welcome&quot;</span>&gt;</span>跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简化后，直接通过名字跳转 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;</span>跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简化写法也配合传递参数使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\tname:&#x27;hello&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\tquery:&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\t   id:666,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            title:&#x27;你好&#x27;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span>跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由传参-路由的params参数\"><a href=\"#路由传参-路由的params参数\" class=\"headerlink\" title=\"路由传参 路由的params参数\"></a>路由传参 路由的params参数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>: <span class=\"string\">&#x27;/demo/:id/:title&#x27;</span>,<span class=\"comment\">//使用占位符声明接收 params 参数</span></span><br><span class=\"line\">\t<span class=\"attr\">component</span>: <span class=\"title class_\">Demo</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传递参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串形式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/demo/$&#123;item,.id&#125;/$&#123;item.title&#125;&quot;</span>&gt;</span>跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--对象形式 （path配置会失效 ，传递parsma参数必须使用 name配置） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  name:&#x27;hello&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  parsma:&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    id: item.id,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    title: item.title</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  跳转</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接收参数<br><code>&lt;li&gt; &#123;&#123;$route.params.id&#125;&#125;   &#123;&#123;$route.params.title&#125;&#125; &lt;/li&gt;</code></p>\n<h2 id=\"路由的-props-配置\"><a href=\"#路由的-props-配置\" class=\"headerlink\" title=\"路由的 props 配置\"></a>路由的 props 配置</h2><p>作用：让路由组件更方便的收到参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/demo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail/:id&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第一种写法（不常用）：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"attr\">props</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">900</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有 params 参数通过props传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"attr\">props</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第三种写法：props值为函数(形参为$route)，该函数返回的对象中每一组 key-value 都会通过 props 传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"title function_\">props</span>(<span class=\"params\">$route</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t  <span class=\"attr\">id</span>: $route.<span class=\"property\">query</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">\t\t  <span class=\"attr\">title</span>:$route.<span class=\"property\">query</span>.<span class=\"property\">title</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<br><code>props:[&#39;id&#39;,&#39;title&#39;]</code></p>\n<h2 id=\"router-link-的replace属性\"><a href=\"#router-link-的replace属性\" class=\"headerlink\" title=\"router-link 的replace属性\"></a>router-link 的replace属性</h2><p>作用：控制路由跳转时操作浏览器历史记录的模式<br>浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push<br>如何开启replace模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></p>\n<h2 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h2><p>作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$router的两个API</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/message/detail&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">params</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">id</span>:xxx,</span><br><span class=\"line\">\t\t<span class=\"attr\">title</span>:xxx</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home/message/detail&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">id</span>:xxx,</span><br><span class=\"line\">\t\t<span class=\"attr\">title</span>:xxx</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">forward</span>() <span class=\"comment\">//前进</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">back</span>() <span class=\"comment\">//后退</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">go</span>() <span class=\"comment\">//可前进也可后退</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓存路由组件\"><a href=\"#缓存路由组件\" class=\"headerlink\" title=\"缓存路由组件\"></a>缓存路由组件</h2><p>作用：让不展示的路由组件保持挂载，不被销毁。<br>具体编码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;keep-alive include=&quot;News,Message&quot;&gt;  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt;  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">&quot;News&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- include属性指的是组件名 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由组件生命周期\"><a href=\"#路由组件生命周期\" class=\"headerlink\" title=\"路由组件生命周期\"></a>路由组件生命周期</h2><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。<br>具体名字：</p>\n<ul>\n<li>activated路由组件被激活时触发。</li>\n<li>deactivated路由组件失活时触发。<br>这两个生命周期钩子需要配合前面的<strong>缓存路由</strong>组件使用（没有缓存路由组件不起效果）</li>\n</ul>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>作用：对路由进行权限控制<br>分类：全局守卫、独享守卫、组件内守卫</p>\n<h3 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;beforeEach&#x27;</span>,to,<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.<span class=\"property\">meta</span>.<span class=\"property\">isAuth</span>)&#123; <span class=\"comment\">//判断当前路由是否需要进行权限控制</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;school&#x27;</span>) === <span class=\"string\">&#x27;zhejiang&#x27;</span>)&#123; <span class=\"comment\">//权限控制的具体规则</span></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">next</span>() <span class=\"comment\">//放行</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;暂无权限查看&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>() <span class=\"comment\">//放行</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局后置守卫\"><a href=\"#全局后置守卫\" class=\"headerlink\" title=\"全局后置守卫\"></a>全局后置守卫</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class=\"line\">router.<span class=\"title function_\">afterEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;afterEach&#x27;</span>,to,<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.<span class=\"property\">meta</span>.<span class=\"property\">title</span>)&#123; </span><br><span class=\"line\">\t\t<span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = to.<span class=\"property\">meta</span>.<span class=\"property\">title</span> <span class=\"comment\">//修改网页的title</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;vue_test&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"独享路由守卫\"><a href=\"#独享路由守卫\" class=\"headerlink\" title=\"独享路由守卫\"></a>独享路由守卫</h3><p>配置路由时,在具体路由中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">meta</span>:&#123;<span class=\"attr\">tit</span>:<span class=\"string\">&#x27;首页&#x27;</span>&#125;,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">component</span>: <span class=\"title class_\">News</span>,</span><br><span class=\"line\">          <span class=\"attr\">meta</span>:&#123;<span class=\"attr\">isAuth</span>:<span class=\"literal\">true</span>,<span class=\"attr\">tit</span>:<span class=\"string\">&#x27;新闻&#x27;</span>&#125;,</span><br><span class=\"line\">          <span class=\"title function_\">beforeEnter</span>(<span class=\"params\"> to,<span class=\"keyword\">from</span>,next </span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 独享路由守卫</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h3><p>在路由组件中编写,类似于组件生命周期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进入守卫：通过路由规则，进入该路由组件时被调用</span></span><br><span class=\"line\"><span class=\"title function_\">beforeRouteEnter</span> (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//离开守卫：通过路由规则，离开该路由组件时被调用</span></span><br><span class=\"line\"><span class=\"title function_\">beforeRouteLeave</span> (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由器的两种工作模式\"><a href=\"#路由器的两种工作模式\" class=\"headerlink\" title=\"路由器的两种工作模式\"></a>路由器的两种工作模式</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;history&#x27;</span>,<span class=\"comment\">// 默认为 hash 模式 ，指定history模式</span></span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">meta</span>:&#123;<span class=\"attr\">tit</span>:<span class=\"string\">&#x27;首页&#x27;</span>&#125;,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于一个url来说，什么是 hash值？—— #及其后面的内容就是hash值。<br>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p>\n<ol>\n<li>hash模式：<br>  地址中永远带着#号，不美观 。<br>  若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。<br>  兼容性较好。</li>\n<li>history模式：<br>  地址干净，美观 。<br>  兼容性和hash模式相比略差。<br>  应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>\n</ol>\n","categories":["Vue"],"tags":["vue2"]},{"title":"PicGo搭建图床","url":"/2024/07/18/utils/PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/","content":"<h1 id=\"利用-PicGo-和-Github-搭建图床\"><a href=\"#利用-PicGo-和-Github-搭建图床\" class=\"headerlink\" title=\"利用 PicGo 和 Github 搭建图床\"></a>利用 PicGo 和 Github 搭建图床</h1><h2 id=\"1-创建-GitHub-仓库\"><a href=\"#1-创建-GitHub-仓库\" class=\"headerlink\" title=\"1. 创建 GitHub 仓库\"></a>1. 创建 GitHub 仓库</h2><p>登录 GitHub，创建一个新的仓库，用于存放图片</p>\n<p><code>注意：图床仓库需要设置为公开的不然无法获取图片链接</code></p>\n<h2 id=\"2-配置-GitHub-Token\"><a href=\"#2-配置-GitHub-Token\" class=\"headerlink\" title=\"2. 配置 GitHub Token\"></a>2. 配置 GitHub Token</h2><p>点击页面右上角的头像，然后选择 “Settings”，找到并点击 “Developer settings”</p>\n<p>点击 “Personal access tokens”，选择 “Tokens (classic)”，点击 “Generate new token” 按钮</p>\n<p>或者点击如下链接，进入：</p>\n<p>  <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></p>\n<p>在 “Note” 字段中输入一个描述性的名称，例如 “PicGo Token”，以便以后识别这个 Token 的用途</p>\n<p>在 “Expiration” 字段中选择一个适合的过期时间。建议选择一个较长的时间，比如 90 天或 1 年</p>\n<p>在 “Select scopes” 部分，勾选以下权限：</p>\n<ul>\n<li>​    repo: 完全控制私有仓库和公共仓库</li>\n<li>​    点击页面底部的 “Generate token” 按钮</li>\n<li>​    生成的 Token 将会显示在页面上。复制并保存这个 Token</li>\n</ul>\n<h2 id=\"3-下载和配置-PicGo\"><a href=\"#3-下载和配置-PicGo\" class=\"headerlink\" title=\"3. 下载和配置 PicGo\"></a>3. 下载和配置 PicGo</h2><p>下载并安装 <a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a></p>\n<p>打开 PicGo，进入 “插件设置”，选择 “GitHub 图床”</p>\n<p>配置 GitHub 图床信息：</p>\n<ol>\n<li>​    仓库名：用户名&#x2F;仓库名（例如 yourusername&#x2F;yourrepository）</li>\n<li>​    分支名：main 或 master（根据实际情况）</li>\n<li>​    Token：粘贴之前复制的 GitHub Token</li>\n<li>​    存储路径：设置图片存储的路径，例如 img&#x2F;</li>\n<li>​    点击 “确定” 保存配置</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240820085140.png\" alt=\"配置\"></p>\n<p>详细配置见<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E9%A2%84%E8%A7%88\">PigGo配置手册</a>配置手册</p>\n<h2 id=\"4-使用-PicGo-上传图片\"><a href=\"#4-使用-PicGo-上传图片\" class=\"headerlink\" title=\"4. 使用 PicGo 上传图片\"></a>4. 使用 PicGo 上传图片</h2><p>打开 PicGo，点击 “上传区”，选择要上传的图片</p>\n<p>上传成功后，PicGo 会生成图片的 URL，可以直接在 Hexo 博客中使用这些 URL 引用图片</p>\n<p>这个默认的好像无法同步删除github上的图片,只能上传图片。所以安装picgo-plugin-github-plus</p>\n<h1 id=\"PicGo-删除图片同步github仓库\"><a href=\"#PicGo-删除图片同步github仓库\" class=\"headerlink\" title=\"PicGo 删除图片同步github仓库\"></a>PicGo 删除图片同步github仓库</h1><h2 id=\"githubPlus插件配置\"><a href=\"#githubPlus插件配置\" class=\"headerlink\" title=\"githubPlus插件配置\"></a>githubPlus插件配置</h2><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240820085230.png\" alt=\"插件\"></p>\n<h2 id=\"配置githubPlus\"><a href=\"#配置githubPlus\" class=\"headerlink\" title=\"配置githubPlus\"></a>配置githubPlus</h2><p>这个插件的配置和上面的Github图片配置差不多一样</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240820085358.png\" alt=\"配置 githubPlus\"></p>\n<p>配置完成后选择 <code>githubPlus</code> 图床，可以同步删除</p>\n<h1 id=\"Typora自动上传\"><a href=\"#Typora自动上传\" class=\"headerlink\" title=\"Typora自动上传\"></a>Typora自动上传</h1><blockquote>\n<p>文件 -&gt; 偏好设置 -&gt; 图像</p>\n</blockquote>\n<p>配置插入图片自动上传到 Picgo 图床</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240820091132650.png\" alt=\"image-20240820091132650\"></p>\n<h1 id=\"配置-ImgBot\"><a href=\"#配置-ImgBot\" class=\"headerlink\" title=\"配置 ImgBot\"></a>配置 ImgBot</h1><p>ImgBot 是一个用于自动优化 GitHub 仓库中图像文件的工具，它会压缩图片文件以减少存储空间和加载时间。配置 ImgBot 可以通过在仓库中添加一个 imgbotconfig.json 文件来实现</p>\n<p>imgbot  <a href=\"https://github.com/marketplace/imgbot\">官网</a> 是一款 Github 插件</p>\n<p>安装后，你上传图片到 Github 去，imgbot 会自动压缩图片并推送 PR，我们只需要合併 PR 就行</p>\n<p>你可以配置 imgbot 的侦测方法、压缩方法（有损&#x2F;无损），具体可以查看插件的 <a href=\"https://imgbot.net/docs/\">文档</a></p>\n<p><strong>如果需要自定义配置的话</strong></p>\n<p>在仓库中创建一个名为 .imgbotconfig 的配置文件来自定义 ImgBot 的行为。该文件应放在仓库的根目录中。以下是一个示例配置文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;schedule&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;daily&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 设置 ImgBot 每天运行一次</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compression&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lossless&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 使用无损压缩</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ignoredFiles&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;path/to/ignored/file.png&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 忽略指定的文件</span></span><br><span class=\"line\">    <span class=\"string\">&quot;path/to/ignored/directory/*&quot;</span>  <span class=\"comment\">// 忽略指定的目录</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>","categories":["utils"],"tags":["工具"]},{"title":"vue3快速上手","url":"/2024/09/04/Vue/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","content":"<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\"></p>\n<h1 id=\"Vue3简介\"><a href=\"#Vue3简介\" class=\"headerlink\" title=\"Vue3简介\"></a>Vue3简介</h1><ul>\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\n<li>耗时2年多、<a href=\"https://github.com/vuejs/vue-next/graphs/commit-activity\">2600+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">30+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/vue-next/graphs/contributors\">99位贡献者</a> </li>\n<li>github上的tags地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\n</ul>\n<h1 id=\"Vue3带来了什么\"><a href=\"#Vue3带来了什么\" class=\"headerlink\" title=\"Vue3带来了什么\"></a>Vue3带来了什么</h1><h2 id=\"性能的提升\"><a href=\"#性能的提升\" class=\"headerlink\" title=\"性能的提升\"></a>性能的提升</h2><ul>\n<li><p>打包大小减少41%</p>\n</li>\n<li><p>初次渲染快55%, 更新渲染快133%</p>\n</li>\n<li><p>内存减少54%</p>\n<p>……</p>\n</li>\n</ul>\n<h2 id=\"源码的升级\"><a href=\"#源码的升级\" class=\"headerlink\" title=\"源码的升级\"></a>源码的升级</h2><ul>\n<li><p>使用Proxy代替defineProperty实现响应式</p>\n</li>\n<li><p>重写虚拟DOM的实现和Tree-Shaking</p>\n<p>……</p>\n</li>\n</ul>\n<h2 id=\"拥抱TypeScript\"><a href=\"#拥抱TypeScript\" class=\"headerlink\" title=\"拥抱TypeScript\"></a>拥抱TypeScript</h2><ul>\n<li>Vue3可以更好的支持TypeScript</li>\n</ul>\n<h2 id=\"新的特性\"><a href=\"#新的特性\" class=\"headerlink\" title=\"新的特性\"></a>新的特性</h2><ol>\n<li><p>Composition API（组合API）</p>\n<ul>\n<li>setup配置</li>\n<li>ref与reactive</li>\n<li>watch与watchEffect</li>\n<li>provide与inject</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment </li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除keyCode支持作为 v-on 的修饰符</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"创建Vue3-0工程\"><a href=\"#创建Vue3-0工程\" class=\"headerlink\" title=\"创建Vue3.0工程\"></a>创建Vue3.0工程</h1><h2 id=\"使用-vue-cli-创建\"><a href=\"#使用-vue-cli-创建\" class=\"headerlink\" title=\"使用 vue-cli 创建\"></a>使用 vue-cli 创建</h2><p>官方文档：<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class=\"line\">vue --version</span><br><span class=\"line\"><span class=\"comment\">## 安装或者升级你的@vue/cli</span></span><br><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"><span class=\"comment\">## 创建</span></span><br><span class=\"line\">vue create vue_test</span><br><span class=\"line\"><span class=\"comment\">## 启动</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> vue_test</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-vite-创建\"><a href=\"#使用-vite-创建\" class=\"headerlink\" title=\"使用 vite 创建\"></a>使用 vite 创建</h2><p>官方文档：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>\n<p>vite官网：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a></p>\n<ul>\n<li>什么是vite？—— 新一代前端构建工具。</li>\n<li>优势如下：<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite构建对比图</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240905155230.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240905155330.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建工程</span></span><br><span class=\"line\">npm init vite-app &lt;project-name&gt;</span><br><span class=\"line\"><span class=\"comment\">## 进入工程目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\"><span class=\"comment\">## 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"><span class=\"comment\">## 运行</span></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用-Composition-API\"><a href=\"#常用-Composition-API\" class=\"headerlink\" title=\"常用 Composition API\"></a>常用 Composition API</h1><p>官方文档: <a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>\n<h2 id=\"拉开序幕的setup\"><a href=\"#拉开序幕的setup\" class=\"headerlink\" title=\"拉开序幕的setup\"></a>拉开序幕的setup</h2><ol>\n<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>\n<li>setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>\n<li>setup函数的两种返回值：<ol>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：<ol>\n<li>尽量不要与Vue2.x配置混用<ul>\n<li>Vue2.x配置（data、methos、computed…）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。</li>\n<li>但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>\n<li>如果有重名, setup优先。</li>\n</ul>\n</li>\n<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"ref函数\"><a href=\"#ref函数\" class=\"headerlink\" title=\"ref函数\"></a>ref函数</h2><ul>\n<li>作用: 定义一个响应式的数据</li>\n<li>语法: <code>const xxx = ref(initValue)</code> <ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。</li>\n<li>JS中操作数据： <code>xxx.value</code></li>\n<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reactive函数\"><a href=\"#reactive函数\" class=\"headerlink\" title=\"reactive函数\"></a>reactive函数</h2><ul>\n<li>作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>\n<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>\n<li>reactive定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"Vue3-0中的响应式原理\"><a href=\"#Vue3-0中的响应式原理\" class=\"headerlink\" title=\"Vue3.0中的响应式原理\"></a>Vue3.0中的响应式原理</h2><h3 id=\"vue2-x的响应式\"><a href=\"#vue2-x的响应式\" class=\"headerlink\" title=\"vue2.x的响应式\"></a>vue2.x的响应式</h3><ul>\n<li><p>实现原理：</p>\n<ul>\n<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, <span class=\"string\">&#x27;count&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span> () &#123;&#125;, </span><br><span class=\"line\">    <span class=\"title function_\">set</span> () &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性, 界面不会更新。</li>\n<li>直接通过下标修改数组, 界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue3-0的响应式\"><a href=\"#Vue3-0的响应式\" class=\"headerlink\" title=\"Vue3.0的响应式\"></a>Vue3.0的响应式</h3><ul>\n<li>实现原理: <ul>\n<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>\n<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>\n<li>MDN文档中描述的Proxy与Reflect：<ul>\n<li><p>Proxy：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n</li>\n<li><p>Reflect：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(data, &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截读取属性值</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span> (target, prop) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(target, prop)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 拦截设置属性值或添加新属性</span></span><br><span class=\"line\">    <span class=\"title function_\">set</span> (target, prop, value) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(target, prop, value)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 拦截删除属性</span></span><br><span class=\"line\">    <span class=\"title function_\">deleteProperty</span> (target, prop) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">deleteProperty</span>(target, prop)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.<span class=\"property\">name</span> = <span class=\"string\">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reactive对比ref\"><a href=\"#reactive对比ref\" class=\"headerlink\" title=\"reactive对比ref\"></a>reactive对比ref</h2><ul>\n<li>从定义数据角度对比：<ul>\n<li>ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li>reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li>备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：<ul>\n<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>\n<li>reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：<ul>\n<li>ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong><code>.value</code>。</li>\n<li>reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong><code>.value</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"setup的两个注意点\"><a href=\"#setup的两个注意点\" class=\"headerlink\" title=\"setup的两个注意点\"></a>setup的两个注意点</h2><ul>\n<li><p>setup执行的时机</p>\n<ul>\n<li>在beforeCreate之前执行一次，this是undefined。</li>\n</ul>\n</li>\n<li><p>setup的参数</p>\n<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>\n<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>\n<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"计算属性与监视\"><a href=\"#计算属性与监视\" class=\"headerlink\" title=\"计算属性与监视\"></a>计算属性与监视</h2><h3 id=\"computed函数\"><a href=\"#computed函数\" class=\"headerlink\" title=\"computed函数\"></a>computed函数</h3><ul>\n<li><p>与Vue2.x中computed配置功能一致</p>\n</li>\n<li><p>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;computed&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"comment\">//计算属性——简写</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullName = <span class=\"title function_\">computed</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + person.<span class=\"property\">lastName</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//计算属性——完整</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullName = <span class=\"title function_\">computed</span>(&#123;</span><br><span class=\"line\">        <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> person.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + person.<span class=\"property\">lastName</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> nameArr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            person.<span class=\"property\">firstName</span> = nameArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">            person.<span class=\"property\">lastName</span> = nameArr[<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"watch函数\"><a href=\"#watch函数\" class=\"headerlink\" title=\"watch函数\"></a>watch函数</h3><ul>\n<li><p>与Vue2.x中watch配置功能一致</p>\n</li>\n<li><p>两个小“坑”：</p>\n<ul>\n<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>\n<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情况一：监视ref定义的响应式数据</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(sum,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况二：监视多个ref定义的响应式数据</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>([sum,msg],<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(person,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">false</span>&#125;) <span class=\"comment\">//此处的deep配置不再奏效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"function\">()=&gt;</span>person.<span class=\"property\">job</span>,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>([<span class=\"function\">()=&gt;</span>person.<span class=\"property\">job</span>,<span class=\"function\">()=&gt;</span>person.<span class=\"property\">name</span>],<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//特殊情况</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(<span class=\"function\">()=&gt;</span>person.<span class=\"property\">job</span>,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;) <span class=\"comment\">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"watchEffect函数\"><a href=\"#watchEffect函数\" class=\"headerlink\" title=\"watchEffect函数\"></a>watchEffect函数</h3><ul>\n<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li><p>watchEffect有点像computed：</p>\n<ul>\n<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = sum.<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = person.<span class=\"property\">age</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p><strong>vue2.x的生命周期</strong><br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/生命周期.png\" alt=\"lifecycle_2\"/></p>\n<p><strong>vue3.0的生命周期</strong><br><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240905155545.png\" alt=\"lifecycle_2\"/></p>\n<ul>\n<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>\n<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>\n<li><code>destroyed</code>改名为 <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>\n<li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>\n<li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>\n<li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li>\n<li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li>\n<li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li>\n<li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li>\n<li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li>\n<li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义hook函数\"><a href=\"#自定义hook函数\" class=\"headerlink\" title=\"自定义hook函数\"></a>自定义hook函数</h2><ul>\n<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>\n</li>\n<li><p>类似于vue2.x中的mixin。</p>\n</li>\n<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h2><ul>\n<li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p>\n</li>\n<li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p>\n</li>\n<li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p>\n</li>\n<li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p>\n</li>\n</ul>\n<h1 id=\"其它-Composition-API\"><a href=\"#其它-Composition-API\" class=\"headerlink\" title=\"其它 Composition API\"></a>其它 Composition API</h1><h2 id=\"shallowReactive-与-shallowRef\"><a href=\"#shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"shallowReactive 与 shallowRef\"></a>shallowReactive 与 shallowRef</h2><ul>\n<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\n</li>\n<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\n</li>\n<li><p>什么时候使用?</p>\n<ul>\n<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li>\n<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"readonly-与-shallowReadonly\"><a href=\"#readonly-与-shallowReadonly\" class=\"headerlink\" title=\"readonly 与 shallowReadonly\"></a>readonly 与 shallowReadonly</h2><ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h2 id=\"toRaw-与-markRaw\"><a href=\"#toRaw-与-markRaw\" class=\"headerlink\" title=\"toRaw 与 markRaw\"></a>toRaw 与 markRaw</h2><ul>\n<li>toRaw：<ul>\n<li>作用：将一个由<code>reactive</code>生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef\"></a>customRef</h2><ul>\n<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li><p>实现防抖效果：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keyword&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">import</span> &#123;ref,customRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Demo&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//自定义一个myRef</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">function</span> <span class=\"title function_\">myRef</span>(<span class=\"params\">value,delay</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">let</span> timer</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">//通过customRef去实现自定义</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>)=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">return</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">track</span>() <span class=\"comment\">//告诉Vue这个value值是需要被“追踪”的</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"keyword\">return</span> value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"built_in\">clearTimeout</span>(timer)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                value = newValue</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"title function_\">trigger</span>() <span class=\"comment\">//告诉Vue去更新界面</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              &#125;,delay)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">let</span> keyword = <span class=\"title function_\">myRef</span>(<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">500</span>) <span class=\"comment\">//使用程序员自定义的ref</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        keyword</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"provide-与-inject\"><a href=\"#provide-与-inject\" class=\"headerlink\" title=\"provide 与 inject\"></a>provide 与 inject</h2><p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/20240905164455.png\"></p>\n<ul>\n<li><p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>\n</li>\n<li><p>具体写法：</p>\n<ol>\n<li>祖组件中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> car = <span class=\"title function_\">reactive</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;奔驰&#x27;</span>,<span class=\"attr\">price</span>:<span class=\"string\">&#x27;40万&#x27;</span>&#125;)</span><br><span class=\"line\">  <span class=\"title function_\">provide</span>(<span class=\"string\">&#x27;car&#x27;</span>,car)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>后代组件中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\">props,context</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> car = <span class=\"title function_\">inject</span>(<span class=\"string\">&#x27;car&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;car&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"响应式数据的判断\"><a href=\"#响应式数据的判断\" class=\"headerlink\" title=\"响应式数据的判断\"></a>响应式数据的判断</h2><ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>\n</ul>\n<h1 id=\"Composition-API-的优势\"><a href=\"#Composition-API-的优势\" class=\"headerlink\" title=\"Composition API 的优势\"></a>Composition API 的优势</h1><h2 id=\"Options-API-存在的问题\"><a href=\"#Options-API-存在的问题\" class=\"headerlink\" title=\"Options API 存在的问题\"></a>Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>\n<div style=\"overflow:hidden;\">\n    <img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:66.66%;height:360px;float:left\" />\n    <img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"width:33.33%;height:360px;float:left\" />\n</div>\n\n\n\n\n<h2 id=\"Composition-API-的优势-1\"><a href=\"#Composition-API-的优势-1\" class=\"headerlink\" title=\"Composition API 的优势\"></a>Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"overflow:hidden;\">\n<img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\" style=\"height:360px;width:60%; float:left\"/>\n<img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\" style=\"height:360px;;width:40%; float:right\"/>\n</div>\n\n\n<h1 id=\"新的组件\"><a href=\"#新的组件\" class=\"headerlink\" title=\"新的组件\"></a>新的组件</h1><h2 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h2><ul>\n<li>在Vue2中: 组件必须有一个根标签</li>\n<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h2 id=\"Teleport\"><a href=\"#Teleport\" class=\"headerlink\" title=\"Teleport\"></a>Teleport</h2><ul>\n<li>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;teleport to=<span class=\"string\">&quot;移动位置&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mask&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是一个弹窗<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Suspense\"><a href=\"#Suspense\" class=\"headerlink\" title=\"Suspense\"></a>Suspense</h2><ul>\n<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li><p>使用步骤：</p>\n<ul>\n<li>异步引入组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span> = <span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是App组件<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:fallback</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>加载中.....<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"全局API的转移\"><a href=\"#全局API的转移\" class=\"headerlink\" title=\"全局API的转移\"></a>全局API的转移</h2><ul>\n<li><p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li>例如：注册全局组件、注册全局指令等。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册全局组件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//注册全局指令</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">directive</span>(<span class=\"string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">inserted</span>: <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue3.0中对这些API做出了调整：</p>\n<ul>\n<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>\n<table>\n<thead>\n<tr>\n<th>2.x 全局 API（<code>Vue</code>）</th>\n<th>3.x 实例 API (<code>app</code>)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td><strong style=\"color:#DD5145\">移除</strong></td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他改变\"><a href=\"#其他改变\" class=\"headerlink\" title=\"其他改变\"></a>其他改变</h2><ul>\n<li><p>data选项应始终被声明为一个函数。</p>\n</li>\n<li><p>过度类名的更改：</p>\n<ul>\n<li>Vue2.x写法</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Vue3.x写法</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter-from</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-from</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong><code>v-on.native</code>修饰符</p>\n<ul>\n<li>父组件中绑定事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;my-component</span><br><span class=\"line\">  v-<span class=\"attr\">on</span>:close=<span class=\"string\">&quot;handleComponentEvent&quot;</span></span><br><span class=\"line\">  v-<span class=\"attr\">on</span>:click=<span class=\"string\">&quot;handleNativeClickEvent&quot;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子组件中声明自定义事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;close&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote>\n<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器</p>\n</blockquote>\n</li>\n</ul>\n","categories":["Vue"],"tags":["vue3"]},{"title":"Typora如何使用破解","url":"/2024/07/24/utils/Typora%E7%A0%B4%E8%A7%A3/","content":"<h2 id=\"下载Typora\"><a href=\"#下载Typora\" class=\"headerlink\" title=\"下载Typora\"></a>下载<a href=\"https://so.csdn.net/so/search?q=Typora&spm=1001.2101.3001.7020\">Typora</a></h2><p>网址：<a href=\"https://typoraio.cn/\">Typora 官方中文站 (typoraio.cn)</a></p>\n<h2 id=\"安装Typora\"><a href=\"#安装Typora\" class=\"headerlink\" title=\"安装Typora\"></a>安装Typora</h2><p>双击Typora.exe 安装完成</p>\n<h2 id=\"激活方法\"><a href=\"#激活方法\" class=\"headerlink\" title=\"激活方法\"></a>激活方法</h2><p>安装路径下找到：Typora\\resources\\page-dist\\static\\js</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240821114557270.png\" alt=\"image-20240821114557270\"></p>\n<p>右键用记事本打开这个文件，ctrl+F定位到</p>\n<p><strong>e.hasActivated&#x3D;”true”&#x3D;&#x3D;e.hasActivated</strong></p>\n<p><strong>替换为</strong></p>\n<p><strong>e.hasActivated&#x3D;”true”&#x3D;&#x3D;”true”</strong></p>\n<p><strong>这样就已经后台激活完成，但是每次开软件开始会提醒激活</strong></p>\n<h2 id=\"关闭每次启动的激活弹窗\"><a href=\"#关闭每次启动的激活弹窗\" class=\"headerlink\" title=\"关闭每次启动的激活弹窗\"></a>关闭每次启动的激活弹窗</h2><p>继续在安装路径下resources\\page-dist*<em>license.html，找到</em>*</p>\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240821114609587.png\" alt=\"image-20240821114609587\"></p>\n<p>依旧ctrl+F 定位到：<code>&lt;/body&gt;&lt;/html&gt;</code></p>\n<p><strong>替换为</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">    &#125;, <span class=\"number\">15</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"去除左下角“UNREGISTERED”提示\"><a href=\"#去除左下角“UNREGISTERED”提示\" class=\"headerlink\" title=\"去除左下角“UNREGISTERED”提示\"></a>去除左下角“UNREGISTERED”提示</h2><blockquote>\n<p>找到  Typora\\resources\\appsrc\\window\\frame.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;0.6s后消除&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">children</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">children</span>[i].<span class=\"property\">textContent</span>.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;UNREGISTERED ×&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">children</span>[i].<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Luosplan/gallery-repo/main/notes/image-20240821114457051.png\" alt=\"image-20240821114457051\"></p>\n","categories":["utils"],"tags":["工具"]}]